// -*- C++ -*-
#ifndef triboson_H
#define triboson_H
#include "Math/LorentzVector.h"
#include "Math/Point3D.h"
#include "TMath.h"
#include "TBranch.h"
#include "TTree.h"
#include "TH1F.h"
#include "TFile.h"
#include "TBits.h"
#include <vector> 
#include <unistd.h> 
typedef ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > LorentzVector;

// Generated with the command
// makeCMS3ClassFiles("chain files", "t", "triboson", "triboson_np", "cms3_triboson")

using namespace std; 
class triboson {
private: 
protected: 
	unsigned int index;
	int	run_;
	TBranch *run_branch;
	bool run_isLoaded;
	int	lumi_;
	TBranch *lumi_branch;
	bool lumi_isLoaded;
	unsigned long long	evt_;
	TBranch *evt_branch;
	bool evt_isLoaded;
	int	isData_;
	TBranch *isData_branch;
	bool isData_isLoaded;
	bool	evt_passgoodrunlist_;
	TBranch *evt_passgoodrunlist_branch;
	bool evt_passgoodrunlist_isLoaded;
	float	evt_scale1fb_;
	TBranch *evt_scale1fb_branch;
	bool evt_scale1fb_isLoaded;
	float	evt_xsec_;
	TBranch *evt_xsec_branch;
	bool evt_xsec_isLoaded;
	float	evt_kfactor_;
	TBranch *evt_kfactor_branch;
	bool evt_kfactor_isLoaded;
	float	evt_filter_;
	TBranch *evt_filter_branch;
	bool evt_filter_isLoaded;
	int	evt_nEvts_;
	TBranch *evt_nEvts_branch;
	bool evt_nEvts_isLoaded;
	vector<TString> *evt_dataset_;
	TBranch *evt_dataset_branch;
	bool evt_dataset_isLoaded;
	float	puWeight_;
	TBranch *puWeight_branch;
	bool puWeight_isLoaded;
	int	nVert_;
	TBranch *nVert_branch;
	bool nVert_isLoaded;
	int	nTrueInt_;
	TBranch *nTrueInt_branch;
	bool nTrueInt_isLoaded;
	float	rho_;
	TBranch *rho_branch;
	bool rho_isLoaded;
	float	rho25_;
	TBranch *rho25_branch;
	bool rho25_isLoaded;
	float	gen_ht_;
	TBranch *gen_ht_branch;
	bool gen_ht_isLoaded;
	int	nBJetTight_;
	TBranch *nBJetTight_branch;
	bool nBJetTight_isLoaded;
	int	nBJetMedium_;
	TBranch *nBJetMedium_branch;
	bool nBJetMedium_isLoaded;
	int	nBJetLoose_;
	TBranch *nBJetLoose_branch;
	bool nBJetLoose_isLoaded;
	int	nBJetTight_up_;
	TBranch *nBJetTight_up_branch;
	bool nBJetTight_up_isLoaded;
	int	nBJetMedium_up_;
	TBranch *nBJetMedium_up_branch;
	bool nBJetMedium_up_isLoaded;
	int	nBJetLoose_up_;
	TBranch *nBJetLoose_up_branch;
	bool nBJetLoose_up_isLoaded;
	int	nBJetTight_dn_;
	TBranch *nBJetTight_dn_branch;
	bool nBJetTight_dn_isLoaded;
	int	nBJetMedium_dn_;
	TBranch *nBJetMedium_dn_branch;
	bool nBJetMedium_dn_isLoaded;
	int	nBJetLoose_dn_;
	TBranch *nBJetLoose_dn_branch;
	bool nBJetLoose_dn_isLoaded;
	int	nJet200MuFrac50DphiMet_;
	TBranch *nJet200MuFrac50DphiMet_branch;
	bool nJet200MuFrac50DphiMet_isLoaded;
	int	nMuons10_;
	TBranch *nMuons10_branch;
	bool nMuons10_isLoaded;
	int	nBadMuons20_;
	TBranch *nBadMuons20_branch;
	bool nBadMuons20_isLoaded;
	int	nElectrons10_;
	TBranch *nElectrons10_branch;
	bool nElectrons10_isLoaded;
	int	nGammas20_;
	TBranch *nGammas20_branch;
	bool nGammas20_isLoaded;
	int	nTaus20_;
	TBranch *nTaus20_branch;
	bool nTaus20_isLoaded;
	float	met_pt_;
	TBranch *met_pt_branch;
	bool met_pt_isLoaded;
	float	met_phi_;
	TBranch *met_phi_branch;
	bool met_phi_isLoaded;
	float	met_calo_pt_;
	TBranch *met_calo_pt_branch;
	bool met_calo_pt_isLoaded;
	float	met_calo_phi_;
	TBranch *met_calo_phi_branch;
	bool met_calo_phi_isLoaded;
	float	met_miniaod_pt_;
	TBranch *met_miniaod_pt_branch;
	bool met_miniaod_pt_isLoaded;
	float	met_miniaod_phi_;
	TBranch *met_miniaod_phi_branch;
	bool met_miniaod_phi_isLoaded;
	float	met_muegclean_pt_;
	TBranch *met_muegclean_pt_branch;
	bool met_muegclean_pt_isLoaded;
	float	met_muegclean_phi_;
	TBranch *met_muegclean_phi_branch;
	bool met_muegclean_phi_isLoaded;
	float	met_rawPt_;
	TBranch *met_rawPt_branch;
	bool met_rawPt_isLoaded;
	float	met_rawPhi_;
	TBranch *met_rawPhi_branch;
	bool met_rawPhi_isLoaded;
	float	met_genPt_;
	TBranch *met_genPt_branch;
	bool met_genPt_isLoaded;
	float	met_genPhi_;
	TBranch *met_genPhi_branch;
	bool met_genPhi_isLoaded;
	float	sumet_raw_;
	TBranch *sumet_raw_branch;
	bool sumet_raw_isLoaded;
	int	Flag_ecalLaserCorrFilter_;
	TBranch *Flag_ecalLaserCorrFilter_branch;
	bool Flag_ecalLaserCorrFilter_isLoaded;
	int	Flag_hcalLaserEventFilter_;
	TBranch *Flag_hcalLaserEventFilter_branch;
	bool Flag_hcalLaserEventFilter_isLoaded;
	int	Flag_trackingFailureFilter_;
	TBranch *Flag_trackingFailureFilter_branch;
	bool Flag_trackingFailureFilter_isLoaded;
	int	Flag_CSCTightHaloFilter_;
	TBranch *Flag_CSCTightHaloFilter_branch;
	bool Flag_CSCTightHaloFilter_isLoaded;
	int	Flag_HBHENoiseFilter_;
	TBranch *Flag_HBHENoiseFilter_branch;
	bool Flag_HBHENoiseFilter_isLoaded;
	int	Flag_HBHEIsoNoiseFilter_;
	TBranch *Flag_HBHEIsoNoiseFilter_branch;
	bool Flag_HBHEIsoNoiseFilter_isLoaded;
	int	Flag_CSCTightHalo2015Filter_;
	TBranch *Flag_CSCTightHalo2015Filter_branch;
	bool Flag_CSCTightHalo2015Filter_isLoaded;
	int	Flag_EcalDeadCellTriggerPrimitiveFilter_;
	TBranch *Flag_EcalDeadCellTriggerPrimitiveFilter_branch;
	bool Flag_EcalDeadCellTriggerPrimitiveFilter_isLoaded;
	int	Flag_goodVertices_;
	TBranch *Flag_goodVertices_branch;
	bool Flag_goodVertices_isLoaded;
	int	Flag_eeBadScFilter_;
	TBranch *Flag_eeBadScFilter_branch;
	bool Flag_eeBadScFilter_isLoaded;
	int	Flag_globalTightHalo2016_;
	TBranch *Flag_globalTightHalo2016_branch;
	bool Flag_globalTightHalo2016_isLoaded;
	int	Flag_badMuonFilter_;
	TBranch *Flag_badMuonFilter_branch;
	bool Flag_badMuonFilter_isLoaded;
	int	Flag_badChargedCandidateFilter_;
	TBranch *Flag_badChargedCandidateFilter_branch;
	bool Flag_badChargedCandidateFilter_isLoaded;
	int	Flag_badMuonFilterv2_;
	TBranch *Flag_badMuonFilterv2_branch;
	bool Flag_badMuonFilterv2_isLoaded;
	int	Flag_badChargedCandidateFilterv2_;
	TBranch *Flag_badChargedCandidateFilterv2_branch;
	bool Flag_badChargedCandidateFilterv2_isLoaded;
	int	Flag_badMuons_;
	TBranch *Flag_badMuons_branch;
	bool Flag_badMuons_isLoaded;
	int	Flag_duplicateMuons_;
	TBranch *Flag_duplicateMuons_branch;
	bool Flag_duplicateMuons_isLoaded;
	int	Flag_noBadMuons_;
	TBranch *Flag_noBadMuons_branch;
	bool Flag_noBadMuons_isLoaded;
	int	HLT_singleEl_;
	TBranch *HLT_singleEl_branch;
	bool HLT_singleEl_isLoaded;
	int	HLT_singleMu_;
	TBranch *HLT_singleMu_branch;
	bool HLT_singleMu_isLoaded;
	int	HLT_singleMu_noiso_;
	TBranch *HLT_singleMu_noiso_branch;
	bool HLT_singleMu_noiso_isLoaded;
	int	HLT_DoubleEl_noiso_;
	TBranch *HLT_DoubleEl_noiso_branch;
	bool HLT_DoubleEl_noiso_isLoaded;
	int	HLT_DoubleEl_;
	TBranch *HLT_DoubleEl_branch;
	bool HLT_DoubleEl_isLoaded;
	int	HLT_DoubleEl_DZ_;
	TBranch *HLT_DoubleEl_DZ_branch;
	bool HLT_DoubleEl_DZ_isLoaded;
	int	HLT_DoubleEl_DZ_2_;
	TBranch *HLT_DoubleEl_DZ_2_branch;
	bool HLT_DoubleEl_DZ_2_isLoaded;
	int	HLT_MuEG_;
	TBranch *HLT_MuEG_branch;
	bool HLT_MuEG_isLoaded;
	int	HLT_MuEG_2_;
	TBranch *HLT_MuEG_2_branch;
	bool HLT_MuEG_2_isLoaded;
	int	HLT_MuEG_noiso_;
	TBranch *HLT_MuEG_noiso_branch;
	bool HLT_MuEG_noiso_isLoaded;
	int	HLT_MuEG_noiso_2_;
	TBranch *HLT_MuEG_noiso_2_branch;
	bool HLT_MuEG_noiso_2_isLoaded;
	int	HLT_Mu8_EG17_;
	TBranch *HLT_Mu8_EG17_branch;
	bool HLT_Mu8_EG17_isLoaded;
	int	HLT_Mu8_EG23_;
	TBranch *HLT_Mu8_EG23_branch;
	bool HLT_Mu8_EG23_isLoaded;
	int	HLT_Mu8_EG23_DZ_;
	TBranch *HLT_Mu8_EG23_DZ_branch;
	bool HLT_Mu8_EG23_DZ_isLoaded;
	int	HLT_Mu12_EG23_DZ_;
	TBranch *HLT_Mu12_EG23_DZ_branch;
	bool HLT_Mu12_EG23_DZ_isLoaded;
	int	HLT_Mu17_EG12_;
	TBranch *HLT_Mu17_EG12_branch;
	bool HLT_Mu17_EG12_isLoaded;
	int	HLT_Mu23_EG8_;
	TBranch *HLT_Mu23_EG8_branch;
	bool HLT_Mu23_EG8_isLoaded;
	int	HLT_Mu23_EG8_DZ_;
	TBranch *HLT_Mu23_EG8_DZ_branch;
	bool HLT_Mu23_EG8_DZ_isLoaded;
	int	HLT_Mu23_EG12_;
	TBranch *HLT_Mu23_EG12_branch;
	bool HLT_Mu23_EG12_isLoaded;
	int	HLT_Mu23_EG12_DZ_;
	TBranch *HLT_Mu23_EG12_DZ_branch;
	bool HLT_Mu23_EG12_DZ_isLoaded;
	int	HLT_DoubleMu_noiso_;
	TBranch *HLT_DoubleMu_noiso_branch;
	bool HLT_DoubleMu_noiso_isLoaded;
	int	HLT_DoubleMu_noiso_27_8_;
	TBranch *HLT_DoubleMu_noiso_27_8_branch;
	bool HLT_DoubleMu_noiso_27_8_isLoaded;
	int	HLT_DoubleMu_noiso_30_11_;
	TBranch *HLT_DoubleMu_noiso_30_11_branch;
	bool HLT_DoubleMu_noiso_30_11_isLoaded;
	int	HLT_DoubleMu_noiso_40_11_;
	TBranch *HLT_DoubleMu_noiso_40_11_branch;
	bool HLT_DoubleMu_noiso_40_11_isLoaded;
	int	HLT_DoubleMu_;
	TBranch *HLT_DoubleMu_branch;
	bool HLT_DoubleMu_isLoaded;
	int	HLT_DoubleMu_tk_;
	TBranch *HLT_DoubleMu_tk_branch;
	bool HLT_DoubleMu_tk_isLoaded;
	int	HLT_DoubleMu_dbltk_;
	TBranch *HLT_DoubleMu_dbltk_branch;
	bool HLT_DoubleMu_dbltk_isLoaded;
	int	HLT_DoubleMu_nonDZ_;
	TBranch *HLT_DoubleMu_nonDZ_branch;
	bool HLT_DoubleMu_nonDZ_isLoaded;
	int	HLT_DoubleMu_tk_nonDZ_;
	TBranch *HLT_DoubleMu_tk_nonDZ_branch;
	bool HLT_DoubleMu_tk_nonDZ_isLoaded;
	int	HLT_Photon22_R9Id90_HE10_IsoM_;
	TBranch *HLT_Photon22_R9Id90_HE10_IsoM_branch;
	bool HLT_Photon22_R9Id90_HE10_IsoM_isLoaded;
	int	HLT_Photon30_R9Id90_HE10_IsoM_;
	TBranch *HLT_Photon30_R9Id90_HE10_IsoM_branch;
	bool HLT_Photon30_R9Id90_HE10_IsoM_isLoaded;
	int	HLT_Photon36_R9Id90_HE10_IsoM_;
	TBranch *HLT_Photon36_R9Id90_HE10_IsoM_branch;
	bool HLT_Photon36_R9Id90_HE10_IsoM_isLoaded;
	int	HLT_Photon50_R9Id90_HE10_IsoM_;
	TBranch *HLT_Photon50_R9Id90_HE10_IsoM_branch;
	bool HLT_Photon50_R9Id90_HE10_IsoM_isLoaded;
	int	HLT_Photon75_R9Id90_HE10_IsoM_;
	TBranch *HLT_Photon75_R9Id90_HE10_IsoM_branch;
	bool HLT_Photon75_R9Id90_HE10_IsoM_isLoaded;
	int	HLT_Photon90_R9Id90_HE10_IsoM_;
	TBranch *HLT_Photon90_R9Id90_HE10_IsoM_branch;
	bool HLT_Photon90_R9Id90_HE10_IsoM_isLoaded;
	int	HLT_Photon120_R9Id90_HE10_IsoM_;
	TBranch *HLT_Photon120_R9Id90_HE10_IsoM_branch;
	bool HLT_Photon120_R9Id90_HE10_IsoM_isLoaded;
	int	HLT_Photon165_R9Id90_HE10_IsoM_;
	TBranch *HLT_Photon165_R9Id90_HE10_IsoM_branch;
	bool HLT_Photon165_R9Id90_HE10_IsoM_isLoaded;
	int	HLT_Photon165_HE10_;
	TBranch *HLT_Photon165_HE10_branch;
	bool HLT_Photon165_HE10_isLoaded;
	int	HLT_CaloJet500_NoJetID_;
	TBranch *HLT_CaloJet500_NoJetID_branch;
	bool HLT_CaloJet500_NoJetID_isLoaded;
	int	HLT_ECALHT800_NoJetID_;
	TBranch *HLT_ECALHT800_NoJetID_branch;
	bool HLT_ECALHT800_NoJetID_isLoaded;
	bool	HLT_Photon22_R9Id90_HE10_IsoM_matchedtophoton_;
	TBranch *HLT_Photon22_R9Id90_HE10_IsoM_matchedtophoton_branch;
	bool HLT_Photon22_R9Id90_HE10_IsoM_matchedtophoton_isLoaded;
	bool	HLT_Photon30_R9Id90_HE10_IsoM_matchedtophoton_;
	TBranch *HLT_Photon30_R9Id90_HE10_IsoM_matchedtophoton_branch;
	bool HLT_Photon30_R9Id90_HE10_IsoM_matchedtophoton_isLoaded;
	bool	HLT_Photon36_R9Id90_HE10_IsoM_matchedtophoton_;
	TBranch *HLT_Photon36_R9Id90_HE10_IsoM_matchedtophoton_branch;
	bool HLT_Photon36_R9Id90_HE10_IsoM_matchedtophoton_isLoaded;
	bool	HLT_Photon50_R9Id90_HE10_IsoM_matchedtophoton_;
	TBranch *HLT_Photon50_R9Id90_HE10_IsoM_matchedtophoton_branch;
	bool HLT_Photon50_R9Id90_HE10_IsoM_matchedtophoton_isLoaded;
	bool	HLT_Photon75_R9Id90_HE10_IsoM_matchedtophoton_;
	TBranch *HLT_Photon75_R9Id90_HE10_IsoM_matchedtophoton_branch;
	bool HLT_Photon75_R9Id90_HE10_IsoM_matchedtophoton_isLoaded;
	bool	HLT_Photon90_R9Id90_HE10_IsoM_matchedtophoton_;
	TBranch *HLT_Photon90_R9Id90_HE10_IsoM_matchedtophoton_branch;
	bool HLT_Photon90_R9Id90_HE10_IsoM_matchedtophoton_isLoaded;
	bool	HLT_Photon120_R9Id90_HE10_IsoM_matchedtophoton_;
	TBranch *HLT_Photon120_R9Id90_HE10_IsoM_matchedtophoton_branch;
	bool HLT_Photon120_R9Id90_HE10_IsoM_matchedtophoton_isLoaded;
	bool	HLT_Photon165_R9Id90_HE10_IsoM_matchedtophoton_;
	TBranch *HLT_Photon165_R9Id90_HE10_IsoM_matchedtophoton_branch;
	bool HLT_Photon165_R9Id90_HE10_IsoM_matchedtophoton_isLoaded;
	bool	HLT_Photon165_HE10_matchedtophoton_;
	TBranch *HLT_Photon165_HE10_matchedtophoton_branch;
	bool HLT_Photon165_HE10_matchedtophoton_isLoaded;
	float	dilmass_;
	TBranch *dilmass_branch;
	bool dilmass_isLoaded;
	float	dilpt_;
	TBranch *dilpt_branch;
	bool dilpt_isLoaded;
	float	dRll_;
	TBranch *dRll_branch;
	bool dRll_isLoaded;
	float	matched_neutralemf_;
	TBranch *matched_neutralemf_branch;
	bool matched_neutralemf_isLoaded;
	float	matched_emf_;
	TBranch *matched_emf_branch;
	bool matched_emf_isLoaded;
	bool	elveto_;
	TBranch *elveto_branch;
	bool elveto_isLoaded;
	int	nlep_;
	TBranch *nlep_branch;
	bool nlep_isLoaded;
	int	nveto_leptons_;
	TBranch *nveto_leptons_branch;
	bool nveto_leptons_isLoaded;
	int	nVetoEl_relIso03EAless01_;
	TBranch *nVetoEl_relIso03EAless01_branch;
	bool nVetoEl_relIso03EAless01_isLoaded;
	int	nVetoEl_relIso03EAless02_;
	TBranch *nVetoEl_relIso03EAless02_branch;
	bool nVetoEl_relIso03EAless02_isLoaded;
	int	nVetoEl_relIso03EAless03_;
	TBranch *nVetoEl_relIso03EAless03_branch;
	bool nVetoEl_relIso03EAless03_isLoaded;
	int	nVetoEl_relIso03EAless04_;
	TBranch *nVetoEl_relIso03EAless04_branch;
	bool nVetoEl_relIso03EAless04_isLoaded;
	int	nVetoMu_relIso03EAless01_;
	TBranch *nVetoMu_relIso03EAless01_branch;
	bool nVetoMu_relIso03EAless01_isLoaded;
	int	nVetoMu_relIso03EAless02_;
	TBranch *nVetoMu_relIso03EAless02_branch;
	bool nVetoMu_relIso03EAless02_isLoaded;
	int	nVetoMu_relIso03EAless03_;
	TBranch *nVetoMu_relIso03EAless03_branch;
	bool nVetoMu_relIso03EAless03_isLoaded;
	int	nVetoMu_relIso03EAless04_;
	TBranch *nVetoMu_relIso03EAless04_branch;
	bool nVetoMu_relIso03EAless04_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *lep_p4_;
	TBranch *lep_p4_branch;
	bool lep_p4_isLoaded;
	vector<float> *lep_pt_;
	TBranch *lep_pt_branch;
	bool lep_pt_isLoaded;
	vector<float> *lep_eta_;
	TBranch *lep_eta_branch;
	bool lep_eta_isLoaded;
	vector<float> *lep_phi_;
	TBranch *lep_phi_branch;
	bool lep_phi_isLoaded;
	vector<float> *lep_mass_;
	TBranch *lep_mass_branch;
	bool lep_mass_isLoaded;
	vector<int> *lep_charge_;
	TBranch *lep_charge_branch;
	bool lep_charge_isLoaded;
	vector<bool> *lep_3ch_agree_;
	TBranch *lep_3ch_agree_branch;
	bool lep_3ch_agree_isLoaded;
	vector<bool> *lep_isFromW_;
	TBranch *lep_isFromW_branch;
	bool lep_isFromW_isLoaded;
	vector<bool> *lep_isFromZ_;
	TBranch *lep_isFromZ_branch;
	bool lep_isFromZ_isLoaded;
	vector<bool> *lep_isFromB_;
	TBranch *lep_isFromB_branch;
	bool lep_isFromB_isLoaded;
	vector<bool> *lep_isFromC_;
	TBranch *lep_isFromC_branch;
	bool lep_isFromC_isLoaded;
	vector<bool> *lep_isFromL_;
	TBranch *lep_isFromL_branch;
	bool lep_isFromL_isLoaded;
	vector<bool> *lep_isFromLF_;
	TBranch *lep_isFromLF_branch;
	bool lep_isFromLF_isLoaded;
	vector<double> *lep_ptRatio_;
	TBranch *lep_ptRatio_branch;
	bool lep_ptRatio_isLoaded;
	vector<double> *lep_ptRel_;
	TBranch *lep_ptRel_branch;
	bool lep_ptRel_isLoaded;
	vector<double> *lep_relIso03_;
	TBranch *lep_relIso03_branch;
	bool lep_relIso03_isLoaded;
	vector<double> *lep_relIso03DB_;
	TBranch *lep_relIso03DB_branch;
	bool lep_relIso03DB_isLoaded;
	vector<double> *lep_relIso03EA_;
	TBranch *lep_relIso03EA_branch;
	bool lep_relIso03EA_isLoaded;
	vector<double> *lep_relIso03EAv2_;
	TBranch *lep_relIso03EAv2_branch;
	bool lep_relIso03EAv2_isLoaded;
	vector<double> *lep_relIso04DB_;
	TBranch *lep_relIso04DB_branch;
	bool lep_relIso04DB_isLoaded;
	vector<double> *lep_relIso04EA_;
	TBranch *lep_relIso04EA_branch;
	bool lep_relIso04EA_isLoaded;
	vector<double> *lep_relIso04EAv2_;
	TBranch *lep_relIso04EAv2_branch;
	bool lep_relIso04EAv2_isLoaded;
	vector<double> *lep_miniRelIsoCMS3_EA_;
	TBranch *lep_miniRelIsoCMS3_EA_branch;
	bool lep_miniRelIsoCMS3_EA_isLoaded;
	vector<double> *lep_miniRelIsoCMS3_EAv2_;
	TBranch *lep_miniRelIsoCMS3_EAv2_branch;
	bool lep_miniRelIsoCMS3_EAv2_isLoaded;
	vector<double> *lep_miniRelIsoCMS3_DB_;
	TBranch *lep_miniRelIsoCMS3_DB_branch;
	bool lep_miniRelIsoCMS3_DB_isLoaded;
	vector<bool> *lep_pass_VVV_cutbased_veto_;
	TBranch *lep_pass_VVV_cutbased_veto_branch;
	bool lep_pass_VVV_cutbased_veto_isLoaded;
	vector<bool> *lep_pass_VVV_cutbased_veto_noiso_;
	TBranch *lep_pass_VVV_cutbased_veto_noiso_branch;
	bool lep_pass_VVV_cutbased_veto_noiso_isLoaded;
	vector<bool> *lep_pass_VVV_cutbased_veto_noiso_noip_;
	TBranch *lep_pass_VVV_cutbased_veto_noiso_noip_branch;
	bool lep_pass_VVV_cutbased_veto_noiso_noip_isLoaded;
	vector<bool> *lep_pass_VVV_cutbased_fo_;
	TBranch *lep_pass_VVV_cutbased_fo_branch;
	bool lep_pass_VVV_cutbased_fo_isLoaded;
	vector<bool> *lep_pass_VVV_cutbased_fo_noiso_;
	TBranch *lep_pass_VVV_cutbased_fo_noiso_branch;
	bool lep_pass_VVV_cutbased_fo_noiso_isLoaded;
	vector<bool> *lep_pass_VVV_cutbased_tight_noiso_;
	TBranch *lep_pass_VVV_cutbased_tight_noiso_branch;
	bool lep_pass_VVV_cutbased_tight_noiso_isLoaded;
	vector<bool> *lep_pass_VVV_cutbased_tight_;
	TBranch *lep_pass_VVV_cutbased_tight_branch;
	bool lep_pass_VVV_cutbased_tight_isLoaded;
	vector<bool> *lep_pass_VVV_MVAbased_tight_noiso_;
	TBranch *lep_pass_VVV_MVAbased_tight_noiso_branch;
	bool lep_pass_VVV_MVAbased_tight_noiso_isLoaded;
	vector<bool> *lep_pass_VVV_MVAbased_tight_;
	TBranch *lep_pass_VVV_MVAbased_tight_branch;
	bool lep_pass_VVV_MVAbased_tight_isLoaded;
	vector<bool> *lep_pass_VVV_baseline_;
	TBranch *lep_pass_VVV_baseline_branch;
	bool lep_pass_VVV_baseline_isLoaded;
	int	nlep_VVV_cutbased_veto_;
	TBranch *nlep_VVV_cutbased_veto_branch;
	bool nlep_VVV_cutbased_veto_isLoaded;
	int	nlep_VVV_cutbased_veto_noiso_;
	TBranch *nlep_VVV_cutbased_veto_noiso_branch;
	bool nlep_VVV_cutbased_veto_noiso_isLoaded;
	int	nlep_VVV_cutbased_veto_noiso_noip_;
	TBranch *nlep_VVV_cutbased_veto_noiso_noip_branch;
	bool nlep_VVV_cutbased_veto_noiso_noip_isLoaded;
	int	nlep_VVV_cutbased_fo_;
	TBranch *nlep_VVV_cutbased_fo_branch;
	bool nlep_VVV_cutbased_fo_isLoaded;
	int	nlep_VVV_cutbased_fo_noiso_;
	TBranch *nlep_VVV_cutbased_fo_noiso_branch;
	bool nlep_VVV_cutbased_fo_noiso_isLoaded;
	int	nlep_VVV_cutbased_tight_noiso_;
	TBranch *nlep_VVV_cutbased_tight_noiso_branch;
	bool nlep_VVV_cutbased_tight_noiso_isLoaded;
	int	nlep_VVV_cutbased_tight_;
	TBranch *nlep_VVV_cutbased_tight_branch;
	bool nlep_VVV_cutbased_tight_isLoaded;
	int	nlep_VVV_MVAbased_tight_noiso_;
	TBranch *nlep_VVV_MVAbased_tight_noiso_branch;
	bool nlep_VVV_MVAbased_tight_noiso_isLoaded;
	int	nlep_VVV_MVAbased_tight_;
	TBranch *nlep_VVV_MVAbased_tight_branch;
	bool nlep_VVV_MVAbased_tight_isLoaded;
	int	nlep_VVV_baseline_;
	TBranch *nlep_VVV_baseline_branch;
	bool nlep_VVV_baseline_isLoaded;
	vector<int> *lep_pdgId_;
	TBranch *lep_pdgId_branch;
	bool lep_pdgId_isLoaded;
	vector<int> *lep_mc_Id_;
	TBranch *lep_mc_Id_branch;
	bool lep_mc_Id_isLoaded;
	vector<float> *lep_dxy_;
	TBranch *lep_dxy_branch;
	bool lep_dxy_isLoaded;
	vector<float> *lep_ip3d_;
	TBranch *lep_ip3d_branch;
	bool lep_ip3d_isLoaded;
	vector<float> *lep_ip3derr_;
	TBranch *lep_ip3derr_branch;
	bool lep_ip3derr_isLoaded;
	vector<float> *lep_etaSC_;
	TBranch *lep_etaSC_branch;
	bool lep_etaSC_isLoaded;
	vector<float> *lep_dz_;
	TBranch *lep_dz_branch;
	bool lep_dz_isLoaded;
	vector<int> *lep_tightId_;
	TBranch *lep_tightId_branch;
	bool lep_tightId_isLoaded;
	vector<int> *lep_mcMatchId_;
	TBranch *lep_mcMatchId_branch;
	bool lep_mcMatchId_isLoaded;
	vector<int> *lep_lostHits_;
	TBranch *lep_lostHits_branch;
	bool lep_lostHits_isLoaded;
	vector<int> *lep_convVeto_;
	TBranch *lep_convVeto_branch;
	bool lep_convVeto_isLoaded;
	vector<int> *lep_tightCharge_;
	TBranch *lep_tightCharge_branch;
	bool lep_tightCharge_isLoaded;
	vector<float> *lep_MVA_;
	TBranch *lep_MVA_branch;
	bool lep_MVA_isLoaded;
	vector<float> *lep_validfraction_;
	TBranch *lep_validfraction_branch;
	bool lep_validfraction_isLoaded;
	vector<float> *lep_pterr_;
	TBranch *lep_pterr_branch;
	bool lep_pterr_isLoaded;
	vector<float> *lep_sta_pterrOpt_;
	TBranch *lep_sta_pterrOpt_branch;
	bool lep_sta_pterrOpt_isLoaded;
	vector<float> *lep_glb_pterrOpt_;
	TBranch *lep_glb_pterrOpt_branch;
	bool lep_glb_pterrOpt_isLoaded;
	vector<float> *lep_x2ondof_;
	TBranch *lep_x2ondof_branch;
	bool lep_x2ondof_isLoaded;
	vector<float> *lep_sta_x2ondof_;
	TBranch *lep_sta_x2ondof_branch;
	bool lep_sta_x2ondof_isLoaded;
	vector<float> *lep_glb_x2ondof_;
	TBranch *lep_glb_x2ondof_branch;
	bool lep_glb_x2ondof_isLoaded;
	int	nisoTrack_5gev_;
	TBranch *nisoTrack_5gev_branch;
	bool nisoTrack_5gev_isLoaded;
	int	nisoTrack_mt2_;
	TBranch *nisoTrack_mt2_branch;
	bool nisoTrack_mt2_isLoaded;
	int	nisoTrack_stop_;
	TBranch *nisoTrack_stop_branch;
	bool nisoTrack_stop_isLoaded;
	int	nisoTrack_PFLep5_woverlaps_;
	TBranch *nisoTrack_PFLep5_woverlaps_branch;
	bool nisoTrack_PFLep5_woverlaps_isLoaded;
	int	nisoTrack_PFHad10_woverlaps_;
	TBranch *nisoTrack_PFHad10_woverlaps_branch;
	bool nisoTrack_PFHad10_woverlaps_isLoaded;
	int	ngamma_;
	TBranch *ngamma_branch;
	bool ngamma_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *gamma_p4_;
	TBranch *gamma_p4_branch;
	bool gamma_p4_isLoaded;
	vector<float> *gamma_pt_;
	TBranch *gamma_pt_branch;
	bool gamma_pt_isLoaded;
	vector<float> *gamma_eta_;
	TBranch *gamma_eta_branch;
	bool gamma_eta_isLoaded;
	vector<float> *gamma_phi_;
	TBranch *gamma_phi_branch;
	bool gamma_phi_isLoaded;
	vector<float> *gamma_mass_;
	TBranch *gamma_mass_branch;
	bool gamma_mass_isLoaded;
	vector<int> *gamma_mcMatchId_;
	TBranch *gamma_mcMatchId_branch;
	bool gamma_mcMatchId_isLoaded;
	vector<float> *gamma_genPt_;
	TBranch *gamma_genPt_branch;
	bool gamma_genPt_isLoaded;
	vector<float> *gamma_genIso_;
	TBranch *gamma_genIso_branch;
	bool gamma_genIso_isLoaded;
	vector<float> *gamma_chHadIso_;
	TBranch *gamma_chHadIso_branch;
	bool gamma_chHadIso_isLoaded;
	vector<float> *gamma_neuHadIso_;
	TBranch *gamma_neuHadIso_branch;
	bool gamma_neuHadIso_isLoaded;
	vector<float> *gamma_phIso_;
	TBranch *gamma_phIso_branch;
	bool gamma_phIso_isLoaded;
	vector<float> *gamma_sigmaIetaIeta_;
	TBranch *gamma_sigmaIetaIeta_branch;
	bool gamma_sigmaIetaIeta_isLoaded;
	vector<float> *gamma_r9_;
	TBranch *gamma_r9_branch;
	bool gamma_r9_isLoaded;
	vector<float> *gamma_hOverE_;
	TBranch *gamma_hOverE_branch;
	bool gamma_hOverE_isLoaded;
	vector<float> *gamma_hOverE_online_;
	TBranch *gamma_hOverE_online_branch;
	bool gamma_hOverE_online_isLoaded;
	vector<int> *gamma_idCutBased_;
	TBranch *gamma_idCutBased_branch;
	bool gamma_idCutBased_isLoaded;
	vector<float> *gamma_ecpfclusiso_;
	TBranch *gamma_ecpfclusiso_branch;
	bool gamma_ecpfclusiso_isLoaded;
	vector<float> *gamma_hcpfclusiso_;
	TBranch *gamma_hcpfclusiso_branch;
	bool gamma_hcpfclusiso_isLoaded;
	vector<float> *gamma_hollowtkiso03_;
	TBranch *gamma_hollowtkiso03_branch;
	bool gamma_hollowtkiso03_isLoaded;
	vector<int> *gamma_genIsPromptFinalState_;
	TBranch *gamma_genIsPromptFinalState_branch;
	bool gamma_genIsPromptFinalState_isLoaded;
	vector<float> *gamma_drMinParton_;
	TBranch *gamma_drMinParton_branch;
	bool gamma_drMinParton_isLoaded;
	int	ngenPart_;
	TBranch *ngenPart_branch;
	bool ngenPart_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *genPart_p4_;
	TBranch *genPart_p4_branch;
	bool genPart_p4_isLoaded;
	vector<float> *genPart_pt_;
	TBranch *genPart_pt_branch;
	bool genPart_pt_isLoaded;
	vector<float> *genPart_eta_;
	TBranch *genPart_eta_branch;
	bool genPart_eta_isLoaded;
	vector<float> *genPart_phi_;
	TBranch *genPart_phi_branch;
	bool genPart_phi_isLoaded;
	vector<float> *genPart_mass_;
	TBranch *genPart_mass_branch;
	bool genPart_mass_isLoaded;
	vector<int> *genPart_pdgId_;
	TBranch *genPart_pdgId_branch;
	bool genPart_pdgId_isLoaded;
	vector<int> *genPart_status_;
	TBranch *genPart_status_branch;
	bool genPart_status_isLoaded;
	vector<float> *genPart_charge_;
	TBranch *genPart_charge_branch;
	bool genPart_charge_isLoaded;
	vector<int> *genPart_motherId_;
	TBranch *genPart_motherId_branch;
	bool genPart_motherId_isLoaded;
	vector<int> *genPart_grandmaId_;
	TBranch *genPart_grandmaId_branch;
	bool genPart_grandmaId_isLoaded;
	vector<bool> *genPart_isp6status3_;
	TBranch *genPart_isp6status3_branch;
	bool genPart_isp6status3_isLoaded;
	int	ngenLep_;
	TBranch *ngenLep_branch;
	bool ngenLep_isLoaded;
	vector<float> *genLep_pt_;
	TBranch *genLep_pt_branch;
	bool genLep_pt_isLoaded;
	vector<float> *genLep_eta_;
	TBranch *genLep_eta_branch;
	bool genLep_eta_isLoaded;
	vector<float> *genLep_phi_;
	TBranch *genLep_phi_branch;
	bool genLep_phi_isLoaded;
	vector<float> *genLep_mass_;
	TBranch *genLep_mass_branch;
	bool genLep_mass_isLoaded;
	vector<int> *genLep_pdgId_;
	TBranch *genLep_pdgId_branch;
	bool genLep_pdgId_isLoaded;
	vector<int> *genLep_status_;
	TBranch *genLep_status_branch;
	bool genLep_status_isLoaded;
	vector<float> *genLep_charge_;
	TBranch *genLep_charge_branch;
	bool genLep_charge_isLoaded;
	vector<int> *genLep_sourceId_;
	TBranch *genLep_sourceId_branch;
	bool genLep_sourceId_isLoaded;
	vector<bool> *genLep_isp6status3_;
	TBranch *genLep_isp6status3_branch;
	bool genLep_isp6status3_isLoaded;
	int	ngenTau_;
	TBranch *ngenTau_branch;
	bool ngenTau_isLoaded;
	vector<float> *genTau_pt_;
	TBranch *genTau_pt_branch;
	bool genTau_pt_isLoaded;
	vector<float> *genTau_eta_;
	TBranch *genTau_eta_branch;
	bool genTau_eta_isLoaded;
	vector<float> *genTau_phi_;
	TBranch *genTau_phi_branch;
	bool genTau_phi_isLoaded;
	vector<float> *genTau_mass_;
	TBranch *genTau_mass_branch;
	bool genTau_mass_isLoaded;
	vector<int> *genTau_pdgId_;
	TBranch *genTau_pdgId_branch;
	bool genTau_pdgId_isLoaded;
	vector<int> *genTau_status_;
	TBranch *genTau_status_branch;
	bool genTau_status_isLoaded;
	vector<float> *genTau_charge_;
	TBranch *genTau_charge_branch;
	bool genTau_charge_isLoaded;
	vector<int> *genTau_sourceId_;
	TBranch *genTau_sourceId_branch;
	bool genTau_sourceId_isLoaded;
	int	ngenLepFromTau_;
	TBranch *ngenLepFromTau_branch;
	bool ngenLepFromTau_isLoaded;
	vector<float> *genLepFromTau_pt_;
	TBranch *genLepFromTau_pt_branch;
	bool genLepFromTau_pt_isLoaded;
	vector<float> *genLepFromTau_eta_;
	TBranch *genLepFromTau_eta_branch;
	bool genLepFromTau_eta_isLoaded;
	vector<float> *genLepFromTau_phi_;
	TBranch *genLepFromTau_phi_branch;
	bool genLepFromTau_phi_isLoaded;
	vector<float> *genLepFromTau_mass_;
	TBranch *genLepFromTau_mass_branch;
	bool genLepFromTau_mass_isLoaded;
	vector<int> *genLepFromTau_pdgId_;
	TBranch *genLepFromTau_pdgId_branch;
	bool genLepFromTau_pdgId_isLoaded;
	vector<int> *genLepFromTau_status_;
	TBranch *genLepFromTau_status_branch;
	bool genLepFromTau_status_isLoaded;
	vector<float> *genLepFromTau_charge_;
	TBranch *genLepFromTau_charge_branch;
	bool genLepFromTau_charge_isLoaded;
	vector<int> *genLepFromTau_sourceId_;
	TBranch *genLepFromTau_sourceId_branch;
	bool genLepFromTau_sourceId_isLoaded;
	int	njets_;
	TBranch *njets_branch;
	bool njets_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *jets_p4_;
	TBranch *jets_p4_branch;
	bool jets_p4_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *removed_jets_p4_;
	TBranch *removed_jets_p4_branch;
	bool removed_jets_p4_isLoaded;
	vector<float> *removed_jets_csv_;
	TBranch *removed_jets_csv_branch;
	bool removed_jets_csv_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *jets_medb_p4_;
	TBranch *jets_medb_p4_branch;
	bool jets_medb_p4_isLoaded;
	int	njets_up_;
	TBranch *njets_up_branch;
	bool njets_up_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *jets_up_p4_;
	TBranch *jets_up_p4_branch;
	bool jets_up_p4_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *jets_medb_up_p4_;
	TBranch *jets_medb_up_p4_branch;
	bool jets_medb_up_p4_isLoaded;
	vector<float> *jets_csv_;
	TBranch *jets_csv_branch;
	bool jets_csv_isLoaded;
	vector<float> *jets_up_csv_;
	TBranch *jets_up_csv_branch;
	bool jets_up_csv_isLoaded;
	int	njets_dn_;
	TBranch *njets_dn_branch;
	bool njets_dn_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *jets_dn_p4_;
	TBranch *jets_dn_p4_branch;
	bool jets_dn_p4_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *jets_medb_dn_p4_;
	TBranch *jets_medb_dn_p4_branch;
	bool jets_medb_dn_p4_isLoaded;
	vector<float> *jets_dn_csv_;
	TBranch *jets_dn_csv_branch;
	bool jets_dn_csv_isLoaded;
	vector<float> *jets_muf_;
	TBranch *jets_muf_branch;
	bool jets_muf_isLoaded;
	vector<int> *jets_mcFlavour_;
	TBranch *jets_mcFlavour_branch;
	bool jets_mcFlavour_isLoaded;
	vector<int> *jets_mcHadronFlav_;
	TBranch *jets_mcHadronFlav_branch;
	bool jets_mcHadronFlav_isLoaded;
	int	nhighPtPFcands_;
	TBranch *nhighPtPFcands_branch;
	bool nhighPtPFcands_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *highPtPFcands_p4_;
	TBranch *highPtPFcands_p4_branch;
	bool highPtPFcands_p4_isLoaded;
	vector<float> *highPtPFcands_dz_;
	TBranch *highPtPFcands_dz_branch;
	bool highPtPFcands_dz_isLoaded;
	vector<int> *highPtPFcands_pdgId_;
	TBranch *highPtPFcands_pdgId_branch;
	bool highPtPFcands_pdgId_isLoaded;
	float	ht_;
	TBranch *ht_branch;
	bool ht_isLoaded;
	float	ht_up_;
	TBranch *ht_up_branch;
	bool ht_up_isLoaded;
	float	ht_dn_;
	TBranch *ht_dn_branch;
	bool ht_dn_isLoaded;
	float	metsig_unofficial_;
	TBranch *metsig_unofficial_branch;
	bool metsig_unofficial_isLoaded;
	float	metsig_unofficial_up_;
	TBranch *metsig_unofficial_up_branch;
	bool metsig_unofficial_up_isLoaded;
	float	metsig_unofficial_dn_;
	TBranch *metsig_unofficial_dn_branch;
	bool metsig_unofficial_dn_isLoaded;
	float	mt_lep1_;
	TBranch *mt_lep1_branch;
	bool mt_lep1_isLoaded;
	float	mt2_;
	TBranch *mt2_branch;
	bool mt2_isLoaded;
	float	mt2_up_;
	TBranch *mt2_up_branch;
	bool mt2_up_isLoaded;
	float	mt2_dn_;
	TBranch *mt2_dn_branch;
	bool mt2_dn_isLoaded;
	float	mt2j_;
	TBranch *mt2j_branch;
	bool mt2j_isLoaded;
	float	mt2b_;
	TBranch *mt2b_branch;
	bool mt2b_isLoaded;
	float	mt2b_up_;
	TBranch *mt2b_up_branch;
	bool mt2b_up_isLoaded;
	float	mt2b_dn_;
	TBranch *mt2b_dn_branch;
	bool mt2b_dn_isLoaded;
	float	mt2_genmet_;
	TBranch *mt2_genmet_branch;
	bool mt2_genmet_isLoaded;
	float	mt2b_genmet_;
	TBranch *mt2b_genmet_branch;
	bool mt2b_genmet_isLoaded;
	float	mjj_mindphi_;
	TBranch *mjj_mindphi_branch;
	bool mjj_mindphi_isLoaded;
	float	mjj_;
	TBranch *mjj_branch;
	bool mjj_isLoaded;
	float	mbb_csv_;
	TBranch *mbb_csv_branch;
	bool mbb_csv_isLoaded;
	float	mbb_bpt_;
	TBranch *mbb_bpt_branch;
	bool mbb_bpt_isLoaded;
	float	dphi_jj_;
	TBranch *dphi_jj_branch;
	bool dphi_jj_isLoaded;
	float	dphi_ll_;
	TBranch *dphi_ll_branch;
	bool dphi_ll_isLoaded;
	float	sum_mlb_;
	TBranch *sum_mlb_branch;
	bool sum_mlb_isLoaded;
	float	deta_jj_;
	TBranch *deta_jj_branch;
	bool deta_jj_isLoaded;
	float	dR_jj_;
	TBranch *dR_jj_branch;
	bool dR_jj_isLoaded;
	float	dphi_metj1_;
	TBranch *dphi_metj1_branch;
	bool dphi_metj1_isLoaded;
	float	dphi_metj2_;
	TBranch *dphi_metj2_branch;
	bool dphi_metj2_isLoaded;
	float	dphi_genmetj1_;
	TBranch *dphi_genmetj1_branch;
	bool dphi_genmetj1_isLoaded;
	float	dphi_genmetj2_;
	TBranch *dphi_genmetj2_branch;
	bool dphi_genmetj2_isLoaded;
	float	mjj_mindphi_up_;
	TBranch *mjj_mindphi_up_branch;
	bool mjj_mindphi_up_isLoaded;
	float	mjj_up_;
	TBranch *mjj_up_branch;
	bool mjj_up_isLoaded;
	float	mbb_csv_up_;
	TBranch *mbb_csv_up_branch;
	bool mbb_csv_up_isLoaded;
	float	mbb_bpt_up_;
	TBranch *mbb_bpt_up_branch;
	bool mbb_bpt_up_isLoaded;
	float	dphi_jj_up_;
	TBranch *dphi_jj_up_branch;
	bool dphi_jj_up_isLoaded;
	float	dphi_ll_up_;
	TBranch *dphi_ll_up_branch;
	bool dphi_ll_up_isLoaded;
	float	sum_mlb_up_;
	TBranch *sum_mlb_up_branch;
	bool sum_mlb_up_isLoaded;
	float	deta_jj_up_;
	TBranch *deta_jj_up_branch;
	bool deta_jj_up_isLoaded;
	float	dR_jj_up_;
	TBranch *dR_jj_up_branch;
	bool dR_jj_up_isLoaded;
	float	dphi_metj1_up_;
	TBranch *dphi_metj1_up_branch;
	bool dphi_metj1_up_isLoaded;
	float	dphi_metj2_up_;
	TBranch *dphi_metj2_up_branch;
	bool dphi_metj2_up_isLoaded;
	float	mjj_mindphi_dn_;
	TBranch *mjj_mindphi_dn_branch;
	bool mjj_mindphi_dn_isLoaded;
	float	mjj_dn_;
	TBranch *mjj_dn_branch;
	bool mjj_dn_isLoaded;
	float	mbb_csv_dn_;
	TBranch *mbb_csv_dn_branch;
	bool mbb_csv_dn_isLoaded;
	float	mbb_bpt_dn_;
	TBranch *mbb_bpt_dn_branch;
	bool mbb_bpt_dn_isLoaded;
	float	dphi_jj_dn_;
	TBranch *dphi_jj_dn_branch;
	bool dphi_jj_dn_isLoaded;
	float	dphi_ll_dn_;
	TBranch *dphi_ll_dn_branch;
	bool dphi_ll_dn_isLoaded;
	float	sum_mlb_dn_;
	TBranch *sum_mlb_dn_branch;
	bool sum_mlb_dn_isLoaded;
	float	deta_jj_dn_;
	TBranch *deta_jj_dn_branch;
	bool deta_jj_dn_isLoaded;
	float	dR_jj_dn_;
	TBranch *dR_jj_dn_branch;
	bool dR_jj_dn_isLoaded;
	float	dphi_metj1_dn_;
	TBranch *dphi_metj1_dn_branch;
	bool dphi_metj1_dn_isLoaded;
	float	dphi_metj2_dn_;
	TBranch *dphi_metj2_dn_branch;
	bool dphi_metj2_dn_isLoaded;
	float	weight_btagsf_;
	TBranch *weight_btagsf_branch;
	bool weight_btagsf_isLoaded;
	float	weight_btagsf_heavy_UP_;
	TBranch *weight_btagsf_heavy_UP_branch;
	bool weight_btagsf_heavy_UP_isLoaded;
	float	weight_btagsf_light_UP_;
	TBranch *weight_btagsf_light_UP_branch;
	bool weight_btagsf_light_UP_isLoaded;
	float	weight_btagsf_heavy_DN_;
	TBranch *weight_btagsf_heavy_DN_branch;
	bool weight_btagsf_heavy_DN_isLoaded;
	float	weight_btagsf_light_DN_;
	TBranch *weight_btagsf_light_DN_branch;
	bool weight_btagsf_light_DN_isLoaded;
	float	chpfcands_0013_pt_;
	TBranch *chpfcands_0013_pt_branch;
	bool chpfcands_0013_pt_isLoaded;
	float	chpfcands_1316_pt_;
	TBranch *chpfcands_1316_pt_branch;
	bool chpfcands_1316_pt_isLoaded;
	float	chpfcands_1624_pt_;
	TBranch *chpfcands_1624_pt_branch;
	bool chpfcands_1624_pt_isLoaded;
	float	chpfcands_2430_pt_;
	TBranch *chpfcands_2430_pt_branch;
	bool chpfcands_2430_pt_isLoaded;
	float	chpfcands_30in_pt_;
	TBranch *chpfcands_30in_pt_branch;
	bool chpfcands_30in_pt_isLoaded;
	float	phpfcands_0013_pt_;
	TBranch *phpfcands_0013_pt_branch;
	bool phpfcands_0013_pt_isLoaded;
	float	phpfcands_1316_pt_;
	TBranch *phpfcands_1316_pt_branch;
	bool phpfcands_1316_pt_isLoaded;
	float	phpfcands_1624_pt_;
	TBranch *phpfcands_1624_pt_branch;
	bool phpfcands_1624_pt_isLoaded;
	float	phpfcands_2430_pt_;
	TBranch *phpfcands_2430_pt_branch;
	bool phpfcands_2430_pt_isLoaded;
	float	phpfcands_30in_pt_;
	TBranch *phpfcands_30in_pt_branch;
	bool phpfcands_30in_pt_isLoaded;
	float	nupfcands_0013_pt_;
	TBranch *nupfcands_0013_pt_branch;
	bool nupfcands_0013_pt_isLoaded;
	float	nupfcands_1316_pt_;
	TBranch *nupfcands_1316_pt_branch;
	bool nupfcands_1316_pt_isLoaded;
	float	nupfcands_1624_pt_;
	TBranch *nupfcands_1624_pt_branch;
	bool nupfcands_1624_pt_isLoaded;
	float	nupfcands_2430_pt_;
	TBranch *nupfcands_2430_pt_branch;
	bool nupfcands_2430_pt_isLoaded;
	float	nupfcands_30in_pt_;
	TBranch *nupfcands_30in_pt_branch;
	bool nupfcands_30in_pt_isLoaded;
	float	chpfcands_0013_sumet_;
	TBranch *chpfcands_0013_sumet_branch;
	bool chpfcands_0013_sumet_isLoaded;
	float	chpfcands_1316_sumet_;
	TBranch *chpfcands_1316_sumet_branch;
	bool chpfcands_1316_sumet_isLoaded;
	float	chpfcands_1624_sumet_;
	TBranch *chpfcands_1624_sumet_branch;
	bool chpfcands_1624_sumet_isLoaded;
	float	chpfcands_2430_sumet_;
	TBranch *chpfcands_2430_sumet_branch;
	bool chpfcands_2430_sumet_isLoaded;
	float	chpfcands_30in_sumet_;
	TBranch *chpfcands_30in_sumet_branch;
	bool chpfcands_30in_sumet_isLoaded;
	float	phpfcands_0013_sumet_;
	TBranch *phpfcands_0013_sumet_branch;
	bool phpfcands_0013_sumet_isLoaded;
	float	phpfcands_1316_sumet_;
	TBranch *phpfcands_1316_sumet_branch;
	bool phpfcands_1316_sumet_isLoaded;
	float	phpfcands_1624_sumet_;
	TBranch *phpfcands_1624_sumet_branch;
	bool phpfcands_1624_sumet_isLoaded;
	float	phpfcands_2430_sumet_;
	TBranch *phpfcands_2430_sumet_branch;
	bool phpfcands_2430_sumet_isLoaded;
	float	phpfcands_30in_sumet_;
	TBranch *phpfcands_30in_sumet_branch;
	bool phpfcands_30in_sumet_isLoaded;
	float	nupfcands_0013_sumet_;
	TBranch *nupfcands_0013_sumet_branch;
	bool nupfcands_0013_sumet_isLoaded;
	float	nupfcands_1316_sumet_;
	TBranch *nupfcands_1316_sumet_branch;
	bool nupfcands_1316_sumet_isLoaded;
	float	nupfcands_1624_sumet_;
	TBranch *nupfcands_1624_sumet_branch;
	bool nupfcands_1624_sumet_isLoaded;
	float	nupfcands_2430_sumet_;
	TBranch *nupfcands_2430_sumet_branch;
	bool nupfcands_2430_sumet_isLoaded;
	float	nupfcands_30in_sumet_;
	TBranch *nupfcands_30in_sumet_branch;
	bool nupfcands_30in_sumet_isLoaded;
	float	chpfcands_0013_phi_;
	TBranch *chpfcands_0013_phi_branch;
	bool chpfcands_0013_phi_isLoaded;
	float	chpfcands_1316_phi_;
	TBranch *chpfcands_1316_phi_branch;
	bool chpfcands_1316_phi_isLoaded;
	float	chpfcands_1624_phi_;
	TBranch *chpfcands_1624_phi_branch;
	bool chpfcands_1624_phi_isLoaded;
	float	chpfcands_2430_phi_;
	TBranch *chpfcands_2430_phi_branch;
	bool chpfcands_2430_phi_isLoaded;
	float	chpfcands_30in_phi_;
	TBranch *chpfcands_30in_phi_branch;
	bool chpfcands_30in_phi_isLoaded;
	float	phpfcands_0013_phi_;
	TBranch *phpfcands_0013_phi_branch;
	bool phpfcands_0013_phi_isLoaded;
	float	phpfcands_1316_phi_;
	TBranch *phpfcands_1316_phi_branch;
	bool phpfcands_1316_phi_isLoaded;
	float	phpfcands_1624_phi_;
	TBranch *phpfcands_1624_phi_branch;
	bool phpfcands_1624_phi_isLoaded;
	float	phpfcands_2430_phi_;
	TBranch *phpfcands_2430_phi_branch;
	bool phpfcands_2430_phi_isLoaded;
	float	phpfcands_30in_phi_;
	TBranch *phpfcands_30in_phi_branch;
	bool phpfcands_30in_phi_isLoaded;
	float	nupfcands_0013_phi_;
	TBranch *nupfcands_0013_phi_branch;
	bool nupfcands_0013_phi_isLoaded;
	float	nupfcands_1316_phi_;
	TBranch *nupfcands_1316_phi_branch;
	bool nupfcands_1316_phi_isLoaded;
	float	nupfcands_1624_phi_;
	TBranch *nupfcands_1624_phi_branch;
	bool nupfcands_1624_phi_isLoaded;
	float	nupfcands_2430_phi_;
	TBranch *nupfcands_2430_phi_branch;
	bool nupfcands_2430_phi_isLoaded;
	float	nupfcands_30in_phi_;
	TBranch *nupfcands_30in_phi_branch;
	bool nupfcands_30in_phi_isLoaded;
	float	met_T1CHS_pt_;
	TBranch *met_T1CHS_pt_branch;
	bool met_T1CHS_pt_isLoaded;
	float	met_T1CHS_phi_;
	TBranch *met_T1CHS_phi_branch;
	bool met_T1CHS_phi_isLoaded;
	float	met_T1CHS_fromCORE_pt_;
	TBranch *met_T1CHS_fromCORE_pt_branch;
	bool met_T1CHS_fromCORE_pt_isLoaded;
	float	met_T1CHS_fromCORE_phi_;
	TBranch *met_T1CHS_fromCORE_phi_branch;
	bool met_T1CHS_fromCORE_phi_isLoaded;
	float	met_T1CHS_miniAOD_CORE_pt_;
	TBranch *met_T1CHS_miniAOD_CORE_pt_branch;
	bool met_T1CHS_miniAOD_CORE_pt_isLoaded;
	float	met_T1CHS_miniAOD_CORE_phi_;
	TBranch *met_T1CHS_miniAOD_CORE_phi_branch;
	bool met_T1CHS_miniAOD_CORE_phi_isLoaded;
	float	met_T1CHS_miniAOD_CORE_up_pt_;
	TBranch *met_T1CHS_miniAOD_CORE_up_pt_branch;
	bool met_T1CHS_miniAOD_CORE_up_pt_isLoaded;
	float	met_T1CHS_miniAOD_CORE_up_phi_;
	TBranch *met_T1CHS_miniAOD_CORE_up_phi_branch;
	bool met_T1CHS_miniAOD_CORE_up_phi_isLoaded;
	float	met_T1CHS_miniAOD_CORE_dn_pt_;
	TBranch *met_T1CHS_miniAOD_CORE_dn_pt_branch;
	bool met_T1CHS_miniAOD_CORE_dn_pt_isLoaded;
	float	met_T1CHS_miniAOD_CORE_dn_phi_;
	TBranch *met_T1CHS_miniAOD_CORE_dn_phi_branch;
	bool met_T1CHS_miniAOD_CORE_dn_phi_isLoaded;
	ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *decayedphoton_lep1_p4_;
	TBranch *decayedphoton_lep1_p4_branch;
	bool decayedphoton_lep1_p4_isLoaded;
	ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *decayedphoton_lep2_p4_;
	TBranch *decayedphoton_lep2_p4_branch;
	bool decayedphoton_lep2_p4_isLoaded;
	ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *decayedphoton_bosn_p4_;
	TBranch *decayedphoton_bosn_p4_branch;
	bool decayedphoton_bosn_p4_isLoaded;
	float	decayedphoton_mt2_;
	TBranch *decayedphoton_mt2_branch;
	bool decayedphoton_mt2_isLoaded;
	int	hyp_type_;
	TBranch *hyp_type_branch;
	bool hyp_type_isLoaded;
	int	evt_type_;
	TBranch *evt_type_branch;
	bool evt_type_isLoaded;
	int	mass_gluino_;
	TBranch *mass_gluino_branch;
	bool mass_gluino_isLoaded;
	int	mass_LSP_;
	TBranch *mass_LSP_branch;
	bool mass_LSP_isLoaded;
	int	mass_chi_;
	TBranch *mass_chi_branch;
	bool mass_chi_isLoaded;
	float	isrboost_;
	TBranch *isrboost_branch;
	bool isrboost_isLoaded;
	int	isr_njets_;
	TBranch *isr_njets_branch;
	bool isr_njets_isLoaded;
	float	isr_weight_;
	TBranch *isr_weight_branch;
	bool isr_weight_isLoaded;
	float	isr_unc_;
	TBranch *isr_unc_branch;
	bool isr_unc_isLoaded;
	vector<float> *weightsf_lepid_;
	TBranch *weightsf_lepid_branch;
	bool weightsf_lepid_isLoaded;
	vector<float> *weightsf_lepiso_;
	TBranch *weightsf_lepiso_branch;
	bool weightsf_lepiso_isLoaded;
	vector<float> *weightsf_lepip_;
	TBranch *weightsf_lepip_branch;
	bool weightsf_lepip_isLoaded;
	vector<float> *weightsf_lepreco_;
	TBranch *weightsf_lepreco_branch;
	bool weightsf_lepreco_isLoaded;
	vector<float> *weightsf_lepconv_;
	TBranch *weightsf_lepconv_branch;
	bool weightsf_lepconv_isLoaded;
	vector<float> *weightsf_lepid_FS_;
	TBranch *weightsf_lepid_FS_branch;
	bool weightsf_lepid_FS_isLoaded;
	vector<float> *weightsf_lepiso_FS_;
	TBranch *weightsf_lepiso_FS_branch;
	bool weightsf_lepiso_FS_isLoaded;
	vector<float> *weightsf_lepip_FS_;
	TBranch *weightsf_lepip_FS_branch;
	bool weightsf_lepip_FS_isLoaded;
public: 
void Init(TTree *tree);
void GetEntry(unsigned int idx); 
void LoadAllBranches(); 
	const int &run();
	const int &lumi();
	const unsigned long long &evt();
	const int &isData();
	const bool &	evt_passgoodrunlist();
	const float &evt_scale1fb();
	const float &evt_xsec();
	const float &evt_kfactor();
	const float &evt_filter();
	const int &evt_nEvts();
	const vector<TString> &evt_dataset();
	const float &puWeight();
	const int &nVert();
	const int &nTrueInt();
	const float &rho();
	const float &rho25();
	const float &gen_ht();
	const int &nBJetTight();
	const int &nBJetMedium();
	const int &nBJetLoose();
	const int &nBJetTight_up();
	const int &nBJetMedium_up();
	const int &nBJetLoose_up();
	const int &nBJetTight_dn();
	const int &nBJetMedium_dn();
	const int &nBJetLoose_dn();
	const int &nJet200MuFrac50DphiMet();
	const int &nMuons10();
	const int &nBadMuons20();
	const int &nElectrons10();
	const int &nGammas20();
	const int &nTaus20();
	const float &met_pt();
	const float &met_phi();
	const float &met_calo_pt();
	const float &met_calo_phi();
	const float &met_miniaod_pt();
	const float &met_miniaod_phi();
	const float &met_muegclean_pt();
	const float &met_muegclean_phi();
	const float &met_rawPt();
	const float &met_rawPhi();
	const float &met_genPt();
	const float &met_genPhi();
	const float &sumet_raw();
	const int &Flag_ecalLaserCorrFilter();
	const int &Flag_hcalLaserEventFilter();
	const int &Flag_trackingFailureFilter();
	const int &Flag_CSCTightHaloFilter();
	const int &Flag_HBHENoiseFilter();
	const int &Flag_HBHEIsoNoiseFilter();
	const int &Flag_CSCTightHalo2015Filter();
	const int &Flag_EcalDeadCellTriggerPrimitiveFilter();
	const int &Flag_goodVertices();
	const int &Flag_eeBadScFilter();
	const int &Flag_globalTightHalo2016();
	const int &Flag_badMuonFilter();
	const int &Flag_badChargedCandidateFilter();
	const int &Flag_badMuonFilterv2();
	const int &Flag_badChargedCandidateFilterv2();
	const int &Flag_badMuons();
	const int &Flag_duplicateMuons();
	const int &Flag_noBadMuons();
	const int &HLT_singleEl();
	const int &HLT_singleMu();
	const int &HLT_singleMu_noiso();
	const int &HLT_DoubleEl_noiso();
	const int &HLT_DoubleEl();
	const int &HLT_DoubleEl_DZ();
	const int &HLT_DoubleEl_DZ_2();
	const int &HLT_MuEG();
	const int &HLT_MuEG_2();
	const int &HLT_MuEG_noiso();
	const int &HLT_MuEG_noiso_2();
	const int &HLT_Mu8_EG17();
	const int &HLT_Mu8_EG23();
	const int &HLT_Mu8_EG23_DZ();
	const int &HLT_Mu12_EG23_DZ();
	const int &HLT_Mu17_EG12();
	const int &HLT_Mu23_EG8();
	const int &HLT_Mu23_EG8_DZ();
	const int &HLT_Mu23_EG12();
	const int &HLT_Mu23_EG12_DZ();
	const int &HLT_DoubleMu_noiso();
	const int &HLT_DoubleMu_noiso_27_8();
	const int &HLT_DoubleMu_noiso_30_11();
	const int &HLT_DoubleMu_noiso_40_11();
	const int &HLT_DoubleMu();
	const int &HLT_DoubleMu_tk();
	const int &HLT_DoubleMu_dbltk();
	const int &HLT_DoubleMu_nonDZ();
	const int &HLT_DoubleMu_tk_nonDZ();
	const int &HLT_Photon22_R9Id90_HE10_IsoM();
	const int &HLT_Photon30_R9Id90_HE10_IsoM();
	const int &HLT_Photon36_R9Id90_HE10_IsoM();
	const int &HLT_Photon50_R9Id90_HE10_IsoM();
	const int &HLT_Photon75_R9Id90_HE10_IsoM();
	const int &HLT_Photon90_R9Id90_HE10_IsoM();
	const int &HLT_Photon120_R9Id90_HE10_IsoM();
	const int &HLT_Photon165_R9Id90_HE10_IsoM();
	const int &HLT_Photon165_HE10();
	const int &HLT_CaloJet500_NoJetID();
	const int &HLT_ECALHT800_NoJetID();
	const bool &	HLT_Photon22_R9Id90_HE10_IsoM_matchedtophoton();
	const bool &	HLT_Photon30_R9Id90_HE10_IsoM_matchedtophoton();
	const bool &	HLT_Photon36_R9Id90_HE10_IsoM_matchedtophoton();
	const bool &	HLT_Photon50_R9Id90_HE10_IsoM_matchedtophoton();
	const bool &	HLT_Photon75_R9Id90_HE10_IsoM_matchedtophoton();
	const bool &	HLT_Photon90_R9Id90_HE10_IsoM_matchedtophoton();
	const bool &	HLT_Photon120_R9Id90_HE10_IsoM_matchedtophoton();
	const bool &	HLT_Photon165_R9Id90_HE10_IsoM_matchedtophoton();
	const bool &	HLT_Photon165_HE10_matchedtophoton();
	const float &dilmass();
	const float &dilpt();
	const float &dRll();
	const float &matched_neutralemf();
	const float &matched_emf();
	const bool &	elveto();
	const int &nlep();
	const int &nveto_leptons();
	const int &nVetoEl_relIso03EAless01();
	const int &nVetoEl_relIso03EAless02();
	const int &nVetoEl_relIso03EAless03();
	const int &nVetoEl_relIso03EAless04();
	const int &nVetoMu_relIso03EAless01();
	const int &nVetoMu_relIso03EAless02();
	const int &nVetoMu_relIso03EAless03();
	const int &nVetoMu_relIso03EAless04();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &lep_p4();
	const vector<float> &lep_pt();
	const vector<float> &lep_eta();
	const vector<float> &lep_phi();
	const vector<float> &lep_mass();
	const vector<int> &lep_charge();
	const vector<bool> &lep_3ch_agree();
	const vector<bool> &lep_isFromW();
	const vector<bool> &lep_isFromZ();
	const vector<bool> &lep_isFromB();
	const vector<bool> &lep_isFromC();
	const vector<bool> &lep_isFromL();
	const vector<bool> &lep_isFromLF();
	const vector<double> &lep_ptRatio();
	const vector<double> &lep_ptRel();
	const vector<double> &lep_relIso03();
	const vector<double> &lep_relIso03DB();
	const vector<double> &lep_relIso03EA();
	const vector<double> &lep_relIso03EAv2();
	const vector<double> &lep_relIso04DB();
	const vector<double> &lep_relIso04EA();
	const vector<double> &lep_relIso04EAv2();
	const vector<double> &lep_miniRelIsoCMS3_EA();
	const vector<double> &lep_miniRelIsoCMS3_EAv2();
	const vector<double> &lep_miniRelIsoCMS3_DB();
	const vector<bool> &lep_pass_VVV_cutbased_veto();
	const vector<bool> &lep_pass_VVV_cutbased_veto_noiso();
	const vector<bool> &lep_pass_VVV_cutbased_veto_noiso_noip();
	const vector<bool> &lep_pass_VVV_cutbased_fo();
	const vector<bool> &lep_pass_VVV_cutbased_fo_noiso();
	const vector<bool> &lep_pass_VVV_cutbased_tight_noiso();
	const vector<bool> &lep_pass_VVV_cutbased_tight();
	const vector<bool> &lep_pass_VVV_MVAbased_tight_noiso();
	const vector<bool> &lep_pass_VVV_MVAbased_tight();
	const vector<bool> &lep_pass_VVV_baseline();
	const int &nlep_VVV_cutbased_veto();
	const int &nlep_VVV_cutbased_veto_noiso();
	const int &nlep_VVV_cutbased_veto_noiso_noip();
	const int &nlep_VVV_cutbased_fo();
	const int &nlep_VVV_cutbased_fo_noiso();
	const int &nlep_VVV_cutbased_tight_noiso();
	const int &nlep_VVV_cutbased_tight();
	const int &nlep_VVV_MVAbased_tight_noiso();
	const int &nlep_VVV_MVAbased_tight();
	const int &nlep_VVV_baseline();
	const vector<int> &lep_pdgId();
	const vector<int> &lep_mc_Id();
	const vector<float> &lep_dxy();
	const vector<float> &lep_ip3d();
	const vector<float> &lep_ip3derr();
	const vector<float> &lep_etaSC();
	const vector<float> &lep_dz();
	const vector<int> &lep_tightId();
	const vector<int> &lep_mcMatchId();
	const vector<int> &lep_lostHits();
	const vector<int> &lep_convVeto();
	const vector<int> &lep_tightCharge();
	const vector<float> &lep_MVA();
	const vector<float> &lep_validfraction();
	const vector<float> &lep_pterr();
	const vector<float> &lep_sta_pterrOpt();
	const vector<float> &lep_glb_pterrOpt();
	const vector<float> &lep_x2ondof();
	const vector<float> &lep_sta_x2ondof();
	const vector<float> &lep_glb_x2ondof();
	const int &nisoTrack_5gev();
	const int &nisoTrack_mt2();
	const int &nisoTrack_stop();
	const int &nisoTrack_PFLep5_woverlaps();
	const int &nisoTrack_PFHad10_woverlaps();
	const int &ngamma();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &gamma_p4();
	const vector<float> &gamma_pt();
	const vector<float> &gamma_eta();
	const vector<float> &gamma_phi();
	const vector<float> &gamma_mass();
	const vector<int> &gamma_mcMatchId();
	const vector<float> &gamma_genPt();
	const vector<float> &gamma_genIso();
	const vector<float> &gamma_chHadIso();
	const vector<float> &gamma_neuHadIso();
	const vector<float> &gamma_phIso();
	const vector<float> &gamma_sigmaIetaIeta();
	const vector<float> &gamma_r9();
	const vector<float> &gamma_hOverE();
	const vector<float> &gamma_hOverE_online();
	const vector<int> &gamma_idCutBased();
	const vector<float> &gamma_ecpfclusiso();
	const vector<float> &gamma_hcpfclusiso();
	const vector<float> &gamma_hollowtkiso03();
	const vector<int> &gamma_genIsPromptFinalState();
	const vector<float> &gamma_drMinParton();
	const int &ngenPart();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genPart_p4();
	const vector<float> &genPart_pt();
	const vector<float> &genPart_eta();
	const vector<float> &genPart_phi();
	const vector<float> &genPart_mass();
	const vector<int> &genPart_pdgId();
	const vector<int> &genPart_status();
	const vector<float> &genPart_charge();
	const vector<int> &genPart_motherId();
	const vector<int> &genPart_grandmaId();
	const vector<bool> &genPart_isp6status3();
	const int &ngenLep();
	const vector<float> &genLep_pt();
	const vector<float> &genLep_eta();
	const vector<float> &genLep_phi();
	const vector<float> &genLep_mass();
	const vector<int> &genLep_pdgId();
	const vector<int> &genLep_status();
	const vector<float> &genLep_charge();
	const vector<int> &genLep_sourceId();
	const vector<bool> &genLep_isp6status3();
	const int &ngenTau();
	const vector<float> &genTau_pt();
	const vector<float> &genTau_eta();
	const vector<float> &genTau_phi();
	const vector<float> &genTau_mass();
	const vector<int> &genTau_pdgId();
	const vector<int> &genTau_status();
	const vector<float> &genTau_charge();
	const vector<int> &genTau_sourceId();
	const int &ngenLepFromTau();
	const vector<float> &genLepFromTau_pt();
	const vector<float> &genLepFromTau_eta();
	const vector<float> &genLepFromTau_phi();
	const vector<float> &genLepFromTau_mass();
	const vector<int> &genLepFromTau_pdgId();
	const vector<int> &genLepFromTau_status();
	const vector<float> &genLepFromTau_charge();
	const vector<int> &genLepFromTau_sourceId();
	const int &njets();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &jets_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &removed_jets_p4();
	const vector<float> &removed_jets_csv();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &jets_medb_p4();
	const int &njets_up();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &jets_up_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &jets_medb_up_p4();
	const vector<float> &jets_csv();
	const vector<float> &jets_up_csv();
	const int &njets_dn();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &jets_dn_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &jets_medb_dn_p4();
	const vector<float> &jets_dn_csv();
	const vector<float> &jets_muf();
	const vector<int> &jets_mcFlavour();
	const vector<int> &jets_mcHadronFlav();
	const int &nhighPtPFcands();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &highPtPFcands_p4();
	const vector<float> &highPtPFcands_dz();
	const vector<int> &highPtPFcands_pdgId();
	const float &ht();
	const float &ht_up();
	const float &ht_dn();
	const float &metsig_unofficial();
	const float &metsig_unofficial_up();
	const float &metsig_unofficial_dn();
	const float &mt_lep1();
	const float &mt2();
	const float &mt2_up();
	const float &mt2_dn();
	const float &mt2j();
	const float &mt2b();
	const float &mt2b_up();
	const float &mt2b_dn();
	const float &mt2_genmet();
	const float &mt2b_genmet();
	const float &mjj_mindphi();
	const float &mjj();
	const float &mbb_csv();
	const float &mbb_bpt();
	const float &dphi_jj();
	const float &dphi_ll();
	const float &sum_mlb();
	const float &deta_jj();
	const float &dR_jj();
	const float &dphi_metj1();
	const float &dphi_metj2();
	const float &dphi_genmetj1();
	const float &dphi_genmetj2();
	const float &mjj_mindphi_up();
	const float &mjj_up();
	const float &mbb_csv_up();
	const float &mbb_bpt_up();
	const float &dphi_jj_up();
	const float &dphi_ll_up();
	const float &sum_mlb_up();
	const float &deta_jj_up();
	const float &dR_jj_up();
	const float &dphi_metj1_up();
	const float &dphi_metj2_up();
	const float &mjj_mindphi_dn();
	const float &mjj_dn();
	const float &mbb_csv_dn();
	const float &mbb_bpt_dn();
	const float &dphi_jj_dn();
	const float &dphi_ll_dn();
	const float &sum_mlb_dn();
	const float &deta_jj_dn();
	const float &dR_jj_dn();
	const float &dphi_metj1_dn();
	const float &dphi_metj2_dn();
	const float &weight_btagsf();
	const float &weight_btagsf_heavy_UP();
	const float &weight_btagsf_light_UP();
	const float &weight_btagsf_heavy_DN();
	const float &weight_btagsf_light_DN();
	const float &chpfcands_0013_pt();
	const float &chpfcands_1316_pt();
	const float &chpfcands_1624_pt();
	const float &chpfcands_2430_pt();
	const float &chpfcands_30in_pt();
	const float &phpfcands_0013_pt();
	const float &phpfcands_1316_pt();
	const float &phpfcands_1624_pt();
	const float &phpfcands_2430_pt();
	const float &phpfcands_30in_pt();
	const float &nupfcands_0013_pt();
	const float &nupfcands_1316_pt();
	const float &nupfcands_1624_pt();
	const float &nupfcands_2430_pt();
	const float &nupfcands_30in_pt();
	const float &chpfcands_0013_sumet();
	const float &chpfcands_1316_sumet();
	const float &chpfcands_1624_sumet();
	const float &chpfcands_2430_sumet();
	const float &chpfcands_30in_sumet();
	const float &phpfcands_0013_sumet();
	const float &phpfcands_1316_sumet();
	const float &phpfcands_1624_sumet();
	const float &phpfcands_2430_sumet();
	const float &phpfcands_30in_sumet();
	const float &nupfcands_0013_sumet();
	const float &nupfcands_1316_sumet();
	const float &nupfcands_1624_sumet();
	const float &nupfcands_2430_sumet();
	const float &nupfcands_30in_sumet();
	const float &chpfcands_0013_phi();
	const float &chpfcands_1316_phi();
	const float &chpfcands_1624_phi();
	const float &chpfcands_2430_phi();
	const float &chpfcands_30in_phi();
	const float &phpfcands_0013_phi();
	const float &phpfcands_1316_phi();
	const float &phpfcands_1624_phi();
	const float &phpfcands_2430_phi();
	const float &phpfcands_30in_phi();
	const float &nupfcands_0013_phi();
	const float &nupfcands_1316_phi();
	const float &nupfcands_1624_phi();
	const float &nupfcands_2430_phi();
	const float &nupfcands_30in_phi();
	const float &met_T1CHS_pt();
	const float &met_T1CHS_phi();
	const float &met_T1CHS_fromCORE_pt();
	const float &met_T1CHS_fromCORE_phi();
	const float &met_T1CHS_miniAOD_CORE_pt();
	const float &met_T1CHS_miniAOD_CORE_phi();
	const float &met_T1CHS_miniAOD_CORE_up_pt();
	const float &met_T1CHS_miniAOD_CORE_up_phi();
	const float &met_T1CHS_miniAOD_CORE_dn_pt();
	const float &met_T1CHS_miniAOD_CORE_dn_phi();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &decayedphoton_lep1_p4();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &decayedphoton_lep2_p4();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &decayedphoton_bosn_p4();
	const float &decayedphoton_mt2();
	const int &hyp_type();
	const int &evt_type();
	const int &mass_gluino();
	const int &mass_LSP();
	const int &mass_chi();
	const float &isrboost();
	const int &isr_njets();
	const float &isr_weight();
	const float &isr_unc();
	const vector<float> &weightsf_lepid();
	const vector<float> &weightsf_lepiso();
	const vector<float> &weightsf_lepip();
	const vector<float> &weightsf_lepreco();
	const vector<float> &weightsf_lepconv();
	const vector<float> &weightsf_lepid_FS();
	const vector<float> &weightsf_lepiso_FS();
	const vector<float> &weightsf_lepip_FS();

  static void progress( int nEventsTotal, int nEventsChain );
};

#ifndef __CINT__
extern triboson cms3_triboson;
#endif

namespace triboson_np {
	const int &run();
	const int &lumi();
	const unsigned long long &evt();
	const int &isData();
	const bool &evt_passgoodrunlist();
	const float &evt_scale1fb();
	const float &evt_xsec();
	const float &evt_kfactor();
	const float &evt_filter();
	const int &evt_nEvts();
	const vector<TString> &evt_dataset();
	const float &puWeight();
	const int &nVert();
	const int &nTrueInt();
	const float &rho();
	const float &rho25();
	const float &gen_ht();
	const int &nBJetTight();
	const int &nBJetMedium();
	const int &nBJetLoose();
	const int &nBJetTight_up();
	const int &nBJetMedium_up();
	const int &nBJetLoose_up();
	const int &nBJetTight_dn();
	const int &nBJetMedium_dn();
	const int &nBJetLoose_dn();
	const int &nJet200MuFrac50DphiMet();
	const int &nMuons10();
	const int &nBadMuons20();
	const int &nElectrons10();
	const int &nGammas20();
	const int &nTaus20();
	const float &met_pt();
	const float &met_phi();
	const float &met_calo_pt();
	const float &met_calo_phi();
	const float &met_miniaod_pt();
	const float &met_miniaod_phi();
	const float &met_muegclean_pt();
	const float &met_muegclean_phi();
	const float &met_rawPt();
	const float &met_rawPhi();
	const float &met_genPt();
	const float &met_genPhi();
	const float &sumet_raw();
	const int &Flag_ecalLaserCorrFilter();
	const int &Flag_hcalLaserEventFilter();
	const int &Flag_trackingFailureFilter();
	const int &Flag_CSCTightHaloFilter();
	const int &Flag_HBHENoiseFilter();
	const int &Flag_HBHEIsoNoiseFilter();
	const int &Flag_CSCTightHalo2015Filter();
	const int &Flag_EcalDeadCellTriggerPrimitiveFilter();
	const int &Flag_goodVertices();
	const int &Flag_eeBadScFilter();
	const int &Flag_globalTightHalo2016();
	const int &Flag_badMuonFilter();
	const int &Flag_badChargedCandidateFilter();
	const int &Flag_badMuonFilterv2();
	const int &Flag_badChargedCandidateFilterv2();
	const int &Flag_badMuons();
	const int &Flag_duplicateMuons();
	const int &Flag_noBadMuons();
	const int &HLT_singleEl();
	const int &HLT_singleMu();
	const int &HLT_singleMu_noiso();
	const int &HLT_DoubleEl_noiso();
	const int &HLT_DoubleEl();
	const int &HLT_DoubleEl_DZ();
	const int &HLT_DoubleEl_DZ_2();
	const int &HLT_MuEG();
	const int &HLT_MuEG_2();
	const int &HLT_MuEG_noiso();
	const int &HLT_MuEG_noiso_2();
	const int &HLT_Mu8_EG17();
	const int &HLT_Mu8_EG23();
	const int &HLT_Mu8_EG23_DZ();
	const int &HLT_Mu12_EG23_DZ();
	const int &HLT_Mu17_EG12();
	const int &HLT_Mu23_EG8();
	const int &HLT_Mu23_EG8_DZ();
	const int &HLT_Mu23_EG12();
	const int &HLT_Mu23_EG12_DZ();
	const int &HLT_DoubleMu_noiso();
	const int &HLT_DoubleMu_noiso_27_8();
	const int &HLT_DoubleMu_noiso_30_11();
	const int &HLT_DoubleMu_noiso_40_11();
	const int &HLT_DoubleMu();
	const int &HLT_DoubleMu_tk();
	const int &HLT_DoubleMu_dbltk();
	const int &HLT_DoubleMu_nonDZ();
	const int &HLT_DoubleMu_tk_nonDZ();
	const int &HLT_Photon22_R9Id90_HE10_IsoM();
	const int &HLT_Photon30_R9Id90_HE10_IsoM();
	const int &HLT_Photon36_R9Id90_HE10_IsoM();
	const int &HLT_Photon50_R9Id90_HE10_IsoM();
	const int &HLT_Photon75_R9Id90_HE10_IsoM();
	const int &HLT_Photon90_R9Id90_HE10_IsoM();
	const int &HLT_Photon120_R9Id90_HE10_IsoM();
	const int &HLT_Photon165_R9Id90_HE10_IsoM();
	const int &HLT_Photon165_HE10();
	const int &HLT_CaloJet500_NoJetID();
	const int &HLT_ECALHT800_NoJetID();
	const bool &HLT_Photon22_R9Id90_HE10_IsoM_matchedtophoton();
	const bool &HLT_Photon30_R9Id90_HE10_IsoM_matchedtophoton();
	const bool &HLT_Photon36_R9Id90_HE10_IsoM_matchedtophoton();
	const bool &HLT_Photon50_R9Id90_HE10_IsoM_matchedtophoton();
	const bool &HLT_Photon75_R9Id90_HE10_IsoM_matchedtophoton();
	const bool &HLT_Photon90_R9Id90_HE10_IsoM_matchedtophoton();
	const bool &HLT_Photon120_R9Id90_HE10_IsoM_matchedtophoton();
	const bool &HLT_Photon165_R9Id90_HE10_IsoM_matchedtophoton();
	const bool &HLT_Photon165_HE10_matchedtophoton();
	const float &dilmass();
	const float &dilpt();
	const float &dRll();
	const float &matched_neutralemf();
	const float &matched_emf();
	const bool &elveto();
	const int &nlep();
	const int &nveto_leptons();
	const int &nVetoEl_relIso03EAless01();
	const int &nVetoEl_relIso03EAless02();
	const int &nVetoEl_relIso03EAless03();
	const int &nVetoEl_relIso03EAless04();
	const int &nVetoMu_relIso03EAless01();
	const int &nVetoMu_relIso03EAless02();
	const int &nVetoMu_relIso03EAless03();
	const int &nVetoMu_relIso03EAless04();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &lep_p4();
	const vector<float> &lep_pt();
	const vector<float> &lep_eta();
	const vector<float> &lep_phi();
	const vector<float> &lep_mass();
	const vector<int> &lep_charge();
	const vector<bool> &lep_3ch_agree();
	const vector<bool> &lep_isFromW();
	const vector<bool> &lep_isFromZ();
	const vector<bool> &lep_isFromB();
	const vector<bool> &lep_isFromC();
	const vector<bool> &lep_isFromL();
	const vector<bool> &lep_isFromLF();
	const vector<double> &lep_ptRatio();
	const vector<double> &lep_ptRel();
	const vector<double> &lep_relIso03();
	const vector<double> &lep_relIso03DB();
	const vector<double> &lep_relIso03EA();
	const vector<double> &lep_relIso03EAv2();
	const vector<double> &lep_relIso04DB();
	const vector<double> &lep_relIso04EA();
	const vector<double> &lep_relIso04EAv2();
	const vector<double> &lep_miniRelIsoCMS3_EA();
	const vector<double> &lep_miniRelIsoCMS3_EAv2();
	const vector<double> &lep_miniRelIsoCMS3_DB();
	const vector<bool> &lep_pass_VVV_cutbased_veto();
	const vector<bool> &lep_pass_VVV_cutbased_veto_noiso();
	const vector<bool> &lep_pass_VVV_cutbased_veto_noiso_noip();
	const vector<bool> &lep_pass_VVV_cutbased_fo();
	const vector<bool> &lep_pass_VVV_cutbased_fo_noiso();
	const vector<bool> &lep_pass_VVV_cutbased_tight_noiso();
	const vector<bool> &lep_pass_VVV_cutbased_tight();
	const vector<bool> &lep_pass_VVV_MVAbased_tight_noiso();
	const vector<bool> &lep_pass_VVV_MVAbased_tight();
	const vector<bool> &lep_pass_VVV_baseline();
	const int &nlep_VVV_cutbased_veto();
	const int &nlep_VVV_cutbased_veto_noiso();
	const int &nlep_VVV_cutbased_veto_noiso_noip();
	const int &nlep_VVV_cutbased_fo();
	const int &nlep_VVV_cutbased_fo_noiso();
	const int &nlep_VVV_cutbased_tight_noiso();
	const int &nlep_VVV_cutbased_tight();
	const int &nlep_VVV_MVAbased_tight_noiso();
	const int &nlep_VVV_MVAbased_tight();
	const int &nlep_VVV_baseline();
	const vector<int> &lep_pdgId();
	const vector<int> &lep_mc_Id();
	const vector<float> &lep_dxy();
	const vector<float> &lep_ip3d();
	const vector<float> &lep_ip3derr();
	const vector<float> &lep_etaSC();
	const vector<float> &lep_dz();
	const vector<int> &lep_tightId();
	const vector<int> &lep_mcMatchId();
	const vector<int> &lep_lostHits();
	const vector<int> &lep_convVeto();
	const vector<int> &lep_tightCharge();
	const vector<float> &lep_MVA();
	const vector<float> &lep_validfraction();
	const vector<float> &lep_pterr();
	const vector<float> &lep_sta_pterrOpt();
	const vector<float> &lep_glb_pterrOpt();
	const vector<float> &lep_x2ondof();
	const vector<float> &lep_sta_x2ondof();
	const vector<float> &lep_glb_x2ondof();
	const int &nisoTrack_5gev();
	const int &nisoTrack_mt2();
	const int &nisoTrack_stop();
	const int &nisoTrack_PFLep5_woverlaps();
	const int &nisoTrack_PFHad10_woverlaps();
	const int &ngamma();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &gamma_p4();
	const vector<float> &gamma_pt();
	const vector<float> &gamma_eta();
	const vector<float> &gamma_phi();
	const vector<float> &gamma_mass();
	const vector<int> &gamma_mcMatchId();
	const vector<float> &gamma_genPt();
	const vector<float> &gamma_genIso();
	const vector<float> &gamma_chHadIso();
	const vector<float> &gamma_neuHadIso();
	const vector<float> &gamma_phIso();
	const vector<float> &gamma_sigmaIetaIeta();
	const vector<float> &gamma_r9();
	const vector<float> &gamma_hOverE();
	const vector<float> &gamma_hOverE_online();
	const vector<int> &gamma_idCutBased();
	const vector<float> &gamma_ecpfclusiso();
	const vector<float> &gamma_hcpfclusiso();
	const vector<float> &gamma_hollowtkiso03();
	const vector<int> &gamma_genIsPromptFinalState();
	const vector<float> &gamma_drMinParton();
	const int &ngenPart();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genPart_p4();
	const vector<float> &genPart_pt();
	const vector<float> &genPart_eta();
	const vector<float> &genPart_phi();
	const vector<float> &genPart_mass();
	const vector<int> &genPart_pdgId();
	const vector<int> &genPart_status();
	const vector<float> &genPart_charge();
	const vector<int> &genPart_motherId();
	const vector<int> &genPart_grandmaId();
	const vector<bool> &genPart_isp6status3();
	const int &ngenLep();
	const vector<float> &genLep_pt();
	const vector<float> &genLep_eta();
	const vector<float> &genLep_phi();
	const vector<float> &genLep_mass();
	const vector<int> &genLep_pdgId();
	const vector<int> &genLep_status();
	const vector<float> &genLep_charge();
	const vector<int> &genLep_sourceId();
	const vector<bool> &genLep_isp6status3();
	const int &ngenTau();
	const vector<float> &genTau_pt();
	const vector<float> &genTau_eta();
	const vector<float> &genTau_phi();
	const vector<float> &genTau_mass();
	const vector<int> &genTau_pdgId();
	const vector<int> &genTau_status();
	const vector<float> &genTau_charge();
	const vector<int> &genTau_sourceId();
	const int &ngenLepFromTau();
	const vector<float> &genLepFromTau_pt();
	const vector<float> &genLepFromTau_eta();
	const vector<float> &genLepFromTau_phi();
	const vector<float> &genLepFromTau_mass();
	const vector<int> &genLepFromTau_pdgId();
	const vector<int> &genLepFromTau_status();
	const vector<float> &genLepFromTau_charge();
	const vector<int> &genLepFromTau_sourceId();
	const int &njets();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &jets_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &removed_jets_p4();
	const vector<float> &removed_jets_csv();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &jets_medb_p4();
	const int &njets_up();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &jets_up_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &jets_medb_up_p4();
	const vector<float> &jets_csv();
	const vector<float> &jets_up_csv();
	const int &njets_dn();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &jets_dn_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &jets_medb_dn_p4();
	const vector<float> &jets_dn_csv();
	const vector<float> &jets_muf();
	const vector<int> &jets_mcFlavour();
	const vector<int> &jets_mcHadronFlav();
	const int &nhighPtPFcands();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &highPtPFcands_p4();
	const vector<float> &highPtPFcands_dz();
	const vector<int> &highPtPFcands_pdgId();
	const float &ht();
	const float &ht_up();
	const float &ht_dn();
	const float &metsig_unofficial();
	const float &metsig_unofficial_up();
	const float &metsig_unofficial_dn();
	const float &mt_lep1();
	const float &mt2();
	const float &mt2_up();
	const float &mt2_dn();
	const float &mt2j();
	const float &mt2b();
	const float &mt2b_up();
	const float &mt2b_dn();
	const float &mt2_genmet();
	const float &mt2b_genmet();
	const float &mjj_mindphi();
	const float &mjj();
	const float &mbb_csv();
	const float &mbb_bpt();
	const float &dphi_jj();
	const float &dphi_ll();
	const float &sum_mlb();
	const float &deta_jj();
	const float &dR_jj();
	const float &dphi_metj1();
	const float &dphi_metj2();
	const float &dphi_genmetj1();
	const float &dphi_genmetj2();
	const float &mjj_mindphi_up();
	const float &mjj_up();
	const float &mbb_csv_up();
	const float &mbb_bpt_up();
	const float &dphi_jj_up();
	const float &dphi_ll_up();
	const float &sum_mlb_up();
	const float &deta_jj_up();
	const float &dR_jj_up();
	const float &dphi_metj1_up();
	const float &dphi_metj2_up();
	const float &mjj_mindphi_dn();
	const float &mjj_dn();
	const float &mbb_csv_dn();
	const float &mbb_bpt_dn();
	const float &dphi_jj_dn();
	const float &dphi_ll_dn();
	const float &sum_mlb_dn();
	const float &deta_jj_dn();
	const float &dR_jj_dn();
	const float &dphi_metj1_dn();
	const float &dphi_metj2_dn();
	const float &weight_btagsf();
	const float &weight_btagsf_heavy_UP();
	const float &weight_btagsf_light_UP();
	const float &weight_btagsf_heavy_DN();
	const float &weight_btagsf_light_DN();
	const float &chpfcands_0013_pt();
	const float &chpfcands_1316_pt();
	const float &chpfcands_1624_pt();
	const float &chpfcands_2430_pt();
	const float &chpfcands_30in_pt();
	const float &phpfcands_0013_pt();
	const float &phpfcands_1316_pt();
	const float &phpfcands_1624_pt();
	const float &phpfcands_2430_pt();
	const float &phpfcands_30in_pt();
	const float &nupfcands_0013_pt();
	const float &nupfcands_1316_pt();
	const float &nupfcands_1624_pt();
	const float &nupfcands_2430_pt();
	const float &nupfcands_30in_pt();
	const float &chpfcands_0013_sumet();
	const float &chpfcands_1316_sumet();
	const float &chpfcands_1624_sumet();
	const float &chpfcands_2430_sumet();
	const float &chpfcands_30in_sumet();
	const float &phpfcands_0013_sumet();
	const float &phpfcands_1316_sumet();
	const float &phpfcands_1624_sumet();
	const float &phpfcands_2430_sumet();
	const float &phpfcands_30in_sumet();
	const float &nupfcands_0013_sumet();
	const float &nupfcands_1316_sumet();
	const float &nupfcands_1624_sumet();
	const float &nupfcands_2430_sumet();
	const float &nupfcands_30in_sumet();
	const float &chpfcands_0013_phi();
	const float &chpfcands_1316_phi();
	const float &chpfcands_1624_phi();
	const float &chpfcands_2430_phi();
	const float &chpfcands_30in_phi();
	const float &phpfcands_0013_phi();
	const float &phpfcands_1316_phi();
	const float &phpfcands_1624_phi();
	const float &phpfcands_2430_phi();
	const float &phpfcands_30in_phi();
	const float &nupfcands_0013_phi();
	const float &nupfcands_1316_phi();
	const float &nupfcands_1624_phi();
	const float &nupfcands_2430_phi();
	const float &nupfcands_30in_phi();
	const float &met_T1CHS_pt();
	const float &met_T1CHS_phi();
	const float &met_T1CHS_fromCORE_pt();
	const float &met_T1CHS_fromCORE_phi();
	const float &met_T1CHS_miniAOD_CORE_pt();
	const float &met_T1CHS_miniAOD_CORE_phi();
	const float &met_T1CHS_miniAOD_CORE_up_pt();
	const float &met_T1CHS_miniAOD_CORE_up_phi();
	const float &met_T1CHS_miniAOD_CORE_dn_pt();
	const float &met_T1CHS_miniAOD_CORE_dn_phi();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &decayedphoton_lep1_p4();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &decayedphoton_lep2_p4();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &decayedphoton_bosn_p4();
	const float &decayedphoton_mt2();
	const int &hyp_type();
	const int &evt_type();
	const int &mass_gluino();
	const int &mass_LSP();
	const int &mass_chi();
	const float &isrboost();
	const int &isr_njets();
	const float &isr_weight();
	const float &isr_unc();
	const vector<float> &weightsf_lepid();
	const vector<float> &weightsf_lepiso();
	const vector<float> &weightsf_lepip();
	const vector<float> &weightsf_lepreco();
	const vector<float> &weightsf_lepconv();
	const vector<float> &weightsf_lepid_FS();
	const vector<float> &weightsf_lepiso_FS();
	const vector<float> &weightsf_lepip_FS();
}
#endif
