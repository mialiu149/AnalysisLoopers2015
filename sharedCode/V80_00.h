// -*- C++ -*-
#ifndef V80_00_H
#define V80_00_H
#include "Math/LorentzVector.h"
#include "Math/Point3D.h"
#include "TMath.h"
#include "TBranch.h"
#include "TTree.h"
#include "TH1F.h"
#include "TFile.h"
#include "TBits.h"
#include <vector> 
#include <unistd.h> 
typedef ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > LorentzVector;

// Generated with the command
// makeCMS3ClassFiles("chain files", "t", "V80_00", "V80_00_np", "v80_00")

using namespace std; 
class V80_00 {
private: 
protected: 
	unsigned int index;
	unsigned int	run_;
	TBranch *run_branch;
	bool run_isLoaded;
	unsigned int	ls_;
	TBranch *ls_branch;
	bool ls_isLoaded;
	unsigned int	evt_;
	TBranch *evt_branch;
	bool evt_isLoaded;
	int	nvtxs_;
	TBranch *nvtxs_branch;
	bool nvtxs_isLoaded;
	int	pu_nvtxs_;
	TBranch *pu_nvtxs_branch;
	bool pu_nvtxs_isLoaded;
	float	pfmet_;
	TBranch *pfmet_branch;
	bool pfmet_isLoaded;
	float	pfmet_phi_;
	TBranch *pfmet_phi_branch;
	bool pfmet_phi_isLoaded;
	float	scale1fb_;
	TBranch *scale1fb_branch;
	bool scale1fb_isLoaded;
	float	xsec_;
	TBranch *xsec_branch;
	bool xsec_isLoaded;
	float	xsec_uncert_;
	TBranch *xsec_uncert_branch;
	bool xsec_uncert_isLoaded;
	float	kfactor_;
	TBranch *kfactor_branch;
	bool kfactor_isLoaded;
	float	pu_ntrue_;
	TBranch *pu_ntrue_branch;
	bool pu_ntrue_isLoaded;
	int	ngoodleps_;
	TBranch *ngoodleps_branch;
	bool ngoodleps_isLoaded;
	int	nvetoleps_;
	TBranch *nvetoleps_branch;
	bool nvetoleps_isLoaded;
	bool	is_data_;
	TBranch *is_data_branch;
	bool is_data_isLoaded;
	string *dataset_;
	TBranch *dataset_branch;
	bool dataset_isLoaded;
	string *filename_;
	TBranch *filename_branch;
	bool filename_isLoaded;
	string *cms3tag_;
	TBranch *cms3tag_branch;
	bool cms3tag_isLoaded;
	unsigned int	nEvents_;
	TBranch *nEvents_branch;
	bool nEvents_isLoaded;
	unsigned int	nEvents_goodvtx_;
	TBranch *nEvents_goodvtx_branch;
	bool nEvents_goodvtx_isLoaded;
	unsigned int	nEvents_MET30_;
	TBranch *nEvents_MET30_branch;
	bool nEvents_MET30_isLoaded;
	unsigned int	nEvents_1goodlep_;
	TBranch *nEvents_1goodlep_branch;
	bool nEvents_1goodlep_isLoaded;
	unsigned int	nEvents_2goodjets_;
	TBranch *nEvents_2goodjets_branch;
	bool nEvents_2goodjets_isLoaded;
	int	is0lep_;
	TBranch *is0lep_branch;
	bool is0lep_isLoaded;
	int	is1lep_;
	TBranch *is1lep_branch;
	bool is1lep_isLoaded;
	int	is2lep_;
	TBranch *is2lep_branch;
	bool is2lep_isLoaded;
	int	isZtoNuNu_;
	TBranch *isZtoNuNu_branch;
	bool isZtoNuNu_isLoaded;
	int	is1lepFromW_;
	TBranch *is1lepFromW_branch;
	bool is1lepFromW_isLoaded;
	int	is1lepFromTop_;
	TBranch *is1lepFromTop_branch;
	bool is1lepFromTop_isLoaded;
	float	MT2W_;
	TBranch *MT2W_branch;
	bool MT2W_isLoaded;
	float	mindphi_met_j1_j2_;
	TBranch *mindphi_met_j1_j2_branch;
	bool mindphi_met_j1_j2_isLoaded;
	float	mt_met_lep_;
	TBranch *mt_met_lep_branch;
	bool mt_met_lep_isLoaded;
	float	hadronic_top_chi2_;
	TBranch *hadronic_top_chi2_branch;
	bool hadronic_top_chi2_isLoaded;
	float	ak4pfjets_rho_;
	TBranch *ak4pfjets_rho_branch;
	bool ak4pfjets_rho_isLoaded;
	float	pdf_up_weight_;
	TBranch *pdf_up_weight_branch;
	bool pdf_up_weight_isLoaded;
	float	pdf_down_weight_;
	TBranch *pdf_down_weight_branch;
	bool pdf_down_weight_isLoaded;
	vector<string> *genweightsID_;
	TBranch *genweightsID_branch;
	bool genweightsID_isLoaded;
	vector<float> *genweights_;
	TBranch *genweights_branch;
	bool genweights_isLoaded;
	float	weight_btagsf_;
	TBranch *weight_btagsf_branch;
	bool weight_btagsf_isLoaded;
	float	weight_btagsf_heavy_UP_;
	TBranch *weight_btagsf_heavy_UP_branch;
	bool weight_btagsf_heavy_UP_isLoaded;
	float	weight_btagsf_light_UP_;
	TBranch *weight_btagsf_light_UP_branch;
	bool weight_btagsf_light_UP_isLoaded;
	float	weight_btagsf_heavy_DN_;
	TBranch *weight_btagsf_heavy_DN_branch;
	bool weight_btagsf_heavy_DN_isLoaded;
	float	weight_btagsf_light_DN_;
	TBranch *weight_btagsf_light_DN_branch;
	bool weight_btagsf_light_DN_isLoaded;
	float	weight_btagsf_fastsim_UP_;
	TBranch *weight_btagsf_fastsim_UP_branch;
	bool weight_btagsf_fastsim_UP_isLoaded;
	float	weight_btagsf_fastsim_DN_;
	TBranch *weight_btagsf_fastsim_DN_branch;
	bool weight_btagsf_fastsim_DN_isLoaded;
	float	weight_lepSF_;
	TBranch *weight_lepSF_branch;
	bool weight_lepSF_isLoaded;
	float	weight_lepSF_up_;
	TBranch *weight_lepSF_up_branch;
	bool weight_lepSF_up_isLoaded;
	float	weight_lepSF_down_;
	TBranch *weight_lepSF_down_branch;
	bool weight_lepSF_down_isLoaded;
	float	weight_vetoLepSF_;
	TBranch *weight_vetoLepSF_branch;
	bool weight_vetoLepSF_isLoaded;
	float	weight_vetoLepSF_up_;
	TBranch *weight_vetoLepSF_up_branch;
	bool weight_vetoLepSF_up_isLoaded;
	float	weight_vetoLepSF_down_;
	TBranch *weight_vetoLepSF_down_branch;
	bool weight_vetoLepSF_down_isLoaded;
	float	weight_lepSF_fastSim_;
	TBranch *weight_lepSF_fastSim_branch;
	bool weight_lepSF_fastSim_isLoaded;
	float	weight_lepSF_fastSim_up_;
	TBranch *weight_lepSF_fastSim_up_branch;
	bool weight_lepSF_fastSim_up_isLoaded;
	float	weight_lepSF_fastSim_down_;
	TBranch *weight_lepSF_fastSim_down_branch;
	bool weight_lepSF_fastSim_down_isLoaded;
	float	weight_ISR_;
	TBranch *weight_ISR_branch;
	bool weight_ISR_isLoaded;
	float	weight_ISRup_;
	TBranch *weight_ISRup_branch;
	bool weight_ISRup_isLoaded;
	float	weight_ISRdown_;
	TBranch *weight_ISRdown_branch;
	bool weight_ISRdown_isLoaded;
	float	weight_PU_;
	TBranch *weight_PU_branch;
	bool weight_PU_isLoaded;
	float	weight_PUup_;
	TBranch *weight_PUup_branch;
	bool weight_PUup_isLoaded;
	float	weight_PUdown_;
	TBranch *weight_PUdown_branch;
	bool weight_PUdown_isLoaded;
	vector<string> *sparms_names_;
	TBranch *sparms_names_branch;
	bool sparms_names_isLoaded;
	vector<float> *sparms_values_;
	TBranch *sparms_values_branch;
	bool sparms_values_isLoaded;
	int	sparms_subProcessId_;
	TBranch *sparms_subProcessId_branch;
	bool sparms_subProcessId_isLoaded;
	float	mass_lsp_;
	TBranch *mass_lsp_branch;
	bool mass_lsp_isLoaded;
	float	mass_chargino_;
	TBranch *mass_chargino_branch;
	bool mass_chargino_isLoaded;
	float	mass_stop_;
	TBranch *mass_stop_branch;
	bool mass_stop_isLoaded;
	float	mass_gluino_;
	TBranch *mass_gluino_branch;
	bool mass_gluino_isLoaded;
	float	genmet_;
	TBranch *genmet_branch;
	bool genmet_isLoaded;
	float	genmet_phi_;
	TBranch *genmet_phi_branch;
	bool genmet_phi_isLoaded;
	float	genht_;
	TBranch *genht_branch;
	bool genht_isLoaded;
	bool	PassTrackVeto_;
	TBranch *PassTrackVeto_branch;
	bool PassTrackVeto_isLoaded;
	bool	PassTauVeto_;
	TBranch *PassTauVeto_branch;
	bool PassTauVeto_isLoaded;
	float	topness_;
	TBranch *topness_branch;
	bool topness_isLoaded;
	float	topnessMod_;
	TBranch *topnessMod_branch;
	bool topnessMod_isLoaded;
	float	Mlb_closestb_;
	TBranch *Mlb_closestb_branch;
	bool Mlb_closestb_isLoaded;
	int	HLT_SingleEl_;
	TBranch *HLT_SingleEl_branch;
	bool HLT_SingleEl_isLoaded;
	int	HLT_SingleMu_;
	TBranch *HLT_SingleMu_branch;
	bool HLT_SingleMu_isLoaded;
	int	HLT_MET_;
	TBranch *HLT_MET_branch;
	bool HLT_MET_isLoaded;
	int	HLT_DiEl_;
	TBranch *HLT_DiEl_branch;
	bool HLT_DiEl_isLoaded;
	int	HLT_DiMu_;
	TBranch *HLT_DiMu_branch;
	bool HLT_DiMu_isLoaded;
	int	HLT_MuE_;
	TBranch *HLT_MuE_branch;
	bool HLT_MuE_isLoaded;
	int	HLT_Photon90_CaloIdL_PFHT500_;
	TBranch *HLT_Photon90_CaloIdL_PFHT500_branch;
	bool HLT_Photon90_CaloIdL_PFHT500_isLoaded;
	int	HLT_Photon22_R9Id90_HE10_IsoM_;
	TBranch *HLT_Photon22_R9Id90_HE10_IsoM_branch;
	bool HLT_Photon22_R9Id90_HE10_IsoM_isLoaded;
	int	HLT_Photon30_R9Id90_HE10_IsoM_;
	TBranch *HLT_Photon30_R9Id90_HE10_IsoM_branch;
	bool HLT_Photon30_R9Id90_HE10_IsoM_isLoaded;
	int	HLT_Photon36_R9Id90_HE10_IsoM_;
	TBranch *HLT_Photon36_R9Id90_HE10_IsoM_branch;
	bool HLT_Photon36_R9Id90_HE10_IsoM_isLoaded;
	int	HLT_Photon50_R9Id90_HE10_IsoM_;
	TBranch *HLT_Photon50_R9Id90_HE10_IsoM_branch;
	bool HLT_Photon50_R9Id90_HE10_IsoM_isLoaded;
	int	HLT_Photon75_R9Id90_HE10_IsoM_;
	TBranch *HLT_Photon75_R9Id90_HE10_IsoM_branch;
	bool HLT_Photon75_R9Id90_HE10_IsoM_isLoaded;
	int	HLT_Photon90_R9Id90_HE10_IsoM_;
	TBranch *HLT_Photon90_R9Id90_HE10_IsoM_branch;
	bool HLT_Photon90_R9Id90_HE10_IsoM_isLoaded;
	int	HLT_Photon120_R9Id90_HE10_IsoM_;
	TBranch *HLT_Photon120_R9Id90_HE10_IsoM_branch;
	bool HLT_Photon120_R9Id90_HE10_IsoM_isLoaded;
	int	HLT_Photon165_R9Id90_HE10_IsoM_;
	TBranch *HLT_Photon165_R9Id90_HE10_IsoM_branch;
	bool HLT_Photon165_R9Id90_HE10_IsoM_isLoaded;
	int	HLT_Photon175_;
	TBranch *HLT_Photon175_branch;
	bool HLT_Photon175_isLoaded;
	int	HLT_Photon165_HE10_;
	TBranch *HLT_Photon165_HE10_branch;
	bool HLT_Photon165_HE10_isLoaded;
	int	nPhotons_;
	TBranch *nPhotons_branch;
	bool nPhotons_isLoaded;
	int	ph_ngoodjets_;
	TBranch *ph_ngoodjets_branch;
	bool ph_ngoodjets_isLoaded;
	int	ph_ngoodbtags_;
	TBranch *ph_ngoodbtags_branch;
	bool ph_ngoodbtags_isLoaded;
	float	filt_met_;
	TBranch *filt_met_branch;
	bool filt_met_isLoaded;
	float	filt_cscbeamhalo2015_;
	TBranch *filt_cscbeamhalo2015_branch;
	bool filt_cscbeamhalo2015_isLoaded;
	float	hardgenpt_;
	TBranch *hardgenpt_branch;
	bool hardgenpt_isLoaded;
	float	filt_badChargedCandidateFilter_;
	TBranch *filt_badChargedCandidateFilter_branch;
	bool filt_badChargedCandidateFilter_isLoaded;
	int	lep1_pdgid_;
	TBranch *lep1_pdgid_branch;
	bool lep1_pdgid_isLoaded;
	int	lep1_production_type_;
	TBranch *lep1_production_type_branch;
	bool lep1_production_type_isLoaded;
	float	lep1_MiniIso_;
	TBranch *lep1_MiniIso_branch;
	bool lep1_MiniIso_isLoaded;
	float	lep1_relIso_;
	TBranch *lep1_relIso_branch;
	bool lep1_relIso_isLoaded;
	bool	lep1_passLooseID_;
	TBranch *lep1_passLooseID_branch;
	bool lep1_passLooseID_isLoaded;
	bool	lep1_passMediumID_;
	TBranch *lep1_passMediumID_branch;
	bool lep1_passMediumID_isLoaded;
	bool	lep1_passTightID_;
	TBranch *lep1_passTightID_branch;
	bool lep1_passTightID_isLoaded;
	bool	lep1_passVeto_;
	TBranch *lep1_passVeto_branch;
	bool lep1_passVeto_isLoaded;
	ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *lep1_p4_;
	TBranch *lep1_p4_branch;
	bool lep1_p4_isLoaded;
	ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *lep1_mcp4_;
	TBranch *lep1_mcp4_branch;
	bool lep1_mcp4_isLoaded;
	int	lep1_mc_motherid_;
	TBranch *lep1_mc_motherid_branch;
	bool lep1_mc_motherid_isLoaded;
	int	lep2_pdgid_;
	TBranch *lep2_pdgid_branch;
	bool lep2_pdgid_isLoaded;
	int	lep2_production_type_;
	TBranch *lep2_production_type_branch;
	bool lep2_production_type_isLoaded;
	float	lep2_MiniIso_;
	TBranch *lep2_MiniIso_branch;
	bool lep2_MiniIso_isLoaded;
	float	lep2_relIso_;
	TBranch *lep2_relIso_branch;
	bool lep2_relIso_isLoaded;
	bool	lep2_passLooseID_;
	TBranch *lep2_passLooseID_branch;
	bool lep2_passLooseID_isLoaded;
	bool	lep2_passMediumID_;
	TBranch *lep2_passMediumID_branch;
	bool lep2_passMediumID_isLoaded;
	bool	lep2_passTightID_;
	TBranch *lep2_passTightID_branch;
	bool lep2_passTightID_isLoaded;
	bool	lep2_passVeto_;
	TBranch *lep2_passVeto_branch;
	bool lep2_passVeto_isLoaded;
	ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *lep2_p4_;
	TBranch *lep2_p4_branch;
	bool lep2_p4_isLoaded;
	ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *lep2_mcp4_;
	TBranch *lep2_mcp4_branch;
	bool lep2_mcp4_isLoaded;
	int	lep2_mc_motherid_;
	TBranch *lep2_mc_motherid_branch;
	bool lep2_mc_motherid_isLoaded;
	vector<float> *ph_sigmaIEtaEta_fill5x5_;
	TBranch *ph_sigmaIEtaEta_fill5x5_branch;
	bool ph_sigmaIEtaEta_fill5x5_isLoaded;
	vector<float> *ph_hOverE_;
	TBranch *ph_hOverE_branch;
	bool ph_hOverE_isLoaded;
	vector<float> *ph_r9_;
	TBranch *ph_r9_branch;
	bool ph_r9_isLoaded;
	vector<float> *ph_chiso_;
	TBranch *ph_chiso_branch;
	bool ph_chiso_isLoaded;
	vector<float> *ph_nhiso_;
	TBranch *ph_nhiso_branch;
	bool ph_nhiso_isLoaded;
	vector<float> *ph_phiso_;
	TBranch *ph_phiso_branch;
	bool ph_phiso_isLoaded;
	vector<bool> *ph_idCutBased_;
	TBranch *ph_idCutBased_branch;
	bool ph_idCutBased_isLoaded;
	vector<int> *ph_overlapJetId_;
	TBranch *ph_overlapJetId_branch;
	bool ph_overlapJetId_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *ph_p4_;
	TBranch *ph_p4_branch;
	bool ph_p4_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *ph_mcp4_;
	TBranch *ph_mcp4_branch;
	bool ph_mcp4_isLoaded;
	vector<float> *ph_pt_;
	TBranch *ph_pt_branch;
	bool ph_pt_isLoaded;
	vector<float> *ph_eta_;
	TBranch *ph_eta_branch;
	bool ph_eta_isLoaded;
	vector<float> *ph_phi_;
	TBranch *ph_phi_branch;
	bool ph_phi_isLoaded;
	vector<float> *ph_mass_;
	TBranch *ph_mass_branch;
	bool ph_mass_isLoaded;
	vector<int> *ph_mcMatchId_;
	TBranch *ph_mcMatchId_branch;
	bool ph_mcMatchId_isLoaded;
	vector<float> *ph_genIso04_;
	TBranch *ph_genIso04_branch;
	bool ph_genIso04_isLoaded;
	vector<float> *ph_drMinParton_;
	TBranch *ph_drMinParton_branch;
	bool ph_drMinParton_isLoaded;
	int	ngoodjets_;
	TBranch *ngoodjets_branch;
	bool ngoodjets_isLoaded;
	int	ngoodbtags_;
	TBranch *ngoodbtags_branch;
	bool ngoodbtags_isLoaded;
	float	ak4_HT_;
	TBranch *ak4_HT_branch;
	bool ak4_HT_isLoaded;
	float	ak4_htratiom_;
	TBranch *ak4_htratiom_branch;
	bool ak4_htratiom_isLoaded;
	vector<float> *dphi_ak4pfjet_met_;
	TBranch *dphi_ak4pfjet_met_branch;
	bool dphi_ak4pfjet_met_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *ak4pfjets_p4_;
	TBranch *ak4pfjets_p4_branch;
	bool ak4pfjets_p4_isLoaded;
	vector<bool> *ak4pfjets_passMEDbtag_;
	TBranch *ak4pfjets_passMEDbtag_branch;
	bool ak4pfjets_passMEDbtag_isLoaded;
	vector<float> *ak4pfjets_CSV_;
	TBranch *ak4pfjets_CSV_branch;
	bool ak4pfjets_CSV_isLoaded;
	vector<float> *ak4pfjets_mva_;
	TBranch *ak4pfjets_mva_branch;
	bool ak4pfjets_mva_isLoaded;
	vector<int> *ak4pfjets_parton_flavor_;
	TBranch *ak4pfjets_parton_flavor_branch;
	bool ak4pfjets_parton_flavor_isLoaded;
	vector<int> *ak4pfjets_hadron_flavor_;
	TBranch *ak4pfjets_hadron_flavor_branch;
	bool ak4pfjets_hadron_flavor_isLoaded;
	vector<bool> *ak4pfjets_loose_puid_;
	TBranch *ak4pfjets_loose_puid_branch;
	bool ak4pfjets_loose_puid_isLoaded;
	vector<bool> *ak4pfjets_loose_pfid_;
	TBranch *ak4pfjets_loose_pfid_branch;
	bool ak4pfjets_loose_pfid_isLoaded;
	ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *ak4pfjets_leadMEDbjet_p4_;
	TBranch *ak4pfjets_leadMEDbjet_p4_branch;
	bool ak4pfjets_leadMEDbjet_p4_isLoaded;
	ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *ak4pfjets_leadbtag_p4_;
	TBranch *ak4pfjets_leadbtag_p4_branch;
	bool ak4pfjets_leadbtag_p4_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *ak4genjets_p4_;
	TBranch *ak4genjets_p4_branch;
	bool ak4genjets_p4_isLoaded;
	vector<bool> *genleps_isfromt_;
	TBranch *genleps_isfromt_branch;
	bool genleps_isfromt_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *genleps_p4_;
	TBranch *genleps_p4_branch;
	bool genleps_p4_isLoaded;
	vector<int> *genleps_id_;
	TBranch *genleps_id_branch;
	bool genleps_id_isLoaded;
	vector<int> *genleps__genpsidx_;
	TBranch *genleps__genpsidx_branch;
	bool genleps__genpsidx_isLoaded;
	vector<int> *genleps_status_;
	TBranch *genleps_status_branch;
	bool genleps_status_isLoaded;
	vector<bool> *genleps_fromHardProcessDecayed_;
	TBranch *genleps_fromHardProcessDecayed_branch;
	bool genleps_fromHardProcessDecayed_isLoaded;
	vector<bool> *genleps_fromHardProcessFinalState_;
	TBranch *genleps_fromHardProcessFinalState_branch;
	bool genleps_fromHardProcessFinalState_isLoaded;
	vector<bool> *genleps_isHardProcess_;
	TBranch *genleps_isHardProcess_branch;
	bool genleps_isHardProcess_isLoaded;
	vector<bool> *genleps_isLastCopy_;
	TBranch *genleps_isLastCopy_branch;
	bool genleps_isLastCopy_isLoaded;
	vector<int> *genleps_gentaudecay_;
	TBranch *genleps_gentaudecay_branch;
	bool genleps_gentaudecay_isLoaded;
	int	gen_nfromtleps__;
	TBranch *gen_nfromtleps__branch;
	bool gen_nfromtleps__isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *genleps_motherp4_;
	TBranch *genleps_motherp4_branch;
	bool genleps_motherp4_isLoaded;
	vector<int> *genleps_motherid_;
	TBranch *genleps_motherid_branch;
	bool genleps_motherid_isLoaded;
	vector<int> *genleps_motheridx_;
	TBranch *genleps_motheridx_branch;
	bool genleps_motheridx_isLoaded;
	vector<int> *genleps_motherstatus_;
	TBranch *genleps_motherstatus_branch;
	bool genleps_motherstatus_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *genleps_gmotherp4_;
	TBranch *genleps_gmotherp4_branch;
	bool genleps_gmotherp4_isLoaded;
	vector<int> *genleps_gmotherid_;
	TBranch *genleps_gmotherid_branch;
	bool genleps_gmotherid_isLoaded;
	vector<int> *genleps_gmotheridx_;
	TBranch *genleps_gmotheridx_branch;
	bool genleps_gmotheridx_isLoaded;
	vector<int> *genleps_gmotherstatus_;
	TBranch *genleps_gmotherstatus_branch;
	bool genleps_gmotherstatus_isLoaded;
	vector<bool> *gennus_isfromt_;
	TBranch *gennus_isfromt_branch;
	bool gennus_isfromt_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *gennus_p4_;
	TBranch *gennus_p4_branch;
	bool gennus_p4_isLoaded;
	vector<int> *gennus_id_;
	TBranch *gennus_id_branch;
	bool gennus_id_isLoaded;
	vector<int> *gennus__genpsidx_;
	TBranch *gennus__genpsidx_branch;
	bool gennus__genpsidx_isLoaded;
	vector<int> *gennus_status_;
	TBranch *gennus_status_branch;
	bool gennus_status_isLoaded;
	vector<bool> *gennus_fromHardProcessDecayed_;
	TBranch *gennus_fromHardProcessDecayed_branch;
	bool gennus_fromHardProcessDecayed_isLoaded;
	vector<bool> *gennus_fromHardProcessFinalState_;
	TBranch *gennus_fromHardProcessFinalState_branch;
	bool gennus_fromHardProcessFinalState_isLoaded;
	vector<bool> *gennus_isHardProcess_;
	TBranch *gennus_isHardProcess_branch;
	bool gennus_isHardProcess_isLoaded;
	vector<bool> *gennus_isLastCopy_;
	TBranch *gennus_isLastCopy_branch;
	bool gennus_isLastCopy_isLoaded;
	vector<int> *gennus_gentaudecay_;
	TBranch *gennus_gentaudecay_branch;
	bool gennus_gentaudecay_isLoaded;
	int	gen_nfromtnus__;
	TBranch *gen_nfromtnus__branch;
	bool gen_nfromtnus__isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *gennus_motherp4_;
	TBranch *gennus_motherp4_branch;
	bool gennus_motherp4_isLoaded;
	vector<int> *gennus_motherid_;
	TBranch *gennus_motherid_branch;
	bool gennus_motherid_isLoaded;
	vector<int> *gennus_motheridx_;
	TBranch *gennus_motheridx_branch;
	bool gennus_motheridx_isLoaded;
	vector<int> *gennus_motherstatus_;
	TBranch *gennus_motherstatus_branch;
	bool gennus_motherstatus_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *gennus_gmotherp4_;
	TBranch *gennus_gmotherp4_branch;
	bool gennus_gmotherp4_isLoaded;
	vector<int> *gennus_gmotherid_;
	TBranch *gennus_gmotherid_branch;
	bool gennus_gmotherid_isLoaded;
	vector<int> *gennus_gmotheridx_;
	TBranch *gennus_gmotheridx_branch;
	bool gennus_gmotheridx_isLoaded;
	vector<int> *gennus_gmotherstatus_;
	TBranch *gennus_gmotherstatus_branch;
	bool gennus_gmotherstatus_isLoaded;
	vector<bool> *genqs_isfromt_;
	TBranch *genqs_isfromt_branch;
	bool genqs_isfromt_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *genqs_p4_;
	TBranch *genqs_p4_branch;
	bool genqs_p4_isLoaded;
	vector<int> *genqs_id_;
	TBranch *genqs_id_branch;
	bool genqs_id_isLoaded;
	vector<int> *genqs__genpsidx_;
	TBranch *genqs__genpsidx_branch;
	bool genqs__genpsidx_isLoaded;
	vector<int> *genqs_status_;
	TBranch *genqs_status_branch;
	bool genqs_status_isLoaded;
	vector<bool> *genqs_fromHardProcessDecayed_;
	TBranch *genqs_fromHardProcessDecayed_branch;
	bool genqs_fromHardProcessDecayed_isLoaded;
	vector<bool> *genqs_fromHardProcessFinalState_;
	TBranch *genqs_fromHardProcessFinalState_branch;
	bool genqs_fromHardProcessFinalState_isLoaded;
	vector<bool> *genqs_isHardProcess_;
	TBranch *genqs_isHardProcess_branch;
	bool genqs_isHardProcess_isLoaded;
	vector<bool> *genqs_isLastCopy_;
	TBranch *genqs_isLastCopy_branch;
	bool genqs_isLastCopy_isLoaded;
	vector<int> *genqs_gentaudecay_;
	TBranch *genqs_gentaudecay_branch;
	bool genqs_gentaudecay_isLoaded;
	int	gen_nfromtqs__;
	TBranch *gen_nfromtqs__branch;
	bool gen_nfromtqs__isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *genqs_motherp4_;
	TBranch *genqs_motherp4_branch;
	bool genqs_motherp4_isLoaded;
	vector<int> *genqs_motherid_;
	TBranch *genqs_motherid_branch;
	bool genqs_motherid_isLoaded;
	vector<int> *genqs_motheridx_;
	TBranch *genqs_motheridx_branch;
	bool genqs_motheridx_isLoaded;
	vector<int> *genqs_motherstatus_;
	TBranch *genqs_motherstatus_branch;
	bool genqs_motherstatus_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *genqs_gmotherp4_;
	TBranch *genqs_gmotherp4_branch;
	bool genqs_gmotherp4_isLoaded;
	vector<int> *genqs_gmotherid_;
	TBranch *genqs_gmotherid_branch;
	bool genqs_gmotherid_isLoaded;
	vector<int> *genqs_gmotheridx_;
	TBranch *genqs_gmotheridx_branch;
	bool genqs_gmotheridx_isLoaded;
	vector<int> *genqs_gmotherstatus_;
	TBranch *genqs_gmotherstatus_branch;
	bool genqs_gmotherstatus_isLoaded;
	vector<bool> *genbosons_isfromt_;
	TBranch *genbosons_isfromt_branch;
	bool genbosons_isfromt_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *genbosons_p4_;
	TBranch *genbosons_p4_branch;
	bool genbosons_p4_isLoaded;
	vector<int> *genbosons_id_;
	TBranch *genbosons_id_branch;
	bool genbosons_id_isLoaded;
	vector<int> *genbosons__genpsidx_;
	TBranch *genbosons__genpsidx_branch;
	bool genbosons__genpsidx_isLoaded;
	vector<int> *genbosons_status_;
	TBranch *genbosons_status_branch;
	bool genbosons_status_isLoaded;
	vector<bool> *genbosons_fromHardProcessDecayed_;
	TBranch *genbosons_fromHardProcessDecayed_branch;
	bool genbosons_fromHardProcessDecayed_isLoaded;
	vector<bool> *genbosons_fromHardProcessFinalState_;
	TBranch *genbosons_fromHardProcessFinalState_branch;
	bool genbosons_fromHardProcessFinalState_isLoaded;
	vector<bool> *genbosons_isHardProcess_;
	TBranch *genbosons_isHardProcess_branch;
	bool genbosons_isHardProcess_isLoaded;
	vector<bool> *genbosons_isLastCopy_;
	TBranch *genbosons_isLastCopy_branch;
	bool genbosons_isLastCopy_isLoaded;
	vector<int> *genbosons_gentaudecay_;
	TBranch *genbosons_gentaudecay_branch;
	bool genbosons_gentaudecay_isLoaded;
	int	gen_nfromtbosons__;
	TBranch *gen_nfromtbosons__branch;
	bool gen_nfromtbosons__isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *genbosons_motherp4_;
	TBranch *genbosons_motherp4_branch;
	bool genbosons_motherp4_isLoaded;
	vector<int> *genbosons_motherid_;
	TBranch *genbosons_motherid_branch;
	bool genbosons_motherid_isLoaded;
	vector<int> *genbosons_motheridx_;
	TBranch *genbosons_motheridx_branch;
	bool genbosons_motheridx_isLoaded;
	vector<int> *genbosons_motherstatus_;
	TBranch *genbosons_motherstatus_branch;
	bool genbosons_motherstatus_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *genbosons_gmotherp4_;
	TBranch *genbosons_gmotherp4_branch;
	bool genbosons_gmotherp4_isLoaded;
	vector<int> *genbosons_gmotherid_;
	TBranch *genbosons_gmotherid_branch;
	bool genbosons_gmotherid_isLoaded;
	vector<int> *genbosons_gmotheridx_;
	TBranch *genbosons_gmotheridx_branch;
	bool genbosons_gmotheridx_isLoaded;
	vector<int> *genbosons_gmotherstatus_;
	TBranch *genbosons_gmotherstatus_branch;
	bool genbosons_gmotherstatus_isLoaded;
	vector<bool> *gensusy_isfromt_;
	TBranch *gensusy_isfromt_branch;
	bool gensusy_isfromt_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *gensusy_p4_;
	TBranch *gensusy_p4_branch;
	bool gensusy_p4_isLoaded;
	vector<int> *gensusy_id_;
	TBranch *gensusy_id_branch;
	bool gensusy_id_isLoaded;
	vector<int> *gensusy__genpsidx_;
	TBranch *gensusy__genpsidx_branch;
	bool gensusy__genpsidx_isLoaded;
	vector<int> *gensusy_status_;
	TBranch *gensusy_status_branch;
	bool gensusy_status_isLoaded;
	vector<bool> *gensusy_fromHardProcessDecayed_;
	TBranch *gensusy_fromHardProcessDecayed_branch;
	bool gensusy_fromHardProcessDecayed_isLoaded;
	vector<bool> *gensusy_fromHardProcessFinalState_;
	TBranch *gensusy_fromHardProcessFinalState_branch;
	bool gensusy_fromHardProcessFinalState_isLoaded;
	vector<bool> *gensusy_isHardProcess_;
	TBranch *gensusy_isHardProcess_branch;
	bool gensusy_isHardProcess_isLoaded;
	vector<bool> *gensusy_isLastCopy_;
	TBranch *gensusy_isLastCopy_branch;
	bool gensusy_isLastCopy_isLoaded;
	vector<int> *gensusy_gentaudecay_;
	TBranch *gensusy_gentaudecay_branch;
	bool gensusy_gentaudecay_isLoaded;
	int	gen_nfromtsusy__;
	TBranch *gen_nfromtsusy__branch;
	bool gen_nfromtsusy__isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *gensusy_motherp4_;
	TBranch *gensusy_motherp4_branch;
	bool gensusy_motherp4_isLoaded;
	vector<int> *gensusy_motherid_;
	TBranch *gensusy_motherid_branch;
	bool gensusy_motherid_isLoaded;
	vector<int> *gensusy_motheridx_;
	TBranch *gensusy_motheridx_branch;
	bool gensusy_motheridx_isLoaded;
	vector<int> *gensusy_motherstatus_;
	TBranch *gensusy_motherstatus_branch;
	bool gensusy_motherstatus_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *gensusy_gmotherp4_;
	TBranch *gensusy_gmotherp4_branch;
	bool gensusy_gmotherp4_isLoaded;
	vector<int> *gensusy_gmotherid_;
	TBranch *gensusy_gmotherid_branch;
	bool gensusy_gmotherid_isLoaded;
	vector<int> *gensusy_gmotheridx_;
	TBranch *gensusy_gmotheridx_branch;
	bool gensusy_gmotheridx_isLoaded;
	vector<int> *gensusy_gmotherstatus_;
	TBranch *gensusy_gmotherstatus_branch;
	bool gensusy_gmotherstatus_isLoaded;
public: 
void Init(TTree *tree);
void GetEntry(unsigned int idx); 
void LoadAllBranches(); 
	const unsigned int &run();
	const unsigned int &ls();
	const unsigned int &evt();
	const int &nvtxs();
	const int &pu_nvtxs();
	const float &pfmet();
	const float &pfmet_phi();
	const float &scale1fb();
	const float &xsec();
	const float &xsec_uncert();
	const float &kfactor();
	const float &pu_ntrue();
	const int &ngoodleps();
	const int &nvetoleps();
	const bool &	is_data();
	const string &dataset();
	const string &filename();
	const string &cms3tag();
	const unsigned int &nEvents();
	const unsigned int &nEvents_goodvtx();
	const unsigned int &nEvents_MET30();
	const unsigned int &nEvents_1goodlep();
	const unsigned int &nEvents_2goodjets();
	const int &is0lep();
	const int &is1lep();
	const int &is2lep();
	const int &isZtoNuNu();
	const int &is1lepFromW();
	const int &is1lepFromTop();
	const float &MT2W();
	const float &mindphi_met_j1_j2();
	const float &mt_met_lep();
	const float &hadronic_top_chi2();
	const float &ak4pfjets_rho();
	const float &pdf_up_weight();
	const float &pdf_down_weight();
	const vector<string> &genweightsID();
	const vector<float> &genweights();
	const float &weight_btagsf();
	const float &weight_btagsf_heavy_UP();
	const float &weight_btagsf_light_UP();
	const float &weight_btagsf_heavy_DN();
	const float &weight_btagsf_light_DN();
	const float &weight_btagsf_fastsim_UP();
	const float &weight_btagsf_fastsim_DN();
	const float &weight_lepSF();
	const float &weight_lepSF_up();
	const float &weight_lepSF_down();
	const float &weight_vetoLepSF();
	const float &weight_vetoLepSF_up();
	const float &weight_vetoLepSF_down();
	const float &weight_lepSF_fastSim();
	const float &weight_lepSF_fastSim_up();
	const float &weight_lepSF_fastSim_down();
	const float &weight_ISR();
	const float &weight_ISRup();
	const float &weight_ISRdown();
	const float &weight_PU();
	const float &weight_PUup();
	const float &weight_PUdown();
	const vector<string> &sparms_names();
	const vector<float> &sparms_values();
	const int &sparms_subProcessId();
	const float &mass_lsp();
	const float &mass_chargino();
	const float &mass_stop();
	const float &mass_gluino();
	const float &genmet();
	const float &genmet_phi();
	const float &genht();
	const bool &	PassTrackVeto();
	const bool &	PassTauVeto();
	const float &topness();
	const float &topnessMod();
	const float &Mlb_closestb();
	const int &HLT_SingleEl();
	const int &HLT_SingleMu();
	const int &HLT_MET();
	const int &HLT_DiEl();
	const int &HLT_DiMu();
	const int &HLT_MuE();
	const int &HLT_Photon90_CaloIdL_PFHT500();
	const int &HLT_Photon22_R9Id90_HE10_IsoM();
	const int &HLT_Photon30_R9Id90_HE10_IsoM();
	const int &HLT_Photon36_R9Id90_HE10_IsoM();
	const int &HLT_Photon50_R9Id90_HE10_IsoM();
	const int &HLT_Photon75_R9Id90_HE10_IsoM();
	const int &HLT_Photon90_R9Id90_HE10_IsoM();
	const int &HLT_Photon120_R9Id90_HE10_IsoM();
	const int &HLT_Photon165_R9Id90_HE10_IsoM();
	const int &HLT_Photon175();
	const int &HLT_Photon165_HE10();
	const int &nPhotons();
	const int &ph_ngoodjets();
	const int &ph_ngoodbtags();
	const float &filt_met();
	const float &filt_cscbeamhalo2015();
	const float &hardgenpt();
	const float &filt_badChargedCandidateFilter();
	const int &lep1_pdgid();
	const int &lep1_production_type();
	const float &lep1_MiniIso();
	const float &lep1_relIso();
	const bool &	lep1_passLooseID();
	const bool &	lep1_passMediumID();
	const bool &	lep1_passTightID();
	const bool &	lep1_passVeto();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &lep1_p4();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &lep1_mcp4();
	const int &lep1_mc_motherid();
	const int &lep2_pdgid();
	const int &lep2_production_type();
	const float &lep2_MiniIso();
	const float &lep2_relIso();
	const bool &	lep2_passLooseID();
	const bool &	lep2_passMediumID();
	const bool &	lep2_passTightID();
	const bool &	lep2_passVeto();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &lep2_p4();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &lep2_mcp4();
	const int &lep2_mc_motherid();
	const vector<float> &ph_sigmaIEtaEta_fill5x5();
	const vector<float> &ph_hOverE();
	const vector<float> &ph_r9();
	const vector<float> &ph_chiso();
	const vector<float> &ph_nhiso();
	const vector<float> &ph_phiso();
	const vector<bool> &ph_idCutBased();
	const vector<int> &ph_overlapJetId();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &ph_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &ph_mcp4();
	const vector<float> &ph_pt();
	const vector<float> &ph_eta();
	const vector<float> &ph_phi();
	const vector<float> &ph_mass();
	const vector<int> &ph_mcMatchId();
	const vector<float> &ph_genIso04();
	const vector<float> &ph_drMinParton();
	const int &ngoodjets();
	const int &ngoodbtags();
	const float &ak4_HT();
	const float &ak4_htratiom();
	const vector<float> &dphi_ak4pfjet_met();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &ak4pfjets_p4();
	const vector<bool> &ak4pfjets_passMEDbtag();
	const vector<float> &ak4pfjets_CSV();
	const vector<float> &ak4pfjets_mva();
	const vector<int> &ak4pfjets_parton_flavor();
	const vector<int> &ak4pfjets_hadron_flavor();
	const vector<bool> &ak4pfjets_loose_puid();
	const vector<bool> &ak4pfjets_loose_pfid();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &ak4pfjets_leadMEDbjet_p4();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &ak4pfjets_leadbtag_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &ak4genjets_p4();
	const vector<bool> &genleps_isfromt();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genleps_p4();
	const vector<int> &genleps_id();
	const vector<int> &genleps__genpsidx();
	const vector<int> &genleps_status();
	const vector<bool> &genleps_fromHardProcessDecayed();
	const vector<bool> &genleps_fromHardProcessFinalState();
	const vector<bool> &genleps_isHardProcess();
	const vector<bool> &genleps_isLastCopy();
	const vector<int> &genleps_gentaudecay();
	const int &gen_nfromtleps_();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genleps_motherp4();
	const vector<int> &genleps_motherid();
	const vector<int> &genleps_motheridx();
	const vector<int> &genleps_motherstatus();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genleps_gmotherp4();
	const vector<int> &genleps_gmotherid();
	const vector<int> &genleps_gmotheridx();
	const vector<int> &genleps_gmotherstatus();
	const vector<bool> &gennus_isfromt();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &gennus_p4();
	const vector<int> &gennus_id();
	const vector<int> &gennus__genpsidx();
	const vector<int> &gennus_status();
	const vector<bool> &gennus_fromHardProcessDecayed();
	const vector<bool> &gennus_fromHardProcessFinalState();
	const vector<bool> &gennus_isHardProcess();
	const vector<bool> &gennus_isLastCopy();
	const vector<int> &gennus_gentaudecay();
	const int &gen_nfromtnus_();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &gennus_motherp4();
	const vector<int> &gennus_motherid();
	const vector<int> &gennus_motheridx();
	const vector<int> &gennus_motherstatus();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &gennus_gmotherp4();
	const vector<int> &gennus_gmotherid();
	const vector<int> &gennus_gmotheridx();
	const vector<int> &gennus_gmotherstatus();
	const vector<bool> &genqs_isfromt();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genqs_p4();
	const vector<int> &genqs_id();
	const vector<int> &genqs__genpsidx();
	const vector<int> &genqs_status();
	const vector<bool> &genqs_fromHardProcessDecayed();
	const vector<bool> &genqs_fromHardProcessFinalState();
	const vector<bool> &genqs_isHardProcess();
	const vector<bool> &genqs_isLastCopy();
	const vector<int> &genqs_gentaudecay();
	const int &gen_nfromtqs_();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genqs_motherp4();
	const vector<int> &genqs_motherid();
	const vector<int> &genqs_motheridx();
	const vector<int> &genqs_motherstatus();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genqs_gmotherp4();
	const vector<int> &genqs_gmotherid();
	const vector<int> &genqs_gmotheridx();
	const vector<int> &genqs_gmotherstatus();
	const vector<bool> &genbosons_isfromt();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genbosons_p4();
	const vector<int> &genbosons_id();
	const vector<int> &genbosons__genpsidx();
	const vector<int> &genbosons_status();
	const vector<bool> &genbosons_fromHardProcessDecayed();
	const vector<bool> &genbosons_fromHardProcessFinalState();
	const vector<bool> &genbosons_isHardProcess();
	const vector<bool> &genbosons_isLastCopy();
	const vector<int> &genbosons_gentaudecay();
	const int &gen_nfromtbosons_();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genbosons_motherp4();
	const vector<int> &genbosons_motherid();
	const vector<int> &genbosons_motheridx();
	const vector<int> &genbosons_motherstatus();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genbosons_gmotherp4();
	const vector<int> &genbosons_gmotherid();
	const vector<int> &genbosons_gmotheridx();
	const vector<int> &genbosons_gmotherstatus();
	const vector<bool> &gensusy_isfromt();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &gensusy_p4();
	const vector<int> &gensusy_id();
	const vector<int> &gensusy__genpsidx();
	const vector<int> &gensusy_status();
	const vector<bool> &gensusy_fromHardProcessDecayed();
	const vector<bool> &gensusy_fromHardProcessFinalState();
	const vector<bool> &gensusy_isHardProcess();
	const vector<bool> &gensusy_isLastCopy();
	const vector<int> &gensusy_gentaudecay();
	const int &gen_nfromtsusy_();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &gensusy_motherp4();
	const vector<int> &gensusy_motherid();
	const vector<int> &gensusy_motheridx();
	const vector<int> &gensusy_motherstatus();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &gensusy_gmotherp4();
	const vector<int> &gensusy_gmotherid();
	const vector<int> &gensusy_gmotheridx();
	const vector<int> &gensusy_gmotherstatus();

  static void progress( int nEventsTotal, int nEventsChain );
};

#ifndef __CINT__
extern V80_00 v80_00;
#endif

namespace V80_00_np {
	const unsigned int &run();
	const unsigned int &ls();
	const unsigned int &evt();
	const int &nvtxs();
	const int &pu_nvtxs();
	const float &pfmet();
	const float &pfmet_phi();
	const float &scale1fb();
	const float &xsec();
	const float &xsec_uncert();
	const float &kfactor();
	const float &pu_ntrue();
	const int &ngoodleps();
	const int &nvetoleps();
	const bool &is_data();
	const string &dataset();
	const string &filename();
	const string &cms3tag();
	const unsigned int &nEvents();
	const unsigned int &nEvents_goodvtx();
	const unsigned int &nEvents_MET30();
	const unsigned int &nEvents_1goodlep();
	const unsigned int &nEvents_2goodjets();
	const int &is0lep();
	const int &is1lep();
	const int &is2lep();
	const int &isZtoNuNu();
	const int &is1lepFromW();
	const int &is1lepFromTop();
	const float &MT2W();
	const float &mindphi_met_j1_j2();
	const float &mt_met_lep();
	const float &hadronic_top_chi2();
	const float &ak4pfjets_rho();
	const float &pdf_up_weight();
	const float &pdf_down_weight();
	const vector<string> &genweightsID();
	const vector<float> &genweights();
	const float &weight_btagsf();
	const float &weight_btagsf_heavy_UP();
	const float &weight_btagsf_light_UP();
	const float &weight_btagsf_heavy_DN();
	const float &weight_btagsf_light_DN();
	const float &weight_btagsf_fastsim_UP();
	const float &weight_btagsf_fastsim_DN();
	const float &weight_lepSF();
	const float &weight_lepSF_up();
	const float &weight_lepSF_down();
	const float &weight_vetoLepSF();
	const float &weight_vetoLepSF_up();
	const float &weight_vetoLepSF_down();
	const float &weight_lepSF_fastSim();
	const float &weight_lepSF_fastSim_up();
	const float &weight_lepSF_fastSim_down();
	const float &weight_ISR();
	const float &weight_ISRup();
	const float &weight_ISRdown();
	const float &weight_PU();
	const float &weight_PUup();
	const float &weight_PUdown();
	const vector<string> &sparms_names();
	const vector<float> &sparms_values();
	const int &sparms_subProcessId();
	const float &mass_lsp();
	const float &mass_chargino();
	const float &mass_stop();
	const float &mass_gluino();
	const float &genmet();
	const float &genmet_phi();
	const float &genht();
	const bool &PassTrackVeto();
	const bool &PassTauVeto();
	const float &topness();
	const float &topnessMod();
	const float &Mlb_closestb();
	const int &HLT_SingleEl();
	const int &HLT_SingleMu();
	const int &HLT_MET();
	const int &HLT_DiEl();
	const int &HLT_DiMu();
	const int &HLT_MuE();
	const int &HLT_Photon90_CaloIdL_PFHT500();
	const int &HLT_Photon22_R9Id90_HE10_IsoM();
	const int &HLT_Photon30_R9Id90_HE10_IsoM();
	const int &HLT_Photon36_R9Id90_HE10_IsoM();
	const int &HLT_Photon50_R9Id90_HE10_IsoM();
	const int &HLT_Photon75_R9Id90_HE10_IsoM();
	const int &HLT_Photon90_R9Id90_HE10_IsoM();
	const int &HLT_Photon120_R9Id90_HE10_IsoM();
	const int &HLT_Photon165_R9Id90_HE10_IsoM();
	const int &HLT_Photon175();
	const int &HLT_Photon165_HE10();
	const int &nPhotons();
	const int &ph_ngoodjets();
	const int &ph_ngoodbtags();
	const float &filt_met();
	const float &filt_cscbeamhalo2015();
	const float &hardgenpt();
	const float &filt_badChargedCandidateFilter();
	const int &lep1_pdgid();
	const int &lep1_production_type();
	const float &lep1_MiniIso();
	const float &lep1_relIso();
	const bool &lep1_passLooseID();
	const bool &lep1_passMediumID();
	const bool &lep1_passTightID();
	const bool &lep1_passVeto();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &lep1_p4();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &lep1_mcp4();
	const int &lep1_mc_motherid();
	const int &lep2_pdgid();
	const int &lep2_production_type();
	const float &lep2_MiniIso();
	const float &lep2_relIso();
	const bool &lep2_passLooseID();
	const bool &lep2_passMediumID();
	const bool &lep2_passTightID();
	const bool &lep2_passVeto();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &lep2_p4();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &lep2_mcp4();
	const int &lep2_mc_motherid();
	const vector<float> &ph_sigmaIEtaEta_fill5x5();
	const vector<float> &ph_hOverE();
	const vector<float> &ph_r9();
	const vector<float> &ph_chiso();
	const vector<float> &ph_nhiso();
	const vector<float> &ph_phiso();
	const vector<bool> &ph_idCutBased();
	const vector<int> &ph_overlapJetId();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &ph_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &ph_mcp4();
	const vector<float> &ph_pt();
	const vector<float> &ph_eta();
	const vector<float> &ph_phi();
	const vector<float> &ph_mass();
	const vector<int> &ph_mcMatchId();
	const vector<float> &ph_genIso04();
	const vector<float> &ph_drMinParton();
	const int &ngoodjets();
	const int &ngoodbtags();
	const float &ak4_HT();
	const float &ak4_htratiom();
	const vector<float> &dphi_ak4pfjet_met();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &ak4pfjets_p4();
	const vector<bool> &ak4pfjets_passMEDbtag();
	const vector<float> &ak4pfjets_CSV();
	const vector<float> &ak4pfjets_mva();
	const vector<int> &ak4pfjets_parton_flavor();
	const vector<int> &ak4pfjets_hadron_flavor();
	const vector<bool> &ak4pfjets_loose_puid();
	const vector<bool> &ak4pfjets_loose_pfid();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &ak4pfjets_leadMEDbjet_p4();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &ak4pfjets_leadbtag_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &ak4genjets_p4();
	const vector<bool> &genleps_isfromt();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genleps_p4();
	const vector<int> &genleps_id();
	const vector<int> &genleps__genpsidx();
	const vector<int> &genleps_status();
	const vector<bool> &genleps_fromHardProcessDecayed();
	const vector<bool> &genleps_fromHardProcessFinalState();
	const vector<bool> &genleps_isHardProcess();
	const vector<bool> &genleps_isLastCopy();
	const vector<int> &genleps_gentaudecay();
	const int &gen_nfromtleps_();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genleps_motherp4();
	const vector<int> &genleps_motherid();
	const vector<int> &genleps_motheridx();
	const vector<int> &genleps_motherstatus();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genleps_gmotherp4();
	const vector<int> &genleps_gmotherid();
	const vector<int> &genleps_gmotheridx();
	const vector<int> &genleps_gmotherstatus();
	const vector<bool> &gennus_isfromt();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &gennus_p4();
	const vector<int> &gennus_id();
	const vector<int> &gennus__genpsidx();
	const vector<int> &gennus_status();
	const vector<bool> &gennus_fromHardProcessDecayed();
	const vector<bool> &gennus_fromHardProcessFinalState();
	const vector<bool> &gennus_isHardProcess();
	const vector<bool> &gennus_isLastCopy();
	const vector<int> &gennus_gentaudecay();
	const int &gen_nfromtnus_();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &gennus_motherp4();
	const vector<int> &gennus_motherid();
	const vector<int> &gennus_motheridx();
	const vector<int> &gennus_motherstatus();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &gennus_gmotherp4();
	const vector<int> &gennus_gmotherid();
	const vector<int> &gennus_gmotheridx();
	const vector<int> &gennus_gmotherstatus();
	const vector<bool> &genqs_isfromt();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genqs_p4();
	const vector<int> &genqs_id();
	const vector<int> &genqs__genpsidx();
	const vector<int> &genqs_status();
	const vector<bool> &genqs_fromHardProcessDecayed();
	const vector<bool> &genqs_fromHardProcessFinalState();
	const vector<bool> &genqs_isHardProcess();
	const vector<bool> &genqs_isLastCopy();
	const vector<int> &genqs_gentaudecay();
	const int &gen_nfromtqs_();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genqs_motherp4();
	const vector<int> &genqs_motherid();
	const vector<int> &genqs_motheridx();
	const vector<int> &genqs_motherstatus();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genqs_gmotherp4();
	const vector<int> &genqs_gmotherid();
	const vector<int> &genqs_gmotheridx();
	const vector<int> &genqs_gmotherstatus();
	const vector<bool> &genbosons_isfromt();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genbosons_p4();
	const vector<int> &genbosons_id();
	const vector<int> &genbosons__genpsidx();
	const vector<int> &genbosons_status();
	const vector<bool> &genbosons_fromHardProcessDecayed();
	const vector<bool> &genbosons_fromHardProcessFinalState();
	const vector<bool> &genbosons_isHardProcess();
	const vector<bool> &genbosons_isLastCopy();
	const vector<int> &genbosons_gentaudecay();
	const int &gen_nfromtbosons_();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genbosons_motherp4();
	const vector<int> &genbosons_motherid();
	const vector<int> &genbosons_motheridx();
	const vector<int> &genbosons_motherstatus();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genbosons_gmotherp4();
	const vector<int> &genbosons_gmotherid();
	const vector<int> &genbosons_gmotheridx();
	const vector<int> &genbosons_gmotherstatus();
	const vector<bool> &gensusy_isfromt();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &gensusy_p4();
	const vector<int> &gensusy_id();
	const vector<int> &gensusy__genpsidx();
	const vector<int> &gensusy_status();
	const vector<bool> &gensusy_fromHardProcessDecayed();
	const vector<bool> &gensusy_fromHardProcessFinalState();
	const vector<bool> &gensusy_isHardProcess();
	const vector<bool> &gensusy_isLastCopy();
	const vector<int> &gensusy_gentaudecay();
	const int &gen_nfromtsusy_();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &gensusy_motherp4();
	const vector<int> &gensusy_motherid();
	const vector<int> &gensusy_motheridx();
	const vector<int> &gensusy_motherstatus();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &gensusy_gmotherp4();
	const vector<int> &gensusy_gmotherid();
	const vector<int> &gensusy_gmotheridx();
	const vector<int> &gensusy_gmotherstatus();
}
#endif
