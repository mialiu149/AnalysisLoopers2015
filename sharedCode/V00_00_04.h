// -*- C++ -*-
#ifndef V00_00_04_H
#define V00_00_04_H
#include "Math/LorentzVector.h"
#include "Math/Point3D.h"
#include "TMath.h"
#include "TBranch.h"
#include "TTree.h"
#include "TH1F.h"
#include "TFile.h"
#include "TBits.h"
#include <vector> 
#include <unistd.h> 
typedef ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > LorentzVector;

// Generated with the command
// makeCMS3ClassFiles("chain files", "t", "V00_00_04", "V00_00_04_np", "v00_00_04")

using namespace std; 
class V00_00_04 {
private: 
protected: 
	unsigned int index;
	unsigned int	run_;
	TBranch *run_branch;
	bool run_isLoaded;
	unsigned int	ls_;
	TBranch *ls_branch;
	bool ls_isLoaded;
	unsigned int	evt_;
	TBranch *evt_branch;
	bool evt_isLoaded;
	int	nvtxs_;
	TBranch *nvtxs_branch;
	bool nvtxs_isLoaded;
	int	firstGoodVtxIdx_;
	TBranch *firstGoodVtxIdx_branch;
	bool firstGoodVtxIdx_isLoaded;
	int	firstVtx_isfake_;
	TBranch *firstVtx_isfake_branch;
	bool firstVtx_isfake_isLoaded;
	float	firstVtx_ndof_;
	TBranch *firstVtx_ndof_branch;
	bool firstVtx_ndof_isLoaded;
	float	firstVtx_posRho_;
	TBranch *firstVtx_posRho_branch;
	bool firstVtx_posRho_isLoaded;
	float	firstVtx_posZ_;
	TBranch *firstVtx_posZ_branch;
	bool firstVtx_posZ_isLoaded;
	ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *firstVtx_posp4_;
	TBranch *firstVtx_posp4_branch;
	bool firstVtx_posp4_isLoaded;
	int	pu_nvtxs_;
	TBranch *pu_nvtxs_branch;
	bool pu_nvtxs_isLoaded;
	float	pfmet_;
	TBranch *pfmet_branch;
	bool pfmet_isLoaded;
	float	pfmet_phi_;
	TBranch *pfmet_phi_branch;
	bool pfmet_phi_isLoaded;
	float	calomet_;
	TBranch *calomet_branch;
	bool calomet_isLoaded;
	float	calomet_phi_;
	TBranch *calomet_phi_branch;
	bool calomet_phi_isLoaded;
	float	filt_cscbeamhalo_;
	TBranch *filt_cscbeamhalo_branch;
	bool filt_cscbeamhalo_isLoaded;
	float	filt_ecallaser_;
	TBranch *filt_ecallaser_branch;
	bool filt_ecallaser_isLoaded;
	float	filt_ecaltp_;
	TBranch *filt_ecaltp_branch;
	bool filt_ecaltp_isLoaded;
	float	filt_eebadsc_;
	TBranch *filt_eebadsc_branch;
	bool filt_eebadsc_isLoaded;
	float	filt_goodvtx_;
	TBranch *filt_goodvtx_branch;
	bool filt_goodvtx_isLoaded;
	float	filt_badevents_;
	TBranch *filt_badevents_branch;
	bool filt_badevents_isLoaded;
	float	filt_hbhenoise_;
	TBranch *filt_hbhenoise_branch;
	bool filt_hbhenoise_isLoaded;
	float	filt_hcallaser_;
	TBranch *filt_hcallaser_branch;
	bool filt_hcallaser_isLoaded;
	float	filt_met_;
	TBranch *filt_met_branch;
	bool filt_met_isLoaded;
	float	filt_trkfail_;
	TBranch *filt_trkfail_branch;
	bool filt_trkfail_isLoaded;
	float	filt_trkPOG_;
	TBranch *filt_trkPOG_branch;
	bool filt_trkPOG_isLoaded;
	float	filt_trkPOG_tmc_;
	TBranch *filt_trkPOG_tmc_branch;
	bool filt_trkPOG_tmc_isLoaded;
	float	filt_trkPOG_tms_;
	TBranch *filt_trkPOG_tms_branch;
	bool filt_trkPOG_tms_isLoaded;
	float	filt_eff_;
	TBranch *filt_eff_branch;
	bool filt_eff_isLoaded;
	float	scale1fb_;
	TBranch *scale1fb_branch;
	bool scale1fb_isLoaded;
	float	xsec_;
	TBranch *xsec_branch;
	bool xsec_isLoaded;
	float	kfactor_;
	TBranch *kfactor_branch;
	bool kfactor_isLoaded;
	float	pu_ntrue_;
	TBranch *pu_ntrue_branch;
	bool pu_ntrue_isLoaded;
	int	ngoodleps_;
	TBranch *ngoodleps_branch;
	bool ngoodleps_isLoaded;
	int	nlooseleps_;
	TBranch *nlooseleps_branch;
	bool nlooseleps_isLoaded;
	int	nvetoleps_;
	TBranch *nvetoleps_branch;
	bool nvetoleps_isLoaded;
	bool	is_data_;
	TBranch *is_data_branch;
	bool is_data_isLoaded;
	string *dataset_;
	TBranch *dataset_branch;
	bool dataset_isLoaded;
	string *filename_;
	TBranch *filename_branch;
	bool filename_isLoaded;
	string *cms3tag_;
	TBranch *cms3tag_branch;
	bool cms3tag_isLoaded;
	unsigned int	nEvents_;
	TBranch *nEvents_branch;
	bool nEvents_isLoaded;
	unsigned int	nEvents_goodvtx_;
	TBranch *nEvents_goodvtx_branch;
	bool nEvents_goodvtx_isLoaded;
	unsigned int	nEvents_MET30_;
	TBranch *nEvents_MET30_branch;
	bool nEvents_MET30_isLoaded;
	unsigned int	nEvents_1goodlep_;
	TBranch *nEvents_1goodlep_branch;
	bool nEvents_1goodlep_isLoaded;
	unsigned int	nEvents_2goodjets_;
	TBranch *nEvents_2goodjets_branch;
	bool nEvents_2goodjets_isLoaded;
	int	genlepsfromtop_;
	TBranch *genlepsfromtop_branch;
	bool genlepsfromtop_isLoaded;
	int	genLepsHardProcess_;
	TBranch *genLepsHardProcess_branch;
	bool genLepsHardProcess_isLoaded;
	int	genNusHardProcess_;
	TBranch *genNusHardProcess_branch;
	bool genNusHardProcess_isLoaded;
	int	is0lep_;
	TBranch *is0lep_branch;
	bool is0lep_isLoaded;
	int	is1lep_;
	TBranch *is1lep_branch;
	bool is1lep_isLoaded;
	int	is2lep_;
	TBranch *is2lep_branch;
	bool is2lep_isLoaded;
	int	isZtoNuNu_;
	TBranch *isZtoNuNu_branch;
	bool isZtoNuNu_isLoaded;
	int	is1lepFromW_;
	TBranch *is1lepFromW_branch;
	bool is1lepFromW_isLoaded;
	int	is1lepFromTop_;
	TBranch *is1lepFromTop_branch;
	bool is1lepFromTop_isLoaded;
	float	MT2W_;
	TBranch *MT2W_branch;
	bool MT2W_isLoaded;
	float	MT2W_lep2_;
	TBranch *MT2W_lep2_branch;
	bool MT2W_lep2_isLoaded;
	float	mindphi_met_j1_j2_;
	TBranch *mindphi_met_j1_j2_branch;
	bool mindphi_met_j1_j2_isLoaded;
	float	mt_met_lep_;
	TBranch *mt_met_lep_branch;
	bool mt_met_lep_isLoaded;
	float	mt_met_lep2_;
	TBranch *mt_met_lep2_branch;
	bool mt_met_lep2_isLoaded;
	float	dR_lep_leadb_;
	TBranch *dR_lep_leadb_branch;
	bool dR_lep_leadb_isLoaded;
	float	dR_lep2_leadb_;
	TBranch *dR_lep2_leadb_branch;
	bool dR_lep2_leadb_isLoaded;
	float	hadronic_top_chi2_;
	TBranch *hadronic_top_chi2_branch;
	bool hadronic_top_chi2_isLoaded;
	float	dphi_Wlep_;
	TBranch *dphi_Wlep_branch;
	bool dphi_Wlep_isLoaded;
	float	MET_over_sqrtHT_;
	TBranch *MET_over_sqrtHT_branch;
	bool MET_over_sqrtHT_isLoaded;
	float	ak4pfjets_rho_;
	TBranch *ak4pfjets_rho_branch;
	bool ak4pfjets_rho_isLoaded;
	vector<string> *genweightsID_;
	TBranch *genweightsID_branch;
	bool genweightsID_isLoaded;
	vector<float> *genweights_;
	TBranch *genweights_branch;
	bool genweights_isLoaded;
	vector<string> *sparms_names_;
	TBranch *sparms_names_branch;
	bool sparms_names_isLoaded;
	float	sparms_filterEfficiency_;
	TBranch *sparms_filterEfficiency_branch;
	bool sparms_filterEfficiency_isLoaded;
	float	sparms_pdfScale_;
	TBranch *sparms_pdfScale_branch;
	bool sparms_pdfScale_isLoaded;
	float	sparms_pdfWeight1_;
	TBranch *sparms_pdfWeight1_branch;
	bool sparms_pdfWeight1_isLoaded;
	float	sparms_pdfWeight2_;
	TBranch *sparms_pdfWeight2_branch;
	bool sparms_pdfWeight2_isLoaded;
	float	sparms_weight_;
	TBranch *sparms_weight_branch;
	bool sparms_weight_isLoaded;
	float	sparms_xsec_;
	TBranch *sparms_xsec_branch;
	bool sparms_xsec_isLoaded;
	vector<float> *sparms_values_;
	TBranch *sparms_values_branch;
	bool sparms_values_isLoaded;
	int	sparms_subProcessId_;
	TBranch *sparms_subProcessId_branch;
	bool sparms_subProcessId_isLoaded;
	float	mass_lsp_;
	TBranch *mass_lsp_branch;
	bool mass_lsp_isLoaded;
	float	mass_chargino_;
	TBranch *mass_chargino_branch;
	bool mass_chargino_isLoaded;
	float	mass_stop_;
	TBranch *mass_stop_branch;
	bool mass_stop_isLoaded;
	float	genmet_;
	TBranch *genmet_branch;
	bool genmet_isLoaded;
	float	genmet_phi_;
	TBranch *genmet_phi_branch;
	bool genmet_phi_isLoaded;
	float	genht_;
	TBranch *genht_branch;
	bool genht_isLoaded;
	bool	PassTrackVeto_;
	TBranch *PassTrackVeto_branch;
	bool PassTrackVeto_isLoaded;
	bool	PassTrackVeto_v2_;
	TBranch *PassTrackVeto_v2_branch;
	bool PassTrackVeto_v2_isLoaded;
	bool	PassTrackVeto_v3_;
	TBranch *PassTrackVeto_v3_branch;
	bool PassTrackVeto_v3_isLoaded;
	bool	PassTauVeto_;
	TBranch *PassTauVeto_branch;
	bool PassTauVeto_isLoaded;
	float	EA_all_rho_;
	TBranch *EA_all_rho_branch;
	bool EA_all_rho_isLoaded;
	float	EA_allcalo_rho_;
	TBranch *EA_allcalo_rho_branch;
	bool EA_allcalo_rho_isLoaded;
	float	EA_centralcalo_rho_;
	TBranch *EA_centralcalo_rho_branch;
	bool EA_centralcalo_rho_isLoaded;
	float	EA_centralchargedpileup_rho_;
	TBranch *EA_centralchargedpileup_rho_branch;
	bool EA_centralchargedpileup_rho_isLoaded;
	float	EA_centralneutral_rho_;
	TBranch *EA_centralneutral_rho_branch;
	bool EA_centralneutral_rho_isLoaded;
	float	topness_;
	TBranch *topness_branch;
	bool topness_isLoaded;
	float	topness_lep2_;
	TBranch *topness_lep2_branch;
	bool topness_lep2_isLoaded;
	float	topnessMod_;
	TBranch *topnessMod_branch;
	bool topnessMod_isLoaded;
	float	topnessMod_lep2_;
	TBranch *topnessMod_lep2_branch;
	bool topnessMod_lep2_isLoaded;
	float	MT2_lb_b_;
	TBranch *MT2_lb_b_branch;
	bool MT2_lb_b_isLoaded;
	float	MT2_lb_b_lep2_;
	TBranch *MT2_lb_b_lep2_branch;
	bool MT2_lb_b_lep2_isLoaded;
	float	MT2_lb_b_mass_;
	TBranch *MT2_lb_b_mass_branch;
	bool MT2_lb_b_mass_isLoaded;
	float	MT2_lb_b_mass_lep2_;
	TBranch *MT2_lb_b_mass_lep2_branch;
	bool MT2_lb_b_mass_lep2_isLoaded;
	float	MT2_lb_bqq_;
	TBranch *MT2_lb_bqq_branch;
	bool MT2_lb_bqq_isLoaded;
	float	MT2_lb_bqq_lep2_;
	TBranch *MT2_lb_bqq_lep2_branch;
	bool MT2_lb_bqq_lep2_isLoaded;
	float	MT2_lb_bqq_mass_;
	TBranch *MT2_lb_bqq_mass_branch;
	bool MT2_lb_bqq_mass_isLoaded;
	float	MT2_lb_bqq_mass_lep2_;
	TBranch *MT2_lb_bqq_mass_lep2_branch;
	bool MT2_lb_bqq_mass_lep2_isLoaded;
	float	Mlb_closestb_;
	TBranch *Mlb_closestb_branch;
	bool Mlb_closestb_isLoaded;
	float	Mlb_lead_bdiscr_;
	TBranch *Mlb_lead_bdiscr_branch;
	bool Mlb_lead_bdiscr_isLoaded;
	float	Mlb_closestb_lep2_;
	TBranch *Mlb_closestb_lep2_branch;
	bool Mlb_closestb_lep2_isLoaded;
	float	Mlb_lead_bdiscr_lep2_;
	TBranch *Mlb_lead_bdiscr_lep2_branch;
	bool Mlb_lead_bdiscr_lep2_isLoaded;
	float	Mjjj_;
	TBranch *Mjjj_branch;
	bool Mjjj_isLoaded;
	float	Mjjj_lep2_;
	TBranch *Mjjj_lep2_branch;
	bool Mjjj_lep2_isLoaded;
	int	HLT_SingleEl_;
	TBranch *HLT_SingleEl_branch;
	bool HLT_SingleEl_isLoaded;
	int	HLT_SingleMu_;
	TBranch *HLT_SingleMu_branch;
	bool HLT_SingleMu_isLoaded;
	int	HLT_MET170_;
	TBranch *HLT_MET170_branch;
	bool HLT_MET170_isLoaded;
	int	HLT_MET120Btag_;
	TBranch *HLT_MET120Btag_branch;
	bool HLT_MET120Btag_isLoaded;
	int	HLT_MET120Mu5_;
	TBranch *HLT_MET120Mu5_branch;
	bool HLT_MET120Mu5_isLoaded;
	int	HLT_HT350MET120_;
	TBranch *HLT_HT350MET120_branch;
	bool HLT_HT350MET120_isLoaded;
	int	HLT_DiEl_;
	TBranch *HLT_DiEl_branch;
	bool HLT_DiEl_isLoaded;
	int	HLT_DiEl_17_12_;
	TBranch *HLT_DiEl_17_12_branch;
	bool HLT_DiEl_17_12_isLoaded;
	int	HLT_DiMu_;
	TBranch *HLT_DiMu_branch;
	bool HLT_DiMu_isLoaded;
	int	HLT_Mu8El17_;
	TBranch *HLT_Mu8El17_branch;
	bool HLT_Mu8El17_isLoaded;
	int	HLT_Mu8El23_;
	TBranch *HLT_Mu8El23_branch;
	bool HLT_Mu8El23_isLoaded;
	int	HLT_Mu17El12_;
	TBranch *HLT_Mu17El12_branch;
	bool HLT_Mu17El12_isLoaded;
	int	HLT_Mu23El12_;
	TBranch *HLT_Mu23El12_branch;
	bool HLT_Mu23El12_isLoaded;
	int	HLT_SingleEl23_;
	TBranch *HLT_SingleEl23_branch;
	bool HLT_SingleEl23_isLoaded;
	int	HLT_SingleEl27_;
	TBranch *HLT_SingleEl27_branch;
	bool HLT_SingleEl27_isLoaded;
	int	HLT_SingleEl27Tight_;
	TBranch *HLT_SingleEl27Tight_branch;
	bool HLT_SingleEl27Tight_isLoaded;
	int	HLT_SingleElTight_;
	TBranch *HLT_SingleElTight_branch;
	bool HLT_SingleElTight_isLoaded;
	int	HLT_SingleElHT200_;
	TBranch *HLT_SingleElHT200_branch;
	bool HLT_SingleElHT200_isLoaded;
	int	HLT_SingleMuNoEta_;
	TBranch *HLT_SingleMuNoEta_branch;
	bool HLT_SingleMuNoEta_isLoaded;
	int	HLT_SingleMuNoIso_;
	TBranch *HLT_SingleMuNoIso_branch;
	bool HLT_SingleMuNoIso_isLoaded;
	int	HLT_SingleMuNoIsoNoEta_;
	TBranch *HLT_SingleMuNoIsoNoEta_branch;
	bool HLT_SingleMuNoIsoNoEta_isLoaded;
	int	HLT_Mu6HT200MET100_;
	TBranch *HLT_Mu6HT200MET100_branch;
	bool HLT_Mu6HT200MET100_isLoaded;
	int	HLT_HT350MET100_;
	TBranch *HLT_HT350MET100_branch;
	bool HLT_HT350MET100_isLoaded;
	int	HLT_SingleMu17_;
	TBranch *HLT_SingleMu17_branch;
	bool HLT_SingleMu17_isLoaded;
	int	HLT_SingleMu20_;
	TBranch *HLT_SingleMu20_branch;
	bool HLT_SingleMu20_isLoaded;
	int	HLT_SingleMu24_;
	TBranch *HLT_SingleMu24_branch;
	bool HLT_SingleMu24_isLoaded;
	int	HLT_MonoCentPFJet80_METNoMu90_MHTNoMu90_IDTight_;
	TBranch *HLT_MonoCentPFJet80_METNoMu90_MHTNoMu90_IDTight_branch;
	bool HLT_MonoCentPFJet80_METNoMu90_MHTNoMu90_IDTight_isLoaded;
	int	HLT_MET90_MHT90_IDTight_;
	TBranch *HLT_MET90_MHT90_IDTight_branch;
	bool HLT_MET90_MHT90_IDTight_isLoaded;
	int	HLT_METNoMu90_NoiseCleaned_MHTNoMu90_IDTight_;
	TBranch *HLT_METNoMu90_NoiseCleaned_MHTNoMu90_IDTight_branch;
	bool HLT_METNoMu90_NoiseCleaned_MHTNoMu90_IDTight_isLoaded;
	int	HLT_Photon90_CaloIdL_PFHT500_;
	TBranch *HLT_Photon90_CaloIdL_PFHT500_branch;
	bool HLT_Photon90_CaloIdL_PFHT500_isLoaded;
	int	HLT_Photon165_R9Id90_HE10_IsoM_;
	TBranch *HLT_Photon165_R9Id90_HE10_IsoM_branch;
	bool HLT_Photon165_R9Id90_HE10_IsoM_isLoaded;
	int	HLT_Photon175_;
	TBranch *HLT_Photon175_branch;
	bool HLT_Photon175_isLoaded;
	int	HLT_Photon165_HE10_;
	TBranch *HLT_Photon165_HE10_branch;
	bool HLT_Photon165_HE10_isLoaded;
	float	pu_weight_;
	TBranch *pu_weight_branch;
	bool pu_weight_isLoaded;
	float	lep_sf_;
	TBranch *lep_sf_branch;
	bool lep_sf_isLoaded;
	float	btag_sf_;
	TBranch *btag_sf_branch;
	bool btag_sf_isLoaded;
	float	HLT_SingleEl_eff_;
	TBranch *HLT_SingleEl_eff_branch;
	bool HLT_SingleEl_eff_isLoaded;
	float	HLT_SingleMu_eff_;
	TBranch *HLT_SingleMu_eff_branch;
	bool HLT_SingleMu_eff_isLoaded;
	int	nPhotons_;
	TBranch *nPhotons_branch;
	bool nPhotons_isLoaded;
	int	ph_selectedidx_;
	TBranch *ph_selectedidx_branch;
	bool ph_selectedidx_isLoaded;
	int	ph_ngoodjets_;
	TBranch *ph_ngoodjets_branch;
	bool ph_ngoodjets_isLoaded;
	int	ph_ngoodbtags_;
	TBranch *ph_ngoodbtags_branch;
	bool ph_ngoodbtags_isLoaded;
	float	ph_met_;
	TBranch *ph_met_branch;
	bool ph_met_isLoaded;
	float	ph_met_phi_;
	TBranch *ph_met_phi_branch;
	bool ph_met_phi_isLoaded;
	float	ph_HT_;
	TBranch *ph_HT_branch;
	bool ph_HT_isLoaded;
	float	ph_htssm_;
	TBranch *ph_htssm_branch;
	bool ph_htssm_isLoaded;
	float	ph_htosm_;
	TBranch *ph_htosm_branch;
	bool ph_htosm_isLoaded;
	float	ph_htratiom_;
	TBranch *ph_htratiom_branch;
	bool ph_htratiom_isLoaded;
	float	ph_mt_met_lep_;
	TBranch *ph_mt_met_lep_branch;
	bool ph_mt_met_lep_isLoaded;
	float	ph_dphi_Wlep_;
	TBranch *ph_dphi_Wlep_branch;
	bool ph_dphi_Wlep_isLoaded;
	float	ph_MT2W_;
	TBranch *ph_MT2W_branch;
	bool ph_MT2W_isLoaded;
	float	ph_topness_;
	TBranch *ph_topness_branch;
	bool ph_topness_isLoaded;
	float	ph_topnessMod_;
	TBranch *ph_topnessMod_branch;
	bool ph_topnessMod_isLoaded;
	float	ph_MT2_lb_b_mass_;
	TBranch *ph_MT2_lb_b_mass_branch;
	bool ph_MT2_lb_b_mass_isLoaded;
	float	ph_MT2_lb_b_;
	TBranch *ph_MT2_lb_b_branch;
	bool ph_MT2_lb_b_isLoaded;
	float	ph_MT2_lb_bqq_mass_;
	TBranch *ph_MT2_lb_bqq_mass_branch;
	bool ph_MT2_lb_bqq_mass_isLoaded;
	float	ph_MT2_lb_bqq_;
	TBranch *ph_MT2_lb_bqq_branch;
	bool ph_MT2_lb_bqq_isLoaded;
	float	ph_hadronic_top_chi2_;
	TBranch *ph_hadronic_top_chi2_branch;
	bool ph_hadronic_top_chi2_isLoaded;
	float	ph_mindphi_met_j1_j2_;
	TBranch *ph_mindphi_met_j1_j2_branch;
	bool ph_mindphi_met_j1_j2_isLoaded;
	float	ph_Mlb_lead_bdiscr_;
	TBranch *ph_Mlb_lead_bdiscr_branch;
	bool ph_Mlb_lead_bdiscr_isLoaded;
	float	ph_dR_lep_leadb_;
	TBranch *ph_dR_lep_leadb_branch;
	bool ph_dR_lep_leadb_isLoaded;
	float	ph_Mlb_closestb_;
	TBranch *ph_Mlb_closestb_branch;
	bool ph_Mlb_closestb_isLoaded;
	float	ph_Mjjj_;
	TBranch *ph_Mjjj_branch;
	bool ph_Mjjj_isLoaded;
	int	Zll_idl1_;
	TBranch *Zll_idl1_branch;
	bool Zll_idl1_isLoaded;
	int	Zll_idl2_;
	TBranch *Zll_idl2_branch;
	bool Zll_idl2_isLoaded;
	ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *Zll_p4l1_;
	TBranch *Zll_p4l1_branch;
	bool Zll_p4l1_isLoaded;
	ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *Zll_p4l2_;
	TBranch *Zll_p4l2_branch;
	bool Zll_p4l2_isLoaded;
	bool	Zll_OS_;
	TBranch *Zll_OS_branch;
	bool Zll_OS_isLoaded;
	bool	Zll_SF_;
	TBranch *Zll_SF_branch;
	bool Zll_SF_isLoaded;
	bool	Zll_isZmass_;
	TBranch *Zll_isZmass_branch;
	bool Zll_isZmass_isLoaded;
	float	Zll_M_;
	TBranch *Zll_M_branch;
	bool Zll_M_isLoaded;
	ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *Zll_p4_;
	TBranch *Zll_p4_branch;
	bool Zll_p4_isLoaded;
	int	Zll_selLep_;
	TBranch *Zll_selLep_branch;
	bool Zll_selLep_isLoaded;
	float	Zll_met_;
	TBranch *Zll_met_branch;
	bool Zll_met_isLoaded;
	float	Zll_met_phi_;
	TBranch *Zll_met_phi_branch;
	bool Zll_met_phi_isLoaded;
	float	Zll_mindphi_met_j1_j2_;
	TBranch *Zll_mindphi_met_j1_j2_branch;
	bool Zll_mindphi_met_j1_j2_isLoaded;
	float	Zll_mt_met_lep_;
	TBranch *Zll_mt_met_lep_branch;
	bool Zll_mt_met_lep_isLoaded;
	float	Zll_dphi_Wlep_;
	TBranch *Zll_dphi_Wlep_branch;
	bool Zll_dphi_Wlep_isLoaded;
	float	Zll_MT2W_;
	TBranch *Zll_MT2W_branch;
	bool Zll_MT2W_isLoaded;
	float	Zll_topness_;
	TBranch *Zll_topness_branch;
	bool Zll_topness_isLoaded;
	float	Zll_topnessMod_;
	TBranch *Zll_topnessMod_branch;
	bool Zll_topnessMod_isLoaded;
	float	Zll_MT2_lb_b_mass_;
	TBranch *Zll_MT2_lb_b_mass_branch;
	bool Zll_MT2_lb_b_mass_isLoaded;
	float	Zll_MT2_lb_b_;
	TBranch *Zll_MT2_lb_b_branch;
	bool Zll_MT2_lb_b_isLoaded;
	float	Zll_MT2_lb_bqq_mass_;
	TBranch *Zll_MT2_lb_bqq_mass_branch;
	bool Zll_MT2_lb_bqq_mass_isLoaded;
	float	Zll_MT2_lb_bqq_;
	TBranch *Zll_MT2_lb_bqq_branch;
	bool Zll_MT2_lb_bqq_isLoaded;
	bool	lep1_is_mu_;
	TBranch *lep1_is_mu_branch;
	bool lep1_is_mu_isLoaded;
	bool	lep1_is_el_;
	TBranch *lep1_is_el_branch;
	bool lep1_is_el_isLoaded;
	int	lep1_charge_;
	TBranch *lep1_charge_branch;
	bool lep1_charge_isLoaded;
	int	lep1_pdgid_;
	TBranch *lep1_pdgid_branch;
	bool lep1_pdgid_isLoaded;
	int	lep1_type_;
	TBranch *lep1_type_branch;
	bool lep1_type_isLoaded;
	int	lep1_production_type_;
	TBranch *lep1_production_type_branch;
	bool lep1_production_type_isLoaded;
	float	lep1_d0_;
	TBranch *lep1_d0_branch;
	bool lep1_d0_isLoaded;
	float	lep1_d0err_;
	TBranch *lep1_d0err_branch;
	bool lep1_d0err_isLoaded;
	float	lep1_dz_;
	TBranch *lep1_dz_branch;
	bool lep1_dz_isLoaded;
	float	lep1_dzerr_;
	TBranch *lep1_dzerr_branch;
	bool lep1_dzerr_isLoaded;
	float	lep1_sigmaIEtaEta_fill5x5_;
	TBranch *lep1_sigmaIEtaEta_fill5x5_branch;
	bool lep1_sigmaIEtaEta_fill5x5_isLoaded;
	float	lep1_dEtaIn_;
	TBranch *lep1_dEtaIn_branch;
	bool lep1_dEtaIn_isLoaded;
	float	lep1_dPhiIn_;
	TBranch *lep1_dPhiIn_branch;
	bool lep1_dPhiIn_isLoaded;
	float	lep1_hOverE_;
	TBranch *lep1_hOverE_branch;
	bool lep1_hOverE_isLoaded;
	float	lep1_ooEmooP_;
	TBranch *lep1_ooEmooP_branch;
	bool lep1_ooEmooP_isLoaded;
	int	lep1_expectedMissingInnerHits_;
	TBranch *lep1_expectedMissingInnerHits_branch;
	bool lep1_expectedMissingInnerHits_isLoaded;
	bool	lep1_conversionVeto_;
	TBranch *lep1_conversionVeto_branch;
	bool lep1_conversionVeto_isLoaded;
	float	lep1_etaSC_;
	TBranch *lep1_etaSC_branch;
	bool lep1_etaSC_isLoaded;
	float	lep1_ChiSqr_;
	TBranch *lep1_ChiSqr_branch;
	bool lep1_ChiSqr_isLoaded;
	float	lep1_chiso_;
	TBranch *lep1_chiso_branch;
	bool lep1_chiso_isLoaded;
	float	lep1_nhiso_;
	TBranch *lep1_nhiso_branch;
	bool lep1_nhiso_isLoaded;
	float	lep1_emiso_;
	TBranch *lep1_emiso_branch;
	bool lep1_emiso_isLoaded;
	float	lep1_deltaBeta_;
	TBranch *lep1_deltaBeta_branch;
	bool lep1_deltaBeta_isLoaded;
	float	lep1_relIso03DB_;
	TBranch *lep1_relIso03DB_branch;
	bool lep1_relIso03DB_isLoaded;
	float	lep1_relIso03EA_;
	TBranch *lep1_relIso03EA_branch;
	bool lep1_relIso03EA_isLoaded;
	float	lep1_relIso04DB_;
	TBranch *lep1_relIso04DB_branch;
	bool lep1_relIso04DB_isLoaded;
	float	lep1_miniRelIsoDB_;
	TBranch *lep1_miniRelIsoDB_branch;
	bool lep1_miniRelIsoDB_isLoaded;
	float	lep1_miniRelIsoEA_;
	TBranch *lep1_miniRelIsoEA_branch;
	bool lep1_miniRelIsoEA_isLoaded;
	float	lep1_MiniIso_;
	TBranch *lep1_MiniIso_branch;
	bool lep1_MiniIso_isLoaded;
	int	lep1_mcid_;
	TBranch *lep1_mcid_branch;
	bool lep1_mcid_isLoaded;
	int	lep1_mcstatus_;
	TBranch *lep1_mcstatus_branch;
	bool lep1_mcstatus_isLoaded;
	int	lep1_mc3dr_;
	TBranch *lep1_mc3dr_branch;
	bool lep1_mc3dr_isLoaded;
	int	lep1_mc3id_;
	TBranch *lep1_mc3id_branch;
	bool lep1_mc3id_isLoaded;
	int	lep1_mc3idx_;
	TBranch *lep1_mc3idx_branch;
	bool lep1_mc3idx_isLoaded;
	int	lep1_mc3motherid_;
	TBranch *lep1_mc3motherid_branch;
	bool lep1_mc3motherid_isLoaded;
	int	lep1_mc3motheridx_;
	TBranch *lep1_mc3motheridx_branch;
	bool lep1_mc3motheridx_isLoaded;
	bool	lep1_is_eleid_loose_;
	TBranch *lep1_is_eleid_loose_branch;
	bool lep1_is_eleid_loose_isLoaded;
	bool	lep1_is_eleid_medium_;
	TBranch *lep1_is_eleid_medium_branch;
	bool lep1_is_eleid_medium_isLoaded;
	bool	lep1_is_eleid_tight_;
	TBranch *lep1_is_eleid_tight_branch;
	bool lep1_is_eleid_tight_isLoaded;
	bool	lep1_is_phys14_loose_noIso_;
	TBranch *lep1_is_phys14_loose_noIso_branch;
	bool lep1_is_phys14_loose_noIso_isLoaded;
	bool	lep1_is_phys14_medium_noIso_;
	TBranch *lep1_is_phys14_medium_noIso_branch;
	bool lep1_is_phys14_medium_noIso_isLoaded;
	bool	lep1_is_phys14_tight_noIso_;
	TBranch *lep1_is_phys14_tight_noIso_branch;
	bool lep1_is_phys14_tight_noIso_isLoaded;
	float	lep1_eoverpin_;
	TBranch *lep1_eoverpin_branch;
	bool lep1_eoverpin_isLoaded;
	bool	lep1_is_muoid_loose_;
	TBranch *lep1_is_muoid_loose_branch;
	bool lep1_is_muoid_loose_isLoaded;
	bool	lep1_is_muoid_medium_;
	TBranch *lep1_is_muoid_medium_branch;
	bool lep1_is_muoid_medium_isLoaded;
	bool	lep1_is_muoid_tight_;
	TBranch *lep1_is_muoid_tight_branch;
	bool lep1_is_muoid_tight_isLoaded;
	float	lep1_ip3d_;
	TBranch *lep1_ip3d_branch;
	bool lep1_ip3d_isLoaded;
	float	lep1_ip3derr_;
	TBranch *lep1_ip3derr_branch;
	bool lep1_ip3derr_isLoaded;
	bool	lep1_is_pfmu_;
	TBranch *lep1_is_pfmu_branch;
	bool lep1_is_pfmu_isLoaded;
	bool	lep1_passMediumID_;
	TBranch *lep1_passMediumID_branch;
	bool lep1_passMediumID_isLoaded;
	bool	lep1_passVeto_;
	TBranch *lep1_passVeto_branch;
	bool lep1_passVeto_isLoaded;
	ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *lep1_p4_;
	TBranch *lep1_p4_branch;
	bool lep1_p4_isLoaded;
	ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *lep1_mcp4_;
	TBranch *lep1_mcp4_branch;
	bool lep1_mcp4_isLoaded;
	float	lep1_pt_;
	TBranch *lep1_pt_branch;
	bool lep1_pt_isLoaded;
	float	lep1_eta_;
	TBranch *lep1_eta_branch;
	bool lep1_eta_isLoaded;
	float	lep1_phi_;
	TBranch *lep1_phi_branch;
	bool lep1_phi_isLoaded;
	float	lep1_mass_;
	TBranch *lep1_mass_branch;
	bool lep1_mass_isLoaded;
	bool	lep2_is_mu_;
	TBranch *lep2_is_mu_branch;
	bool lep2_is_mu_isLoaded;
	bool	lep2_is_el_;
	TBranch *lep2_is_el_branch;
	bool lep2_is_el_isLoaded;
	int	lep2_charge_;
	TBranch *lep2_charge_branch;
	bool lep2_charge_isLoaded;
	int	lep2_pdgid_;
	TBranch *lep2_pdgid_branch;
	bool lep2_pdgid_isLoaded;
	int	lep2_type_;
	TBranch *lep2_type_branch;
	bool lep2_type_isLoaded;
	int	lep2_production_type_;
	TBranch *lep2_production_type_branch;
	bool lep2_production_type_isLoaded;
	float	lep2_d0_;
	TBranch *lep2_d0_branch;
	bool lep2_d0_isLoaded;
	float	lep2_d0err_;
	TBranch *lep2_d0err_branch;
	bool lep2_d0err_isLoaded;
	float	lep2_dz_;
	TBranch *lep2_dz_branch;
	bool lep2_dz_isLoaded;
	float	lep2_dzerr_;
	TBranch *lep2_dzerr_branch;
	bool lep2_dzerr_isLoaded;
	float	lep2_sigmaIEtaEta_fill5x5_;
	TBranch *lep2_sigmaIEtaEta_fill5x5_branch;
	bool lep2_sigmaIEtaEta_fill5x5_isLoaded;
	float	lep2_dEtaIn_;
	TBranch *lep2_dEtaIn_branch;
	bool lep2_dEtaIn_isLoaded;
	float	lep2_dPhiIn_;
	TBranch *lep2_dPhiIn_branch;
	bool lep2_dPhiIn_isLoaded;
	float	lep2_hOverE_;
	TBranch *lep2_hOverE_branch;
	bool lep2_hOverE_isLoaded;
	float	lep2_ooEmooP_;
	TBranch *lep2_ooEmooP_branch;
	bool lep2_ooEmooP_isLoaded;
	int	lep2_expectedMissingInnerHits_;
	TBranch *lep2_expectedMissingInnerHits_branch;
	bool lep2_expectedMissingInnerHits_isLoaded;
	bool	lep2_conversionVeto_;
	TBranch *lep2_conversionVeto_branch;
	bool lep2_conversionVeto_isLoaded;
	float	lep2_etaSC_;
	TBranch *lep2_etaSC_branch;
	bool lep2_etaSC_isLoaded;
	float	lep2_ChiSqr_;
	TBranch *lep2_ChiSqr_branch;
	bool lep2_ChiSqr_isLoaded;
	float	lep2_chiso_;
	TBranch *lep2_chiso_branch;
	bool lep2_chiso_isLoaded;
	float	lep2_nhiso_;
	TBranch *lep2_nhiso_branch;
	bool lep2_nhiso_isLoaded;
	float	lep2_emiso_;
	TBranch *lep2_emiso_branch;
	bool lep2_emiso_isLoaded;
	float	lep2_deltaBeta_;
	TBranch *lep2_deltaBeta_branch;
	bool lep2_deltaBeta_isLoaded;
	float	lep2_relIso03DB_;
	TBranch *lep2_relIso03DB_branch;
	bool lep2_relIso03DB_isLoaded;
	float	lep2_relIso03EA_;
	TBranch *lep2_relIso03EA_branch;
	bool lep2_relIso03EA_isLoaded;
	float	lep2_relIso04DB_;
	TBranch *lep2_relIso04DB_branch;
	bool lep2_relIso04DB_isLoaded;
	float	lep2_miniRelIsoDB_;
	TBranch *lep2_miniRelIsoDB_branch;
	bool lep2_miniRelIsoDB_isLoaded;
	float	lep2_miniRelIsoEA_;
	TBranch *lep2_miniRelIsoEA_branch;
	bool lep2_miniRelIsoEA_isLoaded;
	float	lep2_MiniIso_;
	TBranch *lep2_MiniIso_branch;
	bool lep2_MiniIso_isLoaded;
	int	lep2_mcid_;
	TBranch *lep2_mcid_branch;
	bool lep2_mcid_isLoaded;
	int	lep2_mcstatus_;
	TBranch *lep2_mcstatus_branch;
	bool lep2_mcstatus_isLoaded;
	int	lep2_mc3dr_;
	TBranch *lep2_mc3dr_branch;
	bool lep2_mc3dr_isLoaded;
	int	lep2_mc3id_;
	TBranch *lep2_mc3id_branch;
	bool lep2_mc3id_isLoaded;
	int	lep2_mc3idx_;
	TBranch *lep2_mc3idx_branch;
	bool lep2_mc3idx_isLoaded;
	int	lep2_mc3motherid_;
	TBranch *lep2_mc3motherid_branch;
	bool lep2_mc3motherid_isLoaded;
	int	lep2_mc3motheridx_;
	TBranch *lep2_mc3motheridx_branch;
	bool lep2_mc3motheridx_isLoaded;
	bool	lep2_is_eleid_loose_;
	TBranch *lep2_is_eleid_loose_branch;
	bool lep2_is_eleid_loose_isLoaded;
	bool	lep2_is_eleid_medium_;
	TBranch *lep2_is_eleid_medium_branch;
	bool lep2_is_eleid_medium_isLoaded;
	bool	lep2_is_eleid_tight_;
	TBranch *lep2_is_eleid_tight_branch;
	bool lep2_is_eleid_tight_isLoaded;
	bool	lep2_is_phys14_loose_noIso_;
	TBranch *lep2_is_phys14_loose_noIso_branch;
	bool lep2_is_phys14_loose_noIso_isLoaded;
	bool	lep2_is_phys14_medium_noIso_;
	TBranch *lep2_is_phys14_medium_noIso_branch;
	bool lep2_is_phys14_medium_noIso_isLoaded;
	bool	lep2_is_phys14_tight_noIso_;
	TBranch *lep2_is_phys14_tight_noIso_branch;
	bool lep2_is_phys14_tight_noIso_isLoaded;
	float	lep2_eoverpin_;
	TBranch *lep2_eoverpin_branch;
	bool lep2_eoverpin_isLoaded;
	bool	lep2_is_muoid_loose_;
	TBranch *lep2_is_muoid_loose_branch;
	bool lep2_is_muoid_loose_isLoaded;
	bool	lep2_is_muoid_medium_;
	TBranch *lep2_is_muoid_medium_branch;
	bool lep2_is_muoid_medium_isLoaded;
	bool	lep2_is_muoid_tight_;
	TBranch *lep2_is_muoid_tight_branch;
	bool lep2_is_muoid_tight_isLoaded;
	float	lep2_ip3d_;
	TBranch *lep2_ip3d_branch;
	bool lep2_ip3d_isLoaded;
	float	lep2_ip3derr_;
	TBranch *lep2_ip3derr_branch;
	bool lep2_ip3derr_isLoaded;
	bool	lep2_is_pfmu_;
	TBranch *lep2_is_pfmu_branch;
	bool lep2_is_pfmu_isLoaded;
	bool	lep2_passMediumID_;
	TBranch *lep2_passMediumID_branch;
	bool lep2_passMediumID_isLoaded;
	bool	lep2_passVeto_;
	TBranch *lep2_passVeto_branch;
	bool lep2_passVeto_isLoaded;
	ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *lep2_p4_;
	TBranch *lep2_p4_branch;
	bool lep2_p4_isLoaded;
	ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *lep2_mcp4_;
	TBranch *lep2_mcp4_branch;
	bool lep2_mcp4_isLoaded;
	float	lep2_pt_;
	TBranch *lep2_pt_branch;
	bool lep2_pt_isLoaded;
	float	lep2_eta_;
	TBranch *lep2_eta_branch;
	bool lep2_eta_isLoaded;
	float	lep2_phi_;
	TBranch *lep2_phi_branch;
	bool lep2_phi_isLoaded;
	float	lep2_mass_;
	TBranch *lep2_mass_branch;
	bool lep2_mass_isLoaded;
	vector<float> *ph_sigmaIEtaEta_fill5x5_;
	TBranch *ph_sigmaIEtaEta_fill5x5_branch;
	bool ph_sigmaIEtaEta_fill5x5_isLoaded;
	vector<float> *ph_hOverE_;
	TBranch *ph_hOverE_branch;
	bool ph_hOverE_isLoaded;
	vector<float> *ph_r9_;
	TBranch *ph_r9_branch;
	bool ph_r9_isLoaded;
	vector<float> *ph_chiso_;
	TBranch *ph_chiso_branch;
	bool ph_chiso_isLoaded;
	vector<float> *ph_nhiso_;
	TBranch *ph_nhiso_branch;
	bool ph_nhiso_isLoaded;
	vector<float> *ph_phiso_;
	TBranch *ph_phiso_branch;
	bool ph_phiso_isLoaded;
	vector<bool> *ph_idCutBased_;
	TBranch *ph_idCutBased_branch;
	bool ph_idCutBased_isLoaded;
	vector<int> *ph_overlapJetId_;
	TBranch *ph_overlapJetId_branch;
	bool ph_overlapJetId_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *ph_p4_;
	TBranch *ph_p4_branch;
	bool ph_p4_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *ph_mcp4_;
	TBranch *ph_mcp4_branch;
	bool ph_mcp4_isLoaded;
	vector<float> *ph_pt_;
	TBranch *ph_pt_branch;
	bool ph_pt_isLoaded;
	vector<float> *ph_eta_;
	TBranch *ph_eta_branch;
	bool ph_eta_isLoaded;
	vector<float> *ph_phi_;
	TBranch *ph_phi_branch;
	bool ph_phi_isLoaded;
	vector<float> *ph_mass_;
	TBranch *ph_mass_branch;
	bool ph_mass_isLoaded;
	vector<int> *ph_mcMatchId_;
	TBranch *ph_mcMatchId_branch;
	bool ph_mcMatchId_isLoaded;
	vector<float> *ph_genIso04_;
	TBranch *ph_genIso04_branch;
	bool ph_genIso04_isLoaded;
	vector<float> *ph_drMinParton_;
	TBranch *ph_drMinParton_branch;
	bool ph_drMinParton_isLoaded;
	int	nGoodGenJets_;
	TBranch *nGoodGenJets_branch;
	bool nGoodGenJets_isLoaded;
	int	ngoodjets_;
	TBranch *ngoodjets_branch;
	bool ngoodjets_isLoaded;
	int	nfailjets_;
	TBranch *nfailjets_branch;
	bool nfailjets_isLoaded;
	int	ak8GoodPFJets_;
	TBranch *ak8GoodPFJets_branch;
	bool ak8GoodPFJets_isLoaded;
	int	ngoodbtags_;
	TBranch *ngoodbtags_branch;
	bool ngoodbtags_isLoaded;
	float	ak4_HT_;
	TBranch *ak4_HT_branch;
	bool ak4_HT_isLoaded;
	float	ak4_htssm_;
	TBranch *ak4_htssm_branch;
	bool ak4_htssm_isLoaded;
	float	ak4_htosm_;
	TBranch *ak4_htosm_branch;
	bool ak4_htosm_isLoaded;
	float	ak4_htratiom_;
	TBranch *ak4_htratiom_branch;
	bool ak4_htratiom_isLoaded;
	vector<float> *dphi_ak4pfjet_met_;
	TBranch *dphi_ak4pfjet_met_branch;
	bool dphi_ak4pfjet_met_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *ak4pfjets_p4_;
	TBranch *ak4pfjets_p4_branch;
	bool ak4pfjets_p4_isLoaded;
	vector<float> *ak4pfjets_pt_;
	TBranch *ak4pfjets_pt_branch;
	bool ak4pfjets_pt_isLoaded;
	vector<float> *ak4pfjets_eta_;
	TBranch *ak4pfjets_eta_branch;
	bool ak4pfjets_eta_isLoaded;
	vector<float> *ak4pfjets_phi_;
	TBranch *ak4pfjets_phi_branch;
	bool ak4pfjets_phi_isLoaded;
	vector<float> *ak4pfjets_mass_;
	TBranch *ak4pfjets_mass_branch;
	bool ak4pfjets_mass_isLoaded;
	vector<bool> *ak4pfjets_passMEDbtag_;
	TBranch *ak4pfjets_passMEDbtag_branch;
	bool ak4pfjets_passMEDbtag_isLoaded;
	vector<float> *ak4pfjets_qg_disc_;
	TBranch *ak4pfjets_qg_disc_branch;
	bool ak4pfjets_qg_disc_isLoaded;
	vector<float> *ak4pfjets_CSV_;
	TBranch *ak4pfjets_CSV_branch;
	bool ak4pfjets_CSV_isLoaded;
	vector<float> *ak4pfjets_puid_;
	TBranch *ak4pfjets_puid_branch;
	bool ak4pfjets_puid_isLoaded;
	vector<int> *ak4pfjets_parton_flavor_;
	TBranch *ak4pfjets_parton_flavor_branch;
	bool ak4pfjets_parton_flavor_isLoaded;
	vector<bool> *ak4pfjets_loose_puid_;
	TBranch *ak4pfjets_loose_puid_branch;
	bool ak4pfjets_loose_puid_isLoaded;
	vector<bool> *ak4pfjets_loose_pfid_;
	TBranch *ak4pfjets_loose_pfid_branch;
	bool ak4pfjets_loose_pfid_isLoaded;
	vector<bool> *ak4pfjets_medium_pfid_;
	TBranch *ak4pfjets_medium_pfid_branch;
	bool ak4pfjets_medium_pfid_isLoaded;
	vector<bool> *ak4pfjets_tight_pfid_;
	TBranch *ak4pfjets_tight_pfid_branch;
	bool ak4pfjets_tight_pfid_isLoaded;
	vector<float> *ak4pfjets_MEDbjet_pt_;
	TBranch *ak4pfjets_MEDbjet_pt_branch;
	bool ak4pfjets_MEDbjet_pt_isLoaded;
	float	ak4pfjets_leadMEDbjet_pt_;
	TBranch *ak4pfjets_leadMEDbjet_pt_branch;
	bool ak4pfjets_leadMEDbjet_pt_isLoaded;
	ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *ak4pfjets_leadMEDbjet_p4_;
	TBranch *ak4pfjets_leadMEDbjet_p4_branch;
	bool ak4pfjets_leadMEDbjet_p4_isLoaded;
	ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *ak4pfjets_leadbtag_p4_;
	TBranch *ak4pfjets_leadbtag_p4_branch;
	bool ak4pfjets_leadbtag_p4_isLoaded;
	vector<float> *ak4pfjets_chf_;
	TBranch *ak4pfjets_chf_branch;
	bool ak4pfjets_chf_isLoaded;
	vector<float> *ak4pfjets_nhf_;
	TBranch *ak4pfjets_nhf_branch;
	bool ak4pfjets_nhf_isLoaded;
	vector<float> *ak4pfjets_cef_;
	TBranch *ak4pfjets_cef_branch;
	bool ak4pfjets_cef_isLoaded;
	vector<float> *ak4pfjets_nef_;
	TBranch *ak4pfjets_nef_branch;
	bool ak4pfjets_nef_isLoaded;
	vector<float> *ak4pfjets_muf_;
	TBranch *ak4pfjets_muf_branch;
	bool ak4pfjets_muf_isLoaded;
	vector<int> *ak4pfjets_cm_;
	TBranch *ak4pfjets_cm_branch;
	bool ak4pfjets_cm_isLoaded;
	vector<int> *ak4pfjets_nm_;
	TBranch *ak4pfjets_nm_branch;
	bool ak4pfjets_nm_isLoaded;
	vector<int> *ak4pfjets_mc3dr_;
	TBranch *ak4pfjets_mc3dr_branch;
	bool ak4pfjets_mc3dr_isLoaded;
	vector<int> *ak4pfjets_mc3id_;
	TBranch *ak4pfjets_mc3id_branch;
	bool ak4pfjets_mc3id_isLoaded;
	vector<int> *ak4pfjets_mc3idx_;
	TBranch *ak4pfjets_mc3idx_branch;
	bool ak4pfjets_mc3idx_isLoaded;
	vector<int> *ak4pfjets_mcmotherid_;
	TBranch *ak4pfjets_mcmotherid_branch;
	bool ak4pfjets_mcmotherid_isLoaded;
	ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *ak4pfjet_overlep1_p4_;
	TBranch *ak4pfjet_overlep1_p4_branch;
	bool ak4pfjet_overlep1_p4_isLoaded;
	float	ak4pfjet_overlep1_CSV_;
	TBranch *ak4pfjet_overlep1_CSV_branch;
	bool ak4pfjet_overlep1_CSV_isLoaded;
	float	ak4pfjet_overlep1_pu_id_;
	TBranch *ak4pfjet_overlep1_pu_id_branch;
	bool ak4pfjet_overlep1_pu_id_isLoaded;
	float	ak4pfjet_overlep1_chf_;
	TBranch *ak4pfjet_overlep1_chf_branch;
	bool ak4pfjet_overlep1_chf_isLoaded;
	float	ak4pfjet_overlep1_nhf_;
	TBranch *ak4pfjet_overlep1_nhf_branch;
	bool ak4pfjet_overlep1_nhf_isLoaded;
	float	ak4pfjet_overlep1_cef_;
	TBranch *ak4pfjet_overlep1_cef_branch;
	bool ak4pfjet_overlep1_cef_isLoaded;
	float	ak4pfjet_overlep1_nef_;
	TBranch *ak4pfjet_overlep1_nef_branch;
	bool ak4pfjet_overlep1_nef_isLoaded;
	float	ak4pfjet_overlep1_muf_;
	TBranch *ak4pfjet_overlep1_muf_branch;
	bool ak4pfjet_overlep1_muf_isLoaded;
	int	ak4pfjet_overlep1_cm_;
	TBranch *ak4pfjet_overlep1_cm_branch;
	bool ak4pfjet_overlep1_cm_isLoaded;
	int	ak4pfjet_overlep1_nm_;
	TBranch *ak4pfjet_overlep1_nm_branch;
	bool ak4pfjet_overlep1_nm_isLoaded;
	ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *ak4pfjet_overlep2_p4_;
	TBranch *ak4pfjet_overlep2_p4_branch;
	bool ak4pfjet_overlep2_p4_isLoaded;
	float	ak4pfjet_overlep2_CSV_;
	TBranch *ak4pfjet_overlep2_CSV_branch;
	bool ak4pfjet_overlep2_CSV_isLoaded;
	float	ak4pfjet_overlep2_pu_id_;
	TBranch *ak4pfjet_overlep2_pu_id_branch;
	bool ak4pfjet_overlep2_pu_id_isLoaded;
	float	ak4pfjet_overlep2_chf_;
	TBranch *ak4pfjet_overlep2_chf_branch;
	bool ak4pfjet_overlep2_chf_isLoaded;
	float	ak4pfjet_overlep2_nhf_;
	TBranch *ak4pfjet_overlep2_nhf_branch;
	bool ak4pfjet_overlep2_nhf_isLoaded;
	float	ak4pfjet_overlep2_cef_;
	TBranch *ak4pfjet_overlep2_cef_branch;
	bool ak4pfjet_overlep2_cef_isLoaded;
	float	ak4pfjet_overlep2_nef_;
	TBranch *ak4pfjet_overlep2_nef_branch;
	bool ak4pfjet_overlep2_nef_isLoaded;
	float	ak4pfjet_overlep2_muf_;
	TBranch *ak4pfjet_overlep2_muf_branch;
	bool ak4pfjet_overlep2_muf_isLoaded;
	int	ak4pfjet_overlep2_cm_;
	TBranch *ak4pfjet_overlep2_cm_branch;
	bool ak4pfjet_overlep2_cm_isLoaded;
	int	ak4pfjet_overlep2_nm_;
	TBranch *ak4pfjet_overlep2_nm_branch;
	bool ak4pfjet_overlep2_nm_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *ak8pfjets_p4_;
	TBranch *ak8pfjets_p4_branch;
	bool ak8pfjets_p4_isLoaded;
	vector<float> *ak8pfjets_tau1_;
	TBranch *ak8pfjets_tau1_branch;
	bool ak8pfjets_tau1_isLoaded;
	vector<float> *ak8pfjets_tau2_;
	TBranch *ak8pfjets_tau2_branch;
	bool ak8pfjets_tau2_isLoaded;
	vector<float> *ak8pfjets_tau3_;
	TBranch *ak8pfjets_tau3_branch;
	bool ak8pfjets_tau3_isLoaded;
	vector<float> *ak8pfjets_top_mass_;
	TBranch *ak8pfjets_top_mass_branch;
	bool ak8pfjets_top_mass_isLoaded;
	vector<float> *ak8pfjets_pruned_mass_;
	TBranch *ak8pfjets_pruned_mass_branch;
	bool ak8pfjets_pruned_mass_isLoaded;
	vector<float> *ak8pfjets_trimmed_mass_;
	TBranch *ak8pfjets_trimmed_mass_branch;
	bool ak8pfjets_trimmed_mass_isLoaded;
	vector<float> *ak8pfjets_filtered_mass_;
	TBranch *ak8pfjets_filtered_mass_branch;
	bool ak8pfjets_filtered_mass_isLoaded;
	vector<float> *ak8pfjets_pu_id_;
	TBranch *ak8pfjets_pu_id_branch;
	bool ak8pfjets_pu_id_isLoaded;
	vector<int> *ak8pfjets_parton_flavor_;
	TBranch *ak8pfjets_parton_flavor_branch;
	bool ak8pfjets_parton_flavor_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *ak4genjets_p4_;
	TBranch *ak4genjets_p4_branch;
	bool ak4genjets_p4_isLoaded;
	vector<TString> *tau_IDnames_;
	TBranch *tau_IDnames_branch;
	bool tau_IDnames_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *tau_leadtrack_p4_;
	TBranch *tau_leadtrack_p4_branch;
	bool tau_leadtrack_p4_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *tau_leadneutral_p4_;
	TBranch *tau_leadneutral_p4_branch;
	bool tau_leadneutral_p4_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *tau_p4_;
	TBranch *tau_p4_branch;
	bool tau_p4_isLoaded;
	vector<vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > > *tau_isocand_p4_;
	TBranch *tau_isocand_p4_branch;
	bool tau_isocand_p4_isLoaded;
	vector<vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > > *tau_sigcand_p4_;
	TBranch *tau_sigcand_p4_branch;
	bool tau_sigcand_p4_isLoaded;
	vector<float> *tau_mass_;
	TBranch *tau_mass_branch;
	bool tau_mass_isLoaded;
	vector<vector<float> > *tau_ID_;
	TBranch *tau_ID_branch;
	bool tau_ID_isLoaded;
	vector<float> *tau_passID_;
	TBranch *tau_passID_branch;
	bool tau_passID_isLoaded;
	vector<float> *tau_charge_;
	TBranch *tau_charge_branch;
	bool tau_charge_isLoaded;
	int	ngoodtaus_;
	TBranch *ngoodtaus_branch;
	bool ngoodtaus_isLoaded;
	vector<float> *tau_againstMuonTight_;
	TBranch *tau_againstMuonTight_branch;
	bool tau_againstMuonTight_isLoaded;
	vector<float> *tau_againstElectronLoose_;
	TBranch *tau_againstElectronLoose_branch;
	bool tau_againstElectronLoose_isLoaded;
	vector<bool> *tau_isVetoTau_;
	TBranch *tau_isVetoTau_branch;
	bool tau_isVetoTau_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *isoTracks_p4_;
	TBranch *isoTracks_p4_branch;
	bool isoTracks_p4_isLoaded;
	vector<int> *isoTracks_charge_;
	TBranch *isoTracks_charge_branch;
	bool isoTracks_charge_isLoaded;
	vector<float> *isoTracks_absIso_;
	TBranch *isoTracks_absIso_branch;
	bool isoTracks_absIso_isLoaded;
	vector<float> *isoTracks_dz_;
	TBranch *isoTracks_dz_branch;
	bool isoTracks_dz_isLoaded;
	vector<int> *isoTracks_pdgId_;
	TBranch *isoTracks_pdgId_branch;
	bool isoTracks_pdgId_isLoaded;
	vector<int> *isoTracks_selectedidx_;
	TBranch *isoTracks_selectedidx_branch;
	bool isoTracks_selectedidx_isLoaded;
	int	isoTracks_nselected_;
	TBranch *isoTracks_nselected_branch;
	bool isoTracks_nselected_isLoaded;
	vector<bool> *isoTracks_isVetoTrack_;
	TBranch *isoTracks_isVetoTrack_branch;
	bool isoTracks_isVetoTrack_isLoaded;
	vector<bool> *isoTracks_isVetoTrack_v2_;
	TBranch *isoTracks_isVetoTrack_v2_branch;
	bool isoTracks_isVetoTrack_v2_isLoaded;
	vector<bool> *isoTracks_isVetoTrack_v3_;
	TBranch *isoTracks_isVetoTrack_v3_branch;
	bool isoTracks_isVetoTrack_v3_isLoaded;
	vector<bool> *genleps_isfromt_;
	TBranch *genleps_isfromt_branch;
	bool genleps_isfromt_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *genleps_p4_;
	TBranch *genleps_p4_branch;
	bool genleps_p4_isLoaded;
	vector<int> *genleps_id_;
	TBranch *genleps_id_branch;
	bool genleps_id_isLoaded;
	vector<int> *genleps__genpsidx_;
	TBranch *genleps__genpsidx_branch;
	bool genleps__genpsidx_isLoaded;
	vector<int> *genleps_status_;
	TBranch *genleps_status_branch;
	bool genleps_status_isLoaded;
	vector<bool> *genleps_fromHardProcessDecayed_;
	TBranch *genleps_fromHardProcessDecayed_branch;
	bool genleps_fromHardProcessDecayed_isLoaded;
	vector<bool> *genleps_fromHardProcessFinalState_;
	TBranch *genleps_fromHardProcessFinalState_branch;
	bool genleps_fromHardProcessFinalState_isLoaded;
	vector<bool> *genleps_isHardProcess_;
	TBranch *genleps_isHardProcess_branch;
	bool genleps_isHardProcess_isLoaded;
	vector<bool> *genleps_isLastCopy_;
	TBranch *genleps_isLastCopy_branch;
	bool genleps_isLastCopy_isLoaded;
	vector<int> *genleps_gentaudecay_;
	TBranch *genleps_gentaudecay_branch;
	bool genleps_gentaudecay_isLoaded;
	int	gen_nfromtleps__;
	TBranch *gen_nfromtleps__branch;
	bool gen_nfromtleps__isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *genleps_motherp4_;
	TBranch *genleps_motherp4_branch;
	bool genleps_motherp4_isLoaded;
	vector<int> *genleps_motherid_;
	TBranch *genleps_motherid_branch;
	bool genleps_motherid_isLoaded;
	vector<int> *genleps_motheridx_;
	TBranch *genleps_motheridx_branch;
	bool genleps_motheridx_isLoaded;
	vector<int> *genleps_motherstatus_;
	TBranch *genleps_motherstatus_branch;
	bool genleps_motherstatus_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *genleps_gmotherp4_;
	TBranch *genleps_gmotherp4_branch;
	bool genleps_gmotherp4_isLoaded;
	vector<int> *genleps_gmotherid_;
	TBranch *genleps_gmotherid_branch;
	bool genleps_gmotherid_isLoaded;
	vector<int> *genleps_gmotheridx_;
	TBranch *genleps_gmotheridx_branch;
	bool genleps_gmotheridx_isLoaded;
	vector<int> *genleps_gmotherstatus_;
	TBranch *genleps_gmotherstatus_branch;
	bool genleps_gmotherstatus_isLoaded;
	vector<bool> *gennus_isfromt_;
	TBranch *gennus_isfromt_branch;
	bool gennus_isfromt_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *gennus_p4_;
	TBranch *gennus_p4_branch;
	bool gennus_p4_isLoaded;
	vector<int> *gennus_id_;
	TBranch *gennus_id_branch;
	bool gennus_id_isLoaded;
	vector<int> *gennus__genpsidx_;
	TBranch *gennus__genpsidx_branch;
	bool gennus__genpsidx_isLoaded;
	vector<int> *gennus_status_;
	TBranch *gennus_status_branch;
	bool gennus_status_isLoaded;
	vector<bool> *gennus_fromHardProcessDecayed_;
	TBranch *gennus_fromHardProcessDecayed_branch;
	bool gennus_fromHardProcessDecayed_isLoaded;
	vector<bool> *gennus_fromHardProcessFinalState_;
	TBranch *gennus_fromHardProcessFinalState_branch;
	bool gennus_fromHardProcessFinalState_isLoaded;
	vector<bool> *gennus_isHardProcess_;
	TBranch *gennus_isHardProcess_branch;
	bool gennus_isHardProcess_isLoaded;
	vector<bool> *gennus_isLastCopy_;
	TBranch *gennus_isLastCopy_branch;
	bool gennus_isLastCopy_isLoaded;
	vector<int> *gennus_gentaudecay_;
	TBranch *gennus_gentaudecay_branch;
	bool gennus_gentaudecay_isLoaded;
	int	gen_nfromtnus__;
	TBranch *gen_nfromtnus__branch;
	bool gen_nfromtnus__isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *gennus_motherp4_;
	TBranch *gennus_motherp4_branch;
	bool gennus_motherp4_isLoaded;
	vector<int> *gennus_motherid_;
	TBranch *gennus_motherid_branch;
	bool gennus_motherid_isLoaded;
	vector<int> *gennus_motheridx_;
	TBranch *gennus_motheridx_branch;
	bool gennus_motheridx_isLoaded;
	vector<int> *gennus_motherstatus_;
	TBranch *gennus_motherstatus_branch;
	bool gennus_motherstatus_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *gennus_gmotherp4_;
	TBranch *gennus_gmotherp4_branch;
	bool gennus_gmotherp4_isLoaded;
	vector<int> *gennus_gmotherid_;
	TBranch *gennus_gmotherid_branch;
	bool gennus_gmotherid_isLoaded;
	vector<int> *gennus_gmotheridx_;
	TBranch *gennus_gmotheridx_branch;
	bool gennus_gmotheridx_isLoaded;
	vector<int> *gennus_gmotherstatus_;
	TBranch *gennus_gmotherstatus_branch;
	bool gennus_gmotherstatus_isLoaded;
	vector<bool> *gents_isfromt_;
	TBranch *gents_isfromt_branch;
	bool gents_isfromt_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *gents_p4_;
	TBranch *gents_p4_branch;
	bool gents_p4_isLoaded;
	vector<int> *gents_id_;
	TBranch *gents_id_branch;
	bool gents_id_isLoaded;
	vector<int> *gents__genpsidx_;
	TBranch *gents__genpsidx_branch;
	bool gents__genpsidx_isLoaded;
	vector<int> *gents_status_;
	TBranch *gents_status_branch;
	bool gents_status_isLoaded;
	vector<bool> *gents_fromHardProcessDecayed_;
	TBranch *gents_fromHardProcessDecayed_branch;
	bool gents_fromHardProcessDecayed_isLoaded;
	vector<bool> *gents_fromHardProcessFinalState_;
	TBranch *gents_fromHardProcessFinalState_branch;
	bool gents_fromHardProcessFinalState_isLoaded;
	vector<bool> *gents_isHardProcess_;
	TBranch *gents_isHardProcess_branch;
	bool gents_isHardProcess_isLoaded;
	vector<bool> *gents_isLastCopy_;
	TBranch *gents_isLastCopy_branch;
	bool gents_isLastCopy_isLoaded;
	vector<int> *gents_gentaudecay_;
	TBranch *gents_gentaudecay_branch;
	bool gents_gentaudecay_isLoaded;
	int	gen_nfromtts__;
	TBranch *gen_nfromtts__branch;
	bool gen_nfromtts__isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *gents_motherp4_;
	TBranch *gents_motherp4_branch;
	bool gents_motherp4_isLoaded;
	vector<int> *gents_motherid_;
	TBranch *gents_motherid_branch;
	bool gents_motherid_isLoaded;
	vector<int> *gents_motheridx_;
	TBranch *gents_motheridx_branch;
	bool gents_motheridx_isLoaded;
	vector<int> *gents_motherstatus_;
	TBranch *gents_motherstatus_branch;
	bool gents_motherstatus_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *gents_gmotherp4_;
	TBranch *gents_gmotherp4_branch;
	bool gents_gmotherp4_isLoaded;
	vector<int> *gents_gmotherid_;
	TBranch *gents_gmotherid_branch;
	bool gents_gmotherid_isLoaded;
	vector<int> *gents_gmotheridx_;
	TBranch *gents_gmotheridx_branch;
	bool gents_gmotheridx_isLoaded;
	vector<int> *gents_gmotherstatus_;
	TBranch *gents_gmotherstatus_branch;
	bool gents_gmotherstatus_isLoaded;
	vector<bool> *genqs_isfromt_;
	TBranch *genqs_isfromt_branch;
	bool genqs_isfromt_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *genqs_p4_;
	TBranch *genqs_p4_branch;
	bool genqs_p4_isLoaded;
	vector<int> *genqs_id_;
	TBranch *genqs_id_branch;
	bool genqs_id_isLoaded;
	vector<int> *genqs__genpsidx_;
	TBranch *genqs__genpsidx_branch;
	bool genqs__genpsidx_isLoaded;
	vector<int> *genqs_status_;
	TBranch *genqs_status_branch;
	bool genqs_status_isLoaded;
	vector<bool> *genqs_fromHardProcessDecayed_;
	TBranch *genqs_fromHardProcessDecayed_branch;
	bool genqs_fromHardProcessDecayed_isLoaded;
	vector<bool> *genqs_fromHardProcessFinalState_;
	TBranch *genqs_fromHardProcessFinalState_branch;
	bool genqs_fromHardProcessFinalState_isLoaded;
	vector<bool> *genqs_isHardProcess_;
	TBranch *genqs_isHardProcess_branch;
	bool genqs_isHardProcess_isLoaded;
	vector<bool> *genqs_isLastCopy_;
	TBranch *genqs_isLastCopy_branch;
	bool genqs_isLastCopy_isLoaded;
	vector<int> *genqs_gentaudecay_;
	TBranch *genqs_gentaudecay_branch;
	bool genqs_gentaudecay_isLoaded;
	int	gen_nfromtqs__;
	TBranch *gen_nfromtqs__branch;
	bool gen_nfromtqs__isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *genqs_motherp4_;
	TBranch *genqs_motherp4_branch;
	bool genqs_motherp4_isLoaded;
	vector<int> *genqs_motherid_;
	TBranch *genqs_motherid_branch;
	bool genqs_motherid_isLoaded;
	vector<int> *genqs_motheridx_;
	TBranch *genqs_motheridx_branch;
	bool genqs_motheridx_isLoaded;
	vector<int> *genqs_motherstatus_;
	TBranch *genqs_motherstatus_branch;
	bool genqs_motherstatus_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *genqs_gmotherp4_;
	TBranch *genqs_gmotherp4_branch;
	bool genqs_gmotherp4_isLoaded;
	vector<int> *genqs_gmotherid_;
	TBranch *genqs_gmotherid_branch;
	bool genqs_gmotherid_isLoaded;
	vector<int> *genqs_gmotheridx_;
	TBranch *genqs_gmotheridx_branch;
	bool genqs_gmotheridx_isLoaded;
	vector<int> *genqs_gmotherstatus_;
	TBranch *genqs_gmotherstatus_branch;
	bool genqs_gmotherstatus_isLoaded;
	vector<bool> *genbosons_isfromt_;
	TBranch *genbosons_isfromt_branch;
	bool genbosons_isfromt_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *genbosons_p4_;
	TBranch *genbosons_p4_branch;
	bool genbosons_p4_isLoaded;
	vector<int> *genbosons_id_;
	TBranch *genbosons_id_branch;
	bool genbosons_id_isLoaded;
	vector<int> *genbosons__genpsidx_;
	TBranch *genbosons__genpsidx_branch;
	bool genbosons__genpsidx_isLoaded;
	vector<int> *genbosons_status_;
	TBranch *genbosons_status_branch;
	bool genbosons_status_isLoaded;
	vector<bool> *genbosons_fromHardProcessDecayed_;
	TBranch *genbosons_fromHardProcessDecayed_branch;
	bool genbosons_fromHardProcessDecayed_isLoaded;
	vector<bool> *genbosons_fromHardProcessFinalState_;
	TBranch *genbosons_fromHardProcessFinalState_branch;
	bool genbosons_fromHardProcessFinalState_isLoaded;
	vector<bool> *genbosons_isHardProcess_;
	TBranch *genbosons_isHardProcess_branch;
	bool genbosons_isHardProcess_isLoaded;
	vector<bool> *genbosons_isLastCopy_;
	TBranch *genbosons_isLastCopy_branch;
	bool genbosons_isLastCopy_isLoaded;
	vector<int> *genbosons_gentaudecay_;
	TBranch *genbosons_gentaudecay_branch;
	bool genbosons_gentaudecay_isLoaded;
	int	gen_nfromtbosons__;
	TBranch *gen_nfromtbosons__branch;
	bool gen_nfromtbosons__isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *genbosons_motherp4_;
	TBranch *genbosons_motherp4_branch;
	bool genbosons_motherp4_isLoaded;
	vector<int> *genbosons_motherid_;
	TBranch *genbosons_motherid_branch;
	bool genbosons_motherid_isLoaded;
	vector<int> *genbosons_motheridx_;
	TBranch *genbosons_motheridx_branch;
	bool genbosons_motheridx_isLoaded;
	vector<int> *genbosons_motherstatus_;
	TBranch *genbosons_motherstatus_branch;
	bool genbosons_motherstatus_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *genbosons_gmotherp4_;
	TBranch *genbosons_gmotherp4_branch;
	bool genbosons_gmotherp4_isLoaded;
	vector<int> *genbosons_gmotherid_;
	TBranch *genbosons_gmotherid_branch;
	bool genbosons_gmotherid_isLoaded;
	vector<int> *genbosons_gmotheridx_;
	TBranch *genbosons_gmotheridx_branch;
	bool genbosons_gmotheridx_isLoaded;
	vector<int> *genbosons_gmotherstatus_;
	TBranch *genbosons_gmotherstatus_branch;
	bool genbosons_gmotherstatus_isLoaded;
	vector<bool> *gensusy_isfromt_;
	TBranch *gensusy_isfromt_branch;
	bool gensusy_isfromt_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *gensusy_p4_;
	TBranch *gensusy_p4_branch;
	bool gensusy_p4_isLoaded;
	vector<int> *gensusy_id_;
	TBranch *gensusy_id_branch;
	bool gensusy_id_isLoaded;
	vector<int> *gensusy__genpsidx_;
	TBranch *gensusy__genpsidx_branch;
	bool gensusy__genpsidx_isLoaded;
	vector<int> *gensusy_status_;
	TBranch *gensusy_status_branch;
	bool gensusy_status_isLoaded;
	vector<bool> *gensusy_fromHardProcessDecayed_;
	TBranch *gensusy_fromHardProcessDecayed_branch;
	bool gensusy_fromHardProcessDecayed_isLoaded;
	vector<bool> *gensusy_fromHardProcessFinalState_;
	TBranch *gensusy_fromHardProcessFinalState_branch;
	bool gensusy_fromHardProcessFinalState_isLoaded;
	vector<bool> *gensusy_isHardProcess_;
	TBranch *gensusy_isHardProcess_branch;
	bool gensusy_isHardProcess_isLoaded;
	vector<bool> *gensusy_isLastCopy_;
	TBranch *gensusy_isLastCopy_branch;
	bool gensusy_isLastCopy_isLoaded;
	vector<int> *gensusy_gentaudecay_;
	TBranch *gensusy_gentaudecay_branch;
	bool gensusy_gentaudecay_isLoaded;
	int	gen_nfromtsusy__;
	TBranch *gen_nfromtsusy__branch;
	bool gen_nfromtsusy__isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *gensusy_motherp4_;
	TBranch *gensusy_motherp4_branch;
	bool gensusy_motherp4_isLoaded;
	vector<int> *gensusy_motherid_;
	TBranch *gensusy_motherid_branch;
	bool gensusy_motherid_isLoaded;
	vector<int> *gensusy_motheridx_;
	TBranch *gensusy_motheridx_branch;
	bool gensusy_motheridx_isLoaded;
	vector<int> *gensusy_motherstatus_;
	TBranch *gensusy_motherstatus_branch;
	bool gensusy_motherstatus_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *gensusy_gmotherp4_;
	TBranch *gensusy_gmotherp4_branch;
	bool gensusy_gmotherp4_isLoaded;
	vector<int> *gensusy_gmotherid_;
	TBranch *gensusy_gmotherid_branch;
	bool gensusy_gmotherid_isLoaded;
	vector<int> *gensusy_gmotheridx_;
	TBranch *gensusy_gmotheridx_branch;
	bool gensusy_gmotheridx_isLoaded;
	vector<int> *gensusy_gmotherstatus_;
	TBranch *gensusy_gmotherstatus_branch;
	bool gensusy_gmotherstatus_isLoaded;
public: 
void Init(TTree *tree);
void GetEntry(unsigned int idx); 
void LoadAllBranches(); 
	const unsigned int &run();
	const unsigned int &ls();
	const unsigned int &evt();
	const int &nvtxs();
	const int &firstGoodVtxIdx();
	const int &firstVtx_isfake();
	const float &firstVtx_ndof();
	const float &firstVtx_posRho();
	const float &firstVtx_posZ();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &firstVtx_posp4();
	const int &pu_nvtxs();
	const float &pfmet();
	const float &pfmet_phi();
	const float &calomet();
	const float &calomet_phi();
	const float &filt_cscbeamhalo();
	const float &filt_ecallaser();
	const float &filt_ecaltp();
	const float &filt_eebadsc();
	const float &filt_goodvtx();
	const float &filt_badevents();
	const float &filt_hbhenoise();
	const float &filt_hcallaser();
	const float &filt_met();
	const float &filt_trkfail();
	const float &filt_trkPOG();
	const float &filt_trkPOG_tmc();
	const float &filt_trkPOG_tms();
	const float &filt_eff();
	const float &scale1fb();
	const float &xsec();
	const float &kfactor();
	const float &pu_ntrue();
	const int &ngoodleps();
	const int &nlooseleps();
	const int &nvetoleps();
	const bool &	is_data();
	const string &dataset();
	const string &filename();
	const string &cms3tag();
	const unsigned int &nEvents();
	const unsigned int &nEvents_goodvtx();
	const unsigned int &nEvents_MET30();
	const unsigned int &nEvents_1goodlep();
	const unsigned int &nEvents_2goodjets();
	const int &genlepsfromtop();
	const int &genLepsHardProcess();
	const int &genNusHardProcess();
	const int &is0lep();
	const int &is1lep();
	const int &is2lep();
	const int &isZtoNuNu();
	const int &is1lepFromW();
	const int &is1lepFromTop();
	const float &MT2W();
	const float &MT2W_lep2();
	const float &mindphi_met_j1_j2();
	const float &mt_met_lep();
	const float &mt_met_lep2();
	const float &dR_lep_leadb();
	const float &dR_lep2_leadb();
	const float &hadronic_top_chi2();
	const float &dphi_Wlep();
	const float &MET_over_sqrtHT();
	const float &ak4pfjets_rho();
	const vector<string> &genweightsID();
	const vector<float> &genweights();
	const vector<string> &sparms_names();
	const float &sparms_filterEfficiency();
	const float &sparms_pdfScale();
	const float &sparms_pdfWeight1();
	const float &sparms_pdfWeight2();
	const float &sparms_weight();
	const float &sparms_xsec();
	const vector<float> &sparms_values();
	const int &sparms_subProcessId();
	const float &mass_lsp();
	const float &mass_chargino();
	const float &mass_stop();
	const float &genmet();
	const float &genmet_phi();
	const float &genht();
	const bool &	PassTrackVeto();
	const bool &	PassTrackVeto_v2();
	const bool &	PassTrackVeto_v3();
	const bool &	PassTauVeto();
	const float &EA_all_rho();
	const float &EA_allcalo_rho();
	const float &EA_centralcalo_rho();
	const float &EA_centralchargedpileup_rho();
	const float &EA_centralneutral_rho();
	const float &topness();
	const float &topness_lep2();
	const float &topnessMod();
	const float &topnessMod_lep2();
	const float &MT2_lb_b();
	const float &MT2_lb_b_lep2();
	const float &MT2_lb_b_mass();
	const float &MT2_lb_b_mass_lep2();
	const float &MT2_lb_bqq();
	const float &MT2_lb_bqq_lep2();
	const float &MT2_lb_bqq_mass();
	const float &MT2_lb_bqq_mass_lep2();
	const float &Mlb_closestb();
	const float &Mlb_lead_bdiscr();
	const float &Mlb_closestb_lep2();
	const float &Mlb_lead_bdiscr_lep2();
	const float &Mjjj();
	const float &Mjjj_lep2();
	const int &HLT_SingleEl();
	const int &HLT_SingleMu();
	const int &HLT_MET170();
	const int &HLT_MET120Btag();
	const int &HLT_MET120Mu5();
	const int &HLT_HT350MET120();
	const int &HLT_DiEl();
	const int &HLT_DiEl_17_12();
	const int &HLT_DiMu();
	const int &HLT_Mu8El17();
	const int &HLT_Mu8El23();
	const int &HLT_Mu17El12();
	const int &HLT_Mu23El12();
	const int &HLT_SingleEl23();
	const int &HLT_SingleEl27();
	const int &HLT_SingleEl27Tight();
	const int &HLT_SingleElTight();
	const int &HLT_SingleElHT200();
	const int &HLT_SingleMuNoEta();
	const int &HLT_SingleMuNoIso();
	const int &HLT_SingleMuNoIsoNoEta();
	const int &HLT_Mu6HT200MET100();
	const int &HLT_HT350MET100();
	const int &HLT_SingleMu17();
	const int &HLT_SingleMu20();
	const int &HLT_SingleMu24();
	const int &HLT_MonoCentPFJet80_METNoMu90_MHTNoMu90_IDTight();
	const int &HLT_MET90_MHT90_IDTight();
	const int &HLT_METNoMu90_NoiseCleaned_MHTNoMu90_IDTight();
	const int &HLT_Photon90_CaloIdL_PFHT500();
	const int &HLT_Photon165_R9Id90_HE10_IsoM();
	const int &HLT_Photon175();
	const int &HLT_Photon165_HE10();
	const float &pu_weight();
	const float &lep_sf();
	const float &btag_sf();
	const float &HLT_SingleEl_eff();
	const float &HLT_SingleMu_eff();
	const int &nPhotons();
	const int &ph_selectedidx();
	const int &ph_ngoodjets();
	const int &ph_ngoodbtags();
	const float &ph_met();
	const float &ph_met_phi();
	const float &ph_HT();
	const float &ph_htssm();
	const float &ph_htosm();
	const float &ph_htratiom();
	const float &ph_mt_met_lep();
	const float &ph_dphi_Wlep();
	const float &ph_MT2W();
	const float &ph_topness();
	const float &ph_topnessMod();
	const float &ph_MT2_lb_b_mass();
	const float &ph_MT2_lb_b();
	const float &ph_MT2_lb_bqq_mass();
	const float &ph_MT2_lb_bqq();
	const float &ph_hadronic_top_chi2();
	const float &ph_mindphi_met_j1_j2();
	const float &ph_Mlb_lead_bdiscr();
	const float &ph_dR_lep_leadb();
	const float &ph_Mlb_closestb();
	const float &ph_Mjjj();
	const int &Zll_idl1();
	const int &Zll_idl2();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &Zll_p4l1();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &Zll_p4l2();
	const bool &	Zll_OS();
	const bool &	Zll_SF();
	const bool &	Zll_isZmass();
	const float &Zll_M();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &Zll_p4();
	const int &Zll_selLep();
	const float &Zll_met();
	const float &Zll_met_phi();
	const float &Zll_mindphi_met_j1_j2();
	const float &Zll_mt_met_lep();
	const float &Zll_dphi_Wlep();
	const float &Zll_MT2W();
	const float &Zll_topness();
	const float &Zll_topnessMod();
	const float &Zll_MT2_lb_b_mass();
	const float &Zll_MT2_lb_b();
	const float &Zll_MT2_lb_bqq_mass();
	const float &Zll_MT2_lb_bqq();
	const bool &	lep1_is_mu();
	const bool &	lep1_is_el();
	const int &lep1_charge();
	const int &lep1_pdgid();
	const int &lep1_type();
	const int &lep1_production_type();
	const float &lep1_d0();
	const float &lep1_d0err();
	const float &lep1_dz();
	const float &lep1_dzerr();
	const float &lep1_sigmaIEtaEta_fill5x5();
	const float &lep1_dEtaIn();
	const float &lep1_dPhiIn();
	const float &lep1_hOverE();
	const float &lep1_ooEmooP();
	const int &lep1_expectedMissingInnerHits();
	const bool &	lep1_conversionVeto();
	const float &lep1_etaSC();
	const float &lep1_ChiSqr();
	const float &lep1_chiso();
	const float &lep1_nhiso();
	const float &lep1_emiso();
	const float &lep1_deltaBeta();
	const float &lep1_relIso03DB();
	const float &lep1_relIso03EA();
	const float &lep1_relIso04DB();
	const float &lep1_miniRelIsoDB();
	const float &lep1_miniRelIsoEA();
	const float &lep1_MiniIso();
	const int &lep1_mcid();
	const int &lep1_mcstatus();
	const int &lep1_mc3dr();
	const int &lep1_mc3id();
	const int &lep1_mc3idx();
	const int &lep1_mc3motherid();
	const int &lep1_mc3motheridx();
	const bool &	lep1_is_eleid_loose();
	const bool &	lep1_is_eleid_medium();
	const bool &	lep1_is_eleid_tight();
	const bool &	lep1_is_phys14_loose_noIso();
	const bool &	lep1_is_phys14_medium_noIso();
	const bool &	lep1_is_phys14_tight_noIso();
	const float &lep1_eoverpin();
	const bool &	lep1_is_muoid_loose();
	const bool &	lep1_is_muoid_medium();
	const bool &	lep1_is_muoid_tight();
	const float &lep1_ip3d();
	const float &lep1_ip3derr();
	const bool &	lep1_is_pfmu();
	const bool &	lep1_passMediumID();
	const bool &	lep1_passVeto();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &lep1_p4();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &lep1_mcp4();
	const float &lep1_pt();
	const float &lep1_eta();
	const float &lep1_phi();
	const float &lep1_mass();
	const bool &	lep2_is_mu();
	const bool &	lep2_is_el();
	const int &lep2_charge();
	const int &lep2_pdgid();
	const int &lep2_type();
	const int &lep2_production_type();
	const float &lep2_d0();
	const float &lep2_d0err();
	const float &lep2_dz();
	const float &lep2_dzerr();
	const float &lep2_sigmaIEtaEta_fill5x5();
	const float &lep2_dEtaIn();
	const float &lep2_dPhiIn();
	const float &lep2_hOverE();
	const float &lep2_ooEmooP();
	const int &lep2_expectedMissingInnerHits();
	const bool &	lep2_conversionVeto();
	const float &lep2_etaSC();
	const float &lep2_ChiSqr();
	const float &lep2_chiso();
	const float &lep2_nhiso();
	const float &lep2_emiso();
	const float &lep2_deltaBeta();
	const float &lep2_relIso03DB();
	const float &lep2_relIso03EA();
	const float &lep2_relIso04DB();
	const float &lep2_miniRelIsoDB();
	const float &lep2_miniRelIsoEA();
	const float &lep2_MiniIso();
	const int &lep2_mcid();
	const int &lep2_mcstatus();
	const int &lep2_mc3dr();
	const int &lep2_mc3id();
	const int &lep2_mc3idx();
	const int &lep2_mc3motherid();
	const int &lep2_mc3motheridx();
	const bool &	lep2_is_eleid_loose();
	const bool &	lep2_is_eleid_medium();
	const bool &	lep2_is_eleid_tight();
	const bool &	lep2_is_phys14_loose_noIso();
	const bool &	lep2_is_phys14_medium_noIso();
	const bool &	lep2_is_phys14_tight_noIso();
	const float &lep2_eoverpin();
	const bool &	lep2_is_muoid_loose();
	const bool &	lep2_is_muoid_medium();
	const bool &	lep2_is_muoid_tight();
	const float &lep2_ip3d();
	const float &lep2_ip3derr();
	const bool &	lep2_is_pfmu();
	const bool &	lep2_passMediumID();
	const bool &	lep2_passVeto();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &lep2_p4();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &lep2_mcp4();
	const float &lep2_pt();
	const float &lep2_eta();
	const float &lep2_phi();
	const float &lep2_mass();
	const vector<float> &ph_sigmaIEtaEta_fill5x5();
	const vector<float> &ph_hOverE();
	const vector<float> &ph_r9();
	const vector<float> &ph_chiso();
	const vector<float> &ph_nhiso();
	const vector<float> &ph_phiso();
	const vector<bool> &ph_idCutBased();
	const vector<int> &ph_overlapJetId();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &ph_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &ph_mcp4();
	const vector<float> &ph_pt();
	const vector<float> &ph_eta();
	const vector<float> &ph_phi();
	const vector<float> &ph_mass();
	const vector<int> &ph_mcMatchId();
	const vector<float> &ph_genIso04();
	const vector<float> &ph_drMinParton();
	const int &nGoodGenJets();
	const int &ngoodjets();
	const int &nfailjets();
	const int &ak8GoodPFJets();
	const int &ngoodbtags();
	const float &ak4_HT();
	const float &ak4_htssm();
	const float &ak4_htosm();
	const float &ak4_htratiom();
	const vector<float> &dphi_ak4pfjet_met();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &ak4pfjets_p4();
	const vector<float> &ak4pfjets_pt();
	const vector<float> &ak4pfjets_eta();
	const vector<float> &ak4pfjets_phi();
	const vector<float> &ak4pfjets_mass();
	const vector<bool> &ak4pfjets_passMEDbtag();
	const vector<float> &ak4pfjets_qg_disc();
	const vector<float> &ak4pfjets_CSV();
	const vector<float> &ak4pfjets_puid();
	const vector<int> &ak4pfjets_parton_flavor();
	const vector<bool> &ak4pfjets_loose_puid();
	const vector<bool> &ak4pfjets_loose_pfid();
	const vector<bool> &ak4pfjets_medium_pfid();
	const vector<bool> &ak4pfjets_tight_pfid();
	const vector<float> &ak4pfjets_MEDbjet_pt();
	const float &ak4pfjets_leadMEDbjet_pt();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &ak4pfjets_leadMEDbjet_p4();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &ak4pfjets_leadbtag_p4();
	const vector<float> &ak4pfjets_chf();
	const vector<float> &ak4pfjets_nhf();
	const vector<float> &ak4pfjets_cef();
	const vector<float> &ak4pfjets_nef();
	const vector<float> &ak4pfjets_muf();
	const vector<int> &ak4pfjets_cm();
	const vector<int> &ak4pfjets_nm();
	const vector<int> &ak4pfjets_mc3dr();
	const vector<int> &ak4pfjets_mc3id();
	const vector<int> &ak4pfjets_mc3idx();
	const vector<int> &ak4pfjets_mcmotherid();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &ak4pfjet_overlep1_p4();
	const float &ak4pfjet_overlep1_CSV();
	const float &ak4pfjet_overlep1_pu_id();
	const float &ak4pfjet_overlep1_chf();
	const float &ak4pfjet_overlep1_nhf();
	const float &ak4pfjet_overlep1_cef();
	const float &ak4pfjet_overlep1_nef();
	const float &ak4pfjet_overlep1_muf();
	const int &ak4pfjet_overlep1_cm();
	const int &ak4pfjet_overlep1_nm();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &ak4pfjet_overlep2_p4();
	const float &ak4pfjet_overlep2_CSV();
	const float &ak4pfjet_overlep2_pu_id();
	const float &ak4pfjet_overlep2_chf();
	const float &ak4pfjet_overlep2_nhf();
	const float &ak4pfjet_overlep2_cef();
	const float &ak4pfjet_overlep2_nef();
	const float &ak4pfjet_overlep2_muf();
	const int &ak4pfjet_overlep2_cm();
	const int &ak4pfjet_overlep2_nm();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &ak8pfjets_p4();
	const vector<float> &ak8pfjets_tau1();
	const vector<float> &ak8pfjets_tau2();
	const vector<float> &ak8pfjets_tau3();
	const vector<float> &ak8pfjets_top_mass();
	const vector<float> &ak8pfjets_pruned_mass();
	const vector<float> &ak8pfjets_trimmed_mass();
	const vector<float> &ak8pfjets_filtered_mass();
	const vector<float> &ak8pfjets_pu_id();
	const vector<int> &ak8pfjets_parton_flavor();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &ak4genjets_p4();
	const vector<TString> &tau_IDnames();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &tau_leadtrack_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &tau_leadneutral_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &tau_p4();
	const vector<vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > > &tau_isocand_p4();
	const vector<vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > > &tau_sigcand_p4();
	const vector<float> &tau_mass();
	const vector<vector<float> > &tau_ID();
	const vector<float> &tau_passID();
	const vector<float> &tau_charge();
	const int &ngoodtaus();
	const vector<float> &tau_againstMuonTight();
	const vector<float> &tau_againstElectronLoose();
	const vector<bool> &tau_isVetoTau();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &isoTracks_p4();
	const vector<int> &isoTracks_charge();
	const vector<float> &isoTracks_absIso();
	const vector<float> &isoTracks_dz();
	const vector<int> &isoTracks_pdgId();
	const vector<int> &isoTracks_selectedidx();
	const int &isoTracks_nselected();
	const vector<bool> &isoTracks_isVetoTrack();
	const vector<bool> &isoTracks_isVetoTrack_v2();
	const vector<bool> &isoTracks_isVetoTrack_v3();
	const vector<bool> &genleps_isfromt();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genleps_p4();
	const vector<int> &genleps_id();
	const vector<int> &genleps__genpsidx();
	const vector<int> &genleps_status();
	const vector<bool> &genleps_fromHardProcessDecayed();
	const vector<bool> &genleps_fromHardProcessFinalState();
	const vector<bool> &genleps_isHardProcess();
	const vector<bool> &genleps_isLastCopy();
	const vector<int> &genleps_gentaudecay();
	const int &gen_nfromtleps_();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genleps_motherp4();
	const vector<int> &genleps_motherid();
	const vector<int> &genleps_motheridx();
	const vector<int> &genleps_motherstatus();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genleps_gmotherp4();
	const vector<int> &genleps_gmotherid();
	const vector<int> &genleps_gmotheridx();
	const vector<int> &genleps_gmotherstatus();
	const vector<bool> &gennus_isfromt();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &gennus_p4();
	const vector<int> &gennus_id();
	const vector<int> &gennus__genpsidx();
	const vector<int> &gennus_status();
	const vector<bool> &gennus_fromHardProcessDecayed();
	const vector<bool> &gennus_fromHardProcessFinalState();
	const vector<bool> &gennus_isHardProcess();
	const vector<bool> &gennus_isLastCopy();
	const vector<int> &gennus_gentaudecay();
	const int &gen_nfromtnus_();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &gennus_motherp4();
	const vector<int> &gennus_motherid();
	const vector<int> &gennus_motheridx();
	const vector<int> &gennus_motherstatus();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &gennus_gmotherp4();
	const vector<int> &gennus_gmotherid();
	const vector<int> &gennus_gmotheridx();
	const vector<int> &gennus_gmotherstatus();
	const vector<bool> &gents_isfromt();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &gents_p4();
	const vector<int> &gents_id();
	const vector<int> &gents__genpsidx();
	const vector<int> &gents_status();
	const vector<bool> &gents_fromHardProcessDecayed();
	const vector<bool> &gents_fromHardProcessFinalState();
	const vector<bool> &gents_isHardProcess();
	const vector<bool> &gents_isLastCopy();
	const vector<int> &gents_gentaudecay();
	const int &gen_nfromtts_();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &gents_motherp4();
	const vector<int> &gents_motherid();
	const vector<int> &gents_motheridx();
	const vector<int> &gents_motherstatus();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &gents_gmotherp4();
	const vector<int> &gents_gmotherid();
	const vector<int> &gents_gmotheridx();
	const vector<int> &gents_gmotherstatus();
	const vector<bool> &genqs_isfromt();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genqs_p4();
	const vector<int> &genqs_id();
	const vector<int> &genqs__genpsidx();
	const vector<int> &genqs_status();
	const vector<bool> &genqs_fromHardProcessDecayed();
	const vector<bool> &genqs_fromHardProcessFinalState();
	const vector<bool> &genqs_isHardProcess();
	const vector<bool> &genqs_isLastCopy();
	const vector<int> &genqs_gentaudecay();
	const int &gen_nfromtqs_();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genqs_motherp4();
	const vector<int> &genqs_motherid();
	const vector<int> &genqs_motheridx();
	const vector<int> &genqs_motherstatus();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genqs_gmotherp4();
	const vector<int> &genqs_gmotherid();
	const vector<int> &genqs_gmotheridx();
	const vector<int> &genqs_gmotherstatus();
	const vector<bool> &genbosons_isfromt();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genbosons_p4();
	const vector<int> &genbosons_id();
	const vector<int> &genbosons__genpsidx();
	const vector<int> &genbosons_status();
	const vector<bool> &genbosons_fromHardProcessDecayed();
	const vector<bool> &genbosons_fromHardProcessFinalState();
	const vector<bool> &genbosons_isHardProcess();
	const vector<bool> &genbosons_isLastCopy();
	const vector<int> &genbosons_gentaudecay();
	const int &gen_nfromtbosons_();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genbosons_motherp4();
	const vector<int> &genbosons_motherid();
	const vector<int> &genbosons_motheridx();
	const vector<int> &genbosons_motherstatus();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genbosons_gmotherp4();
	const vector<int> &genbosons_gmotherid();
	const vector<int> &genbosons_gmotheridx();
	const vector<int> &genbosons_gmotherstatus();
	const vector<bool> &gensusy_isfromt();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &gensusy_p4();
	const vector<int> &gensusy_id();
	const vector<int> &gensusy__genpsidx();
	const vector<int> &gensusy_status();
	const vector<bool> &gensusy_fromHardProcessDecayed();
	const vector<bool> &gensusy_fromHardProcessFinalState();
	const vector<bool> &gensusy_isHardProcess();
	const vector<bool> &gensusy_isLastCopy();
	const vector<int> &gensusy_gentaudecay();
	const int &gen_nfromtsusy_();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &gensusy_motherp4();
	const vector<int> &gensusy_motherid();
	const vector<int> &gensusy_motheridx();
	const vector<int> &gensusy_motherstatus();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &gensusy_gmotherp4();
	const vector<int> &gensusy_gmotherid();
	const vector<int> &gensusy_gmotheridx();
	const vector<int> &gensusy_gmotherstatus();

  static void progress( int nEventsTotal, int nEventsChain );
};

#ifndef __CINT__
extern V00_00_04 v00_00_04;
#endif

namespace V00_00_04_np {
	const unsigned int &run();
	const unsigned int &ls();
	const unsigned int &evt();
	const int &nvtxs();
	const int &firstGoodVtxIdx();
	const int &firstVtx_isfake();
	const float &firstVtx_ndof();
	const float &firstVtx_posRho();
	const float &firstVtx_posZ();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &firstVtx_posp4();
	const int &pu_nvtxs();
	const float &pfmet();
	const float &pfmet_phi();
	const float &calomet();
	const float &calomet_phi();
	const float &filt_cscbeamhalo();
	const float &filt_ecallaser();
	const float &filt_ecaltp();
	const float &filt_eebadsc();
	const float &filt_goodvtx();
	const float &filt_badevents();
	const float &filt_hbhenoise();
	const float &filt_hcallaser();
	const float &filt_met();
	const float &filt_trkfail();
	const float &filt_trkPOG();
	const float &filt_trkPOG_tmc();
	const float &filt_trkPOG_tms();
	const float &filt_eff();
	const float &scale1fb();
	const float &xsec();
	const float &kfactor();
	const float &pu_ntrue();
	const int &ngoodleps();
	const int &nlooseleps();
	const int &nvetoleps();
	const bool &is_data();
	const string &dataset();
	const string &filename();
	const string &cms3tag();
	const unsigned int &nEvents();
	const unsigned int &nEvents_goodvtx();
	const unsigned int &nEvents_MET30();
	const unsigned int &nEvents_1goodlep();
	const unsigned int &nEvents_2goodjets();
	const int &genlepsfromtop();
	const int &genLepsHardProcess();
	const int &genNusHardProcess();
	const int &is0lep();
	const int &is1lep();
	const int &is2lep();
	const int &isZtoNuNu();
	const int &is1lepFromW();
	const int &is1lepFromTop();
	const float &MT2W();
	const float &MT2W_lep2();
	const float &mindphi_met_j1_j2();
	const float &mt_met_lep();
	const float &mt_met_lep2();
	const float &dR_lep_leadb();
	const float &dR_lep2_leadb();
	const float &hadronic_top_chi2();
	const float &dphi_Wlep();
	const float &MET_over_sqrtHT();
	const float &ak4pfjets_rho();
	const vector<string> &genweightsID();
	const vector<float> &genweights();
	const vector<string> &sparms_names();
	const float &sparms_filterEfficiency();
	const float &sparms_pdfScale();
	const float &sparms_pdfWeight1();
	const float &sparms_pdfWeight2();
	const float &sparms_weight();
	const float &sparms_xsec();
	const vector<float> &sparms_values();
	const int &sparms_subProcessId();
	const float &mass_lsp();
	const float &mass_chargino();
	const float &mass_stop();
	const float &genmet();
	const float &genmet_phi();
	const float &genht();
	const bool &PassTrackVeto();
	const bool &PassTrackVeto_v2();
	const bool &PassTrackVeto_v3();
	const bool &PassTauVeto();
	const float &EA_all_rho();
	const float &EA_allcalo_rho();
	const float &EA_centralcalo_rho();
	const float &EA_centralchargedpileup_rho();
	const float &EA_centralneutral_rho();
	const float &topness();
	const float &topness_lep2();
	const float &topnessMod();
	const float &topnessMod_lep2();
	const float &MT2_lb_b();
	const float &MT2_lb_b_lep2();
	const float &MT2_lb_b_mass();
	const float &MT2_lb_b_mass_lep2();
	const float &MT2_lb_bqq();
	const float &MT2_lb_bqq_lep2();
	const float &MT2_lb_bqq_mass();
	const float &MT2_lb_bqq_mass_lep2();
	const float &Mlb_closestb();
	const float &Mlb_lead_bdiscr();
	const float &Mlb_closestb_lep2();
	const float &Mlb_lead_bdiscr_lep2();
	const float &Mjjj();
	const float &Mjjj_lep2();
	const int &HLT_SingleEl();
	const int &HLT_SingleMu();
	const int &HLT_MET170();
	const int &HLT_MET120Btag();
	const int &HLT_MET120Mu5();
	const int &HLT_HT350MET120();
	const int &HLT_DiEl();
	const int &HLT_DiEl_17_12();
	const int &HLT_DiMu();
	const int &HLT_Mu8El17();
	const int &HLT_Mu8El23();
	const int &HLT_Mu17El12();
	const int &HLT_Mu23El12();
	const int &HLT_SingleEl23();
	const int &HLT_SingleEl27();
	const int &HLT_SingleEl27Tight();
	const int &HLT_SingleElTight();
	const int &HLT_SingleElHT200();
	const int &HLT_SingleMuNoEta();
	const int &HLT_SingleMuNoIso();
	const int &HLT_SingleMuNoIsoNoEta();
	const int &HLT_Mu6HT200MET100();
	const int &HLT_HT350MET100();
	const int &HLT_SingleMu17();
	const int &HLT_SingleMu20();
	const int &HLT_SingleMu24();
	const int &HLT_MonoCentPFJet80_METNoMu90_MHTNoMu90_IDTight();
	const int &HLT_MET90_MHT90_IDTight();
	const int &HLT_METNoMu90_NoiseCleaned_MHTNoMu90_IDTight();
	const int &HLT_Photon90_CaloIdL_PFHT500();
	const int &HLT_Photon165_R9Id90_HE10_IsoM();
	const int &HLT_Photon175();
	const int &HLT_Photon165_HE10();
	const float &pu_weight();
	const float &lep_sf();
	const float &btag_sf();
	const float &HLT_SingleEl_eff();
	const float &HLT_SingleMu_eff();
	const int &nPhotons();
	const int &ph_selectedidx();
	const int &ph_ngoodjets();
	const int &ph_ngoodbtags();
	const float &ph_met();
	const float &ph_met_phi();
	const float &ph_HT();
	const float &ph_htssm();
	const float &ph_htosm();
	const float &ph_htratiom();
	const float &ph_mt_met_lep();
	const float &ph_dphi_Wlep();
	const float &ph_MT2W();
	const float &ph_topness();
	const float &ph_topnessMod();
	const float &ph_MT2_lb_b_mass();
	const float &ph_MT2_lb_b();
	const float &ph_MT2_lb_bqq_mass();
	const float &ph_MT2_lb_bqq();
	const float &ph_hadronic_top_chi2();
	const float &ph_mindphi_met_j1_j2();
	const float &ph_Mlb_lead_bdiscr();
	const float &ph_dR_lep_leadb();
	const float &ph_Mlb_closestb();
	const float &ph_Mjjj();
	const int &Zll_idl1();
	const int &Zll_idl2();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &Zll_p4l1();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &Zll_p4l2();
	const bool &Zll_OS();
	const bool &Zll_SF();
	const bool &Zll_isZmass();
	const float &Zll_M();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &Zll_p4();
	const int &Zll_selLep();
	const float &Zll_met();
	const float &Zll_met_phi();
	const float &Zll_mindphi_met_j1_j2();
	const float &Zll_mt_met_lep();
	const float &Zll_dphi_Wlep();
	const float &Zll_MT2W();
	const float &Zll_topness();
	const float &Zll_topnessMod();
	const float &Zll_MT2_lb_b_mass();
	const float &Zll_MT2_lb_b();
	const float &Zll_MT2_lb_bqq_mass();
	const float &Zll_MT2_lb_bqq();
	const bool &lep1_is_mu();
	const bool &lep1_is_el();
	const int &lep1_charge();
	const int &lep1_pdgid();
	const int &lep1_type();
	const int &lep1_production_type();
	const float &lep1_d0();
	const float &lep1_d0err();
	const float &lep1_dz();
	const float &lep1_dzerr();
	const float &lep1_sigmaIEtaEta_fill5x5();
	const float &lep1_dEtaIn();
	const float &lep1_dPhiIn();
	const float &lep1_hOverE();
	const float &lep1_ooEmooP();
	const int &lep1_expectedMissingInnerHits();
	const bool &lep1_conversionVeto();
	const float &lep1_etaSC();
	const float &lep1_ChiSqr();
	const float &lep1_chiso();
	const float &lep1_nhiso();
	const float &lep1_emiso();
	const float &lep1_deltaBeta();
	const float &lep1_relIso03DB();
	const float &lep1_relIso03EA();
	const float &lep1_relIso04DB();
	const float &lep1_miniRelIsoDB();
	const float &lep1_miniRelIsoEA();
	const float &lep1_MiniIso();
	const int &lep1_mcid();
	const int &lep1_mcstatus();
	const int &lep1_mc3dr();
	const int &lep1_mc3id();
	const int &lep1_mc3idx();
	const int &lep1_mc3motherid();
	const int &lep1_mc3motheridx();
	const bool &lep1_is_eleid_loose();
	const bool &lep1_is_eleid_medium();
	const bool &lep1_is_eleid_tight();
	const bool &lep1_is_phys14_loose_noIso();
	const bool &lep1_is_phys14_medium_noIso();
	const bool &lep1_is_phys14_tight_noIso();
	const float &lep1_eoverpin();
	const bool &lep1_is_muoid_loose();
	const bool &lep1_is_muoid_medium();
	const bool &lep1_is_muoid_tight();
	const float &lep1_ip3d();
	const float &lep1_ip3derr();
	const bool &lep1_is_pfmu();
	const bool &lep1_passMediumID();
	const bool &lep1_passVeto();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &lep1_p4();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &lep1_mcp4();
	const float &lep1_pt();
	const float &lep1_eta();
	const float &lep1_phi();
	const float &lep1_mass();
	const bool &lep2_is_mu();
	const bool &lep2_is_el();
	const int &lep2_charge();
	const int &lep2_pdgid();
	const int &lep2_type();
	const int &lep2_production_type();
	const float &lep2_d0();
	const float &lep2_d0err();
	const float &lep2_dz();
	const float &lep2_dzerr();
	const float &lep2_sigmaIEtaEta_fill5x5();
	const float &lep2_dEtaIn();
	const float &lep2_dPhiIn();
	const float &lep2_hOverE();
	const float &lep2_ooEmooP();
	const int &lep2_expectedMissingInnerHits();
	const bool &lep2_conversionVeto();
	const float &lep2_etaSC();
	const float &lep2_ChiSqr();
	const float &lep2_chiso();
	const float &lep2_nhiso();
	const float &lep2_emiso();
	const float &lep2_deltaBeta();
	const float &lep2_relIso03DB();
	const float &lep2_relIso03EA();
	const float &lep2_relIso04DB();
	const float &lep2_miniRelIsoDB();
	const float &lep2_miniRelIsoEA();
	const float &lep2_MiniIso();
	const int &lep2_mcid();
	const int &lep2_mcstatus();
	const int &lep2_mc3dr();
	const int &lep2_mc3id();
	const int &lep2_mc3idx();
	const int &lep2_mc3motherid();
	const int &lep2_mc3motheridx();
	const bool &lep2_is_eleid_loose();
	const bool &lep2_is_eleid_medium();
	const bool &lep2_is_eleid_tight();
	const bool &lep2_is_phys14_loose_noIso();
	const bool &lep2_is_phys14_medium_noIso();
	const bool &lep2_is_phys14_tight_noIso();
	const float &lep2_eoverpin();
	const bool &lep2_is_muoid_loose();
	const bool &lep2_is_muoid_medium();
	const bool &lep2_is_muoid_tight();
	const float &lep2_ip3d();
	const float &lep2_ip3derr();
	const bool &lep2_is_pfmu();
	const bool &lep2_passMediumID();
	const bool &lep2_passVeto();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &lep2_p4();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &lep2_mcp4();
	const float &lep2_pt();
	const float &lep2_eta();
	const float &lep2_phi();
	const float &lep2_mass();
	const vector<float> &ph_sigmaIEtaEta_fill5x5();
	const vector<float> &ph_hOverE();
	const vector<float> &ph_r9();
	const vector<float> &ph_chiso();
	const vector<float> &ph_nhiso();
	const vector<float> &ph_phiso();
	const vector<bool> &ph_idCutBased();
	const vector<int> &ph_overlapJetId();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &ph_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &ph_mcp4();
	const vector<float> &ph_pt();
	const vector<float> &ph_eta();
	const vector<float> &ph_phi();
	const vector<float> &ph_mass();
	const vector<int> &ph_mcMatchId();
	const vector<float> &ph_genIso04();
	const vector<float> &ph_drMinParton();
	const int &nGoodGenJets();
	const int &ngoodjets();
	const int &nfailjets();
	const int &ak8GoodPFJets();
	const int &ngoodbtags();
	const float &ak4_HT();
	const float &ak4_htssm();
	const float &ak4_htosm();
	const float &ak4_htratiom();
	const vector<float> &dphi_ak4pfjet_met();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &ak4pfjets_p4();
	const vector<float> &ak4pfjets_pt();
	const vector<float> &ak4pfjets_eta();
	const vector<float> &ak4pfjets_phi();
	const vector<float> &ak4pfjets_mass();
	const vector<bool> &ak4pfjets_passMEDbtag();
	const vector<float> &ak4pfjets_qg_disc();
	const vector<float> &ak4pfjets_CSV();
	const vector<float> &ak4pfjets_puid();
	const vector<int> &ak4pfjets_parton_flavor();
	const vector<bool> &ak4pfjets_loose_puid();
	const vector<bool> &ak4pfjets_loose_pfid();
	const vector<bool> &ak4pfjets_medium_pfid();
	const vector<bool> &ak4pfjets_tight_pfid();
	const vector<float> &ak4pfjets_MEDbjet_pt();
	const float &ak4pfjets_leadMEDbjet_pt();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &ak4pfjets_leadMEDbjet_p4();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &ak4pfjets_leadbtag_p4();
	const vector<float> &ak4pfjets_chf();
	const vector<float> &ak4pfjets_nhf();
	const vector<float> &ak4pfjets_cef();
	const vector<float> &ak4pfjets_nef();
	const vector<float> &ak4pfjets_muf();
	const vector<int> &ak4pfjets_cm();
	const vector<int> &ak4pfjets_nm();
	const vector<int> &ak4pfjets_mc3dr();
	const vector<int> &ak4pfjets_mc3id();
	const vector<int> &ak4pfjets_mc3idx();
	const vector<int> &ak4pfjets_mcmotherid();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &ak4pfjet_overlep1_p4();
	const float &ak4pfjet_overlep1_CSV();
	const float &ak4pfjet_overlep1_pu_id();
	const float &ak4pfjet_overlep1_chf();
	const float &ak4pfjet_overlep1_nhf();
	const float &ak4pfjet_overlep1_cef();
	const float &ak4pfjet_overlep1_nef();
	const float &ak4pfjet_overlep1_muf();
	const int &ak4pfjet_overlep1_cm();
	const int &ak4pfjet_overlep1_nm();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &ak4pfjet_overlep2_p4();
	const float &ak4pfjet_overlep2_CSV();
	const float &ak4pfjet_overlep2_pu_id();
	const float &ak4pfjet_overlep2_chf();
	const float &ak4pfjet_overlep2_nhf();
	const float &ak4pfjet_overlep2_cef();
	const float &ak4pfjet_overlep2_nef();
	const float &ak4pfjet_overlep2_muf();
	const int &ak4pfjet_overlep2_cm();
	const int &ak4pfjet_overlep2_nm();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &ak8pfjets_p4();
	const vector<float> &ak8pfjets_tau1();
	const vector<float> &ak8pfjets_tau2();
	const vector<float> &ak8pfjets_tau3();
	const vector<float> &ak8pfjets_top_mass();
	const vector<float> &ak8pfjets_pruned_mass();
	const vector<float> &ak8pfjets_trimmed_mass();
	const vector<float> &ak8pfjets_filtered_mass();
	const vector<float> &ak8pfjets_pu_id();
	const vector<int> &ak8pfjets_parton_flavor();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &ak4genjets_p4();
	const vector<TString> &tau_IDnames();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &tau_leadtrack_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &tau_leadneutral_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &tau_p4();
	const vector<vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > > &tau_isocand_p4();
	const vector<vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > > &tau_sigcand_p4();
	const vector<float> &tau_mass();
	const vector<vector<float> > &tau_ID();
	const vector<float> &tau_passID();
	const vector<float> &tau_charge();
	const int &ngoodtaus();
	const vector<float> &tau_againstMuonTight();
	const vector<float> &tau_againstElectronLoose();
	const vector<bool> &tau_isVetoTau();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &isoTracks_p4();
	const vector<int> &isoTracks_charge();
	const vector<float> &isoTracks_absIso();
	const vector<float> &isoTracks_dz();
	const vector<int> &isoTracks_pdgId();
	const vector<int> &isoTracks_selectedidx();
	const int &isoTracks_nselected();
	const vector<bool> &isoTracks_isVetoTrack();
	const vector<bool> &isoTracks_isVetoTrack_v2();
	const vector<bool> &isoTracks_isVetoTrack_v3();
	const vector<bool> &genleps_isfromt();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genleps_p4();
	const vector<int> &genleps_id();
	const vector<int> &genleps__genpsidx();
	const vector<int> &genleps_status();
	const vector<bool> &genleps_fromHardProcessDecayed();
	const vector<bool> &genleps_fromHardProcessFinalState();
	const vector<bool> &genleps_isHardProcess();
	const vector<bool> &genleps_isLastCopy();
	const vector<int> &genleps_gentaudecay();
	const int &gen_nfromtleps_();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genleps_motherp4();
	const vector<int> &genleps_motherid();
	const vector<int> &genleps_motheridx();
	const vector<int> &genleps_motherstatus();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genleps_gmotherp4();
	const vector<int> &genleps_gmotherid();
	const vector<int> &genleps_gmotheridx();
	const vector<int> &genleps_gmotherstatus();
	const vector<bool> &gennus_isfromt();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &gennus_p4();
	const vector<int> &gennus_id();
	const vector<int> &gennus__genpsidx();
	const vector<int> &gennus_status();
	const vector<bool> &gennus_fromHardProcessDecayed();
	const vector<bool> &gennus_fromHardProcessFinalState();
	const vector<bool> &gennus_isHardProcess();
	const vector<bool> &gennus_isLastCopy();
	const vector<int> &gennus_gentaudecay();
	const int &gen_nfromtnus_();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &gennus_motherp4();
	const vector<int> &gennus_motherid();
	const vector<int> &gennus_motheridx();
	const vector<int> &gennus_motherstatus();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &gennus_gmotherp4();
	const vector<int> &gennus_gmotherid();
	const vector<int> &gennus_gmotheridx();
	const vector<int> &gennus_gmotherstatus();
	const vector<bool> &gents_isfromt();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &gents_p4();
	const vector<int> &gents_id();
	const vector<int> &gents__genpsidx();
	const vector<int> &gents_status();
	const vector<bool> &gents_fromHardProcessDecayed();
	const vector<bool> &gents_fromHardProcessFinalState();
	const vector<bool> &gents_isHardProcess();
	const vector<bool> &gents_isLastCopy();
	const vector<int> &gents_gentaudecay();
	const int &gen_nfromtts_();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &gents_motherp4();
	const vector<int> &gents_motherid();
	const vector<int> &gents_motheridx();
	const vector<int> &gents_motherstatus();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &gents_gmotherp4();
	const vector<int> &gents_gmotherid();
	const vector<int> &gents_gmotheridx();
	const vector<int> &gents_gmotherstatus();
	const vector<bool> &genqs_isfromt();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genqs_p4();
	const vector<int> &genqs_id();
	const vector<int> &genqs__genpsidx();
	const vector<int> &genqs_status();
	const vector<bool> &genqs_fromHardProcessDecayed();
	const vector<bool> &genqs_fromHardProcessFinalState();
	const vector<bool> &genqs_isHardProcess();
	const vector<bool> &genqs_isLastCopy();
	const vector<int> &genqs_gentaudecay();
	const int &gen_nfromtqs_();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genqs_motherp4();
	const vector<int> &genqs_motherid();
	const vector<int> &genqs_motheridx();
	const vector<int> &genqs_motherstatus();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genqs_gmotherp4();
	const vector<int> &genqs_gmotherid();
	const vector<int> &genqs_gmotheridx();
	const vector<int> &genqs_gmotherstatus();
	const vector<bool> &genbosons_isfromt();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genbosons_p4();
	const vector<int> &genbosons_id();
	const vector<int> &genbosons__genpsidx();
	const vector<int> &genbosons_status();
	const vector<bool> &genbosons_fromHardProcessDecayed();
	const vector<bool> &genbosons_fromHardProcessFinalState();
	const vector<bool> &genbosons_isHardProcess();
	const vector<bool> &genbosons_isLastCopy();
	const vector<int> &genbosons_gentaudecay();
	const int &gen_nfromtbosons_();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genbosons_motherp4();
	const vector<int> &genbosons_motherid();
	const vector<int> &genbosons_motheridx();
	const vector<int> &genbosons_motherstatus();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genbosons_gmotherp4();
	const vector<int> &genbosons_gmotherid();
	const vector<int> &genbosons_gmotheridx();
	const vector<int> &genbosons_gmotherstatus();
	const vector<bool> &gensusy_isfromt();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &gensusy_p4();
	const vector<int> &gensusy_id();
	const vector<int> &gensusy__genpsidx();
	const vector<int> &gensusy_status();
	const vector<bool> &gensusy_fromHardProcessDecayed();
	const vector<bool> &gensusy_fromHardProcessFinalState();
	const vector<bool> &gensusy_isHardProcess();
	const vector<bool> &gensusy_isLastCopy();
	const vector<int> &gensusy_gentaudecay();
	const int &gen_nfromtsusy_();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &gensusy_motherp4();
	const vector<int> &gensusy_motherid();
	const vector<int> &gensusy_motheridx();
	const vector<int> &gensusy_motherstatus();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &gensusy_gmotherp4();
	const vector<int> &gensusy_gmotherid();
	const vector<int> &gensusy_gmotheridx();
	const vector<int> &gensusy_gmotherstatus();
}
#endif
